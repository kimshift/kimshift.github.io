import{_ as i,q as s,p as a,aE as e}from"./chunks/framework.-H45_L2h.js";const y=JSON.parse('{"title":"1.jQuery入门","description":"","frontmatter":{"title":"1.jQuery入门","date":"2023-06-01T17:01:48.000Z","categories":["前端开发"],"tags":["javascript","jQuery"],"prev":false,"next":"2.jQuery常用API"},"headers":[],"relativePath":"技术文章/前端开发/javascript/jQuery/1.jQuery入门.md","filePath":"技术文章/前端开发/javascript/jQuery/1.jQuery入门.md","lastUpdated":1723096133000}'),t={name:"技术文章/前端开发/javascript/jQuery/1.jQuery入门.md"},l=e(`<h1 id="_1-jquery-入门" tabindex="-1">1.jQuery 入门 <a class="header-anchor" href="#_1-jquery-入门" aria-label="Permalink to &quot;1.jQuery 入门&quot;">​</a></h1><h2 id="_1-jquery-概述" tabindex="-1">1.jQuery 概述 <a class="header-anchor" href="#_1-jquery-概述" aria-label="Permalink to &quot;1.jQuery 概述&quot;">​</a></h2><h3 id="_1-1-javascript-库" tabindex="-1">1.1 JavaScript 库 <a class="header-anchor" href="#_1-1-javascript-库" aria-label="Permalink to &quot;1.1 JavaScript 库&quot;">​</a></h3><p>仓库： 可以把很多东西放到这个仓库里面。找东西只需要到仓库里面查找到就可以了。</p><p><strong>JavaScript 库</strong>：即 library，是一个<strong>封装</strong>好的特定<strong>的集合</strong>（方法和函数）。从封装一大堆函数的角度理解库，就是在这个库中，封装了很多预先定义好的函数在里面，比如动画 animate、hide、show，比如获取元素等。</p><p>简单理解： 就是一个 JS 文件，里面对我们原生 js 代码进行了封装，存放到里面。这样我们可以快速高效的使用这些封装好的功能了。</p><p>比如 jQuery，就是为了快速方便的操作 DOM，里面基本都是函数（方法）。</p><p><strong>常见的 JavaScript 库</strong></p><ul><li>jQuery</li><li>Prototype</li><li>YUI</li><li>Dojo</li><li>Ext JS</li><li>移动端的 zepto</li></ul><p>这些库都是对原生 JavaScript 的封装，<strong>内部都是用 JavaScript 实现的</strong>，我们主要学习的是 <strong>jQuery</strong>。</p><h3 id="_1-2-jquery-的概念" tabindex="-1">1.2 jQuery 的概念 <a class="header-anchor" href="#_1-2-jquery-的概念" aria-label="Permalink to &quot;1.2 jQuery 的概念&quot;">​</a></h3><p><strong>jQuery</strong> 是一个快速、简洁的 <strong>JavaScript 库</strong>，其设计的宗旨是&quot;write Less，Do More&quot;，即倡导写更少的代码，做更多的事情。 j 就是 JavaScript； Query 查询； 意思就是查询 js，把 js 中的 DOM 操作做了封装，我们可以快速的查询使用里面的功能。</p><p><strong>jQuery 封装了 JavaScript 常用的功能代码</strong>，优化了 DOM 操作、事件处理、动画设计和 Ajax 交互。 <strong>学习 jQuery 本质： 就是学习调用这些函数（方法）。</strong><strong>jQuery 出现的目的是加快前端人员的开发速度，我们可以非常方便的调用和使用它</strong>，从而提高开发效率。</p><p><strong>优点</strong></p><ul><li>轻量级。核心文件才几十 kb，不会影响页面加载速度</li><li>跨浏览器兼容。基本兼容了现在主流的浏览器</li><li>链式编程、隐式迭代</li><li>对事件、样式、动画支持，大大简化了 DOM 操作</li><li>支持插件扩展开发。有着丰富的第三方的插件，例如：树形菜单、日期控件、轮播图等</li><li>免费、开源</li></ul><h2 id="_2-jquery-的基本使用" tabindex="-1">2. jQuery 的基本使用 <a class="header-anchor" href="#_2-jquery-的基本使用" aria-label="Permalink to &quot;2. jQuery 的基本使用&quot;">​</a></h2><h3 id="_2-1-jquery-的下载" tabindex="-1">2.1 jQuery 的下载 <a class="header-anchor" href="#_2-1-jquery-的下载" aria-label="Permalink to &quot;2.1 jQuery 的下载&quot;">​</a></h3><p>官网地址： <a href="https://jquery.com/" target="_blank" rel="noreferrer">https://jquery.com/</a></p><p>版本：</p><ul><li>1x ：兼容 IE 678 等低版本浏览器， 官网不再更新</li><li>2x ：不兼容 IE 678 等低版本浏览器， 官网不再更新</li><li>3x ：不兼容 IE 678 等低版本浏览器， 是官方主要更新维护的版本</li></ul><p>各个版本的下载：<a href="https://code.jquery.com/" target="_blank" rel="noreferrer">https://code.jquery.com/</a></p><p>CDN 资源:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.min.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="_2-2-jquery-的使用步骤" tabindex="-1">2.2 jQuery 的使用步骤 <a class="header-anchor" href="#_2-2-jquery-的使用步骤" aria-label="Permalink to &quot;2.2 jQuery 的使用步骤&quot;">​</a></h3><ol><li><p>引入 jQuery 文件</p></li><li><p>使用即可</p></li></ol><h3 id="_2-3-jquery-的入口函数" tabindex="-1">2.3 jQuery 的入口函数 <a class="header-anchor" href="#_2-3-jquery-的入口函数" aria-label="Permalink to &quot;2.3 jQuery 的入口函数&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 此处是页面 DOM 加载完成的入口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ready</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //  此处是页面DOM加载完成的入口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span></code></pre></div><ol><li><p>等着 DOM 结构渲染完毕即可执行内部代码，不必等到所有外部资源加载完成，jQuery 帮我们完成了封装。</p></li><li><p>相当于原生 js 中的 DOMContentLoaded。</p></li><li><p>不同于原生 js 中的 load 事件是等页面文档、外部的 js 文件、css 文件、图片加载完毕才执行内部代码。</p></li><li><p>更推荐使用第一种方式。</p></li></ol><h3 id="_2-4-jquery-的顶级对象" tabindex="-1">2.4 jQuery 的顶级对象 $ <a class="header-anchor" href="#_2-4-jquery-的顶级对象" aria-label="Permalink to &quot;2.4 jQuery 的顶级对象 $&quot;">​</a></h3><ol><li>$ 是 jQuery 的别称，在代码中可以使用 jQuery 代替 $，但一般为了方便，通常都直接使用 $ 。</li><li>$ 是 jQuery 的顶级对象， 相当于原生 JavaScript 中的 window。把元素利用$包装成 jQuery 对象，就可以调用 jQuery 的方法。</li></ol><h3 id="_2-5-jquery-对象和-dom-对象" tabindex="-1">2.5 jQuery 对象和 DOM 对象 <a class="header-anchor" href="#_2-5-jquery-对象和-dom-对象" aria-label="Permalink to &quot;2.5 jQuery 对象和 DOM 对象&quot;">​</a></h3><ol><li><p>用原生 JS 获取来的对象就是 DOM 对象</p></li><li><p>jQuery 方法获取的元素就是 jQuery 对象。</p></li><li><p>jQuery 对象本质是： 利用$对 DOM 对象包装后产生的对象（伪数组形式存储）。</p></li></ol><p><strong>注意：</strong> 只有 jQuery 对象才能使用 jQuery 方法，DOM 对象则使用原生的 JavaScirpt 方法。</p><p>DOM 对象与 jQuery 对象之间是可以相互转换的。 因为原生 js 比 jQuery 更大，原生的一些属性和方法 jQuery 没有给我们封装. 要想使用这些属性和方法需要把 jQuery 对象转换为 DOM 对象才能使用。</p><ol><li>DOM 对象转换为 jQuery 对象： $(DOM 对象)</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ol start="2"><li>jQuery 对象转换为 DOM 对象（两种方式）</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) [index]       index 是索引号</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index)    index 是索引号</span></span></code></pre></div>`,40),r=[l];function n(p,h,o,d,k,u){return a(),s("div",null,r)}const g=i(t,[["render",n]]);export{y as __pageData,g as default};
