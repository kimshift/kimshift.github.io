import{_ as s,q as a,p as i,aE as n}from"./chunks/framework.-H45_L2h.js";const F=JSON.parse('{"title":"常用正则表达式","description":"","frontmatter":{"title":"常用正则表达式","date":"2023-06-02T18:00:22.000Z","categories":["前端开发"],"tags":["正则表达式"],"sticky":3},"headers":[],"relativePath":"技术文章/前端开发/正则表达式.md","filePath":"技术文章/前端开发/正则表达式.md","lastUpdated":1723111045000}'),p={name:"技术文章/前端开发/正则表达式.md"},l=n(`<h1 id="常用正则表达式" tabindex="-1">常用正则表达式 <a class="header-anchor" href="#常用正则表达式" aria-label="Permalink to &quot;常用正则表达式&quot;">​</a></h1><h2 id="_1-正则表达式概述" tabindex="-1">1. 正则表达式概述 <a class="header-anchor" href="#_1-正则表达式概述" aria-label="Permalink to &quot;1. 正则表达式概述&quot;">​</a></h2><h3 id="_1-1-什么是正则表达式" tabindex="-1">1.1 什么是正则表达式 <a class="header-anchor" href="#_1-1-什么是正则表达式" aria-label="Permalink to &quot;1.1 什么是正则表达式&quot;">​</a></h3><p>**正则表达式（ Regular Expression ）**是用于匹配字符串中字符组合的模式。在 JavaScript 中，正则表达式也是对象。</p><p>正则表通常被用来检索、替换那些符合某个模式（规则）的文本，例如验证表单：用户名表单只能输入英文字母、数字或者下划线， 昵称输入框中可以输入中文(<strong>匹配</strong>)。此外，正则表达式还常用于过滤掉页面内容中的一些敏感词(<strong>替换</strong>)，或从字符串中获取我们想要的特定部分(<strong>提取</strong>)等 。</p><p>其他语言也会使用正则表达式，本阶段我们主要是利用 JavaScript 正则表达式完成表单验证。</p><h3 id="_1-2-正则表达式的特点" tabindex="-1">1.2 正则表达式的特点 <a class="header-anchor" href="#_1-2-正则表达式的特点" aria-label="Permalink to &quot;1.2 正则表达式的特点&quot;">​</a></h3><ol><li>灵活性、逻辑性和功能性非常的强。</li><li>可以迅速地用极简单的方式达到字符串的复杂控制。</li><li>对于刚接触的人来说，比较晦涩难懂。比如： <code>^\\w+([-+.]\\w+)_@\\w+([-.]\\w+)_\\.\\w+([-.]\\w+)\\*$</code></li><li>实际开发,一般都是直接复制写好的正则表达式. 但是要求会使用正则表达式并且根据实际情况修改正则表达式. 比如用户名: <code>/^[a-z0-9_-]{3,16}$/</code></li></ol><h2 id="_2-正则表达式在-javascript-中的使用" tabindex="-1">2. 正则表达式在 JavaScript 中的使用 <a class="header-anchor" href="#_2-正则表达式在-javascript-中的使用" aria-label="Permalink to &quot;2. 正则表达式在 JavaScript 中的使用&quot;">​</a></h2><h3 id="_2-1-创建正则表达式" tabindex="-1">2.1 创建正则表达式 <a class="header-anchor" href="#_2-1-创建正则表达式" aria-label="Permalink to &quot;2.1 创建正则表达式&quot;">​</a></h3><p>在 JavaScript 中，可以通过两种方式创建一个正则表达式。</p><ol><li>通过调用 RegExp 对象的构造函数创建</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>   var 变量名 = new RegExp(/表达式/);</span></span></code></pre></div><ol start="2"><li>通过字面量创建</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>   var 变量名 = /表达式/;</span></span></code></pre></div><p>// 注释中间放表达式就是正则字面量</p><h3 id="_2-2-测试正则表达式-test" tabindex="-1">2.2 测试正则表达式 test <a class="header-anchor" href="#_2-2-测试正则表达式-test" aria-label="Permalink to &quot;2.2 测试正则表达式 test&quot;">​</a></h3><p>test() 正则对象方法，用于检测字符串是否符合该规则，该对象会返回 true 或 false，其参数是测试字符串。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>   regexObj.test(str)</span></span></code></pre></div><ol><li>regexObj 是写的正则表达式</li><li>str 我们要测试的文本</li><li>就是检测 str 文本是否符合我们写的正则表达式规范.</li></ol><p>PS:模糊查询案例</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;张&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  re </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RegExp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arg)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;张三&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;张三丰&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;李四&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newArr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (re.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item.name)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//返回name:带有张字的数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(newArr)</span></span></code></pre></div><p>PS:精确查询案例</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">张三</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;张三&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;张三丰&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;李四&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newArr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (re.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item.name)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(newArr)</span></span></code></pre></div><h2 id="_3-正则表达式中的特殊字符" tabindex="-1">3. 正则表达式中的特殊字符 <a class="header-anchor" href="#_3-正则表达式中的特殊字符" aria-label="Permalink to &quot;3. 正则表达式中的特殊字符&quot;">​</a></h2><h3 id="_3-1-正则表达式的组成" tabindex="-1">3.1 正则表达式的组成 <a class="header-anchor" href="#_3-1-正则表达式的组成" aria-label="Permalink to &quot;3.1 正则表达式的组成&quot;">​</a></h3><p>一个正则表达式<strong>可以由简单的字符构成</strong>，比如 /abc/，<strong>也可以是简单和特殊字符的组合</strong>，比如 /ab*c/ 。其中特殊字符也被称为<strong>元字符</strong>，在正则表达式中是具有<strong>特殊</strong>意义的专用<strong>符号</strong>，如 ^ 、$ 、+ 等。</p><p>特殊字符非常多，可以参考： MDN：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions</a> jQuery 手册：正则表达式部分 正则测试工具: <a href="http://tool.oschina.net/regex" target="_blank" rel="noreferrer">http://tool.oschina.net/regex</a></p><h3 id="_3-2-边界符" tabindex="-1">3.2 边界符 <a class="header-anchor" href="#_3-2-边界符" aria-label="Permalink to &quot;3.2 边界符&quot;">​</a></h3><p>正则表达式中的边界符（位置符）用来<strong>提示字符所处的位置</strong>，主要有两个字符。</p><table tabindex="0"><thead><tr><th>边界符</th><th>说明</th></tr></thead><tbody><tr><td>^</td><td>表示匹配行首的文本(以谁开始)</td></tr><tr><td>$</td><td>表示匹配行尾的文本(以谁结束)</td></tr></tbody></table><p>如果 ^ 和 $ 在一起，表示必须是精确匹配。</p><h3 id="_3-3-字符类" tabindex="-1">3.3 字符类 <a class="header-anchor" href="#_3-3-字符类" aria-label="Permalink to &quot;3.3 字符类&quot;">​</a></h3><p>字符类表示有一系列字符可供选择，只要匹配其中一个就可以了。<strong>所有可供选择的字符都放在方括号内</strong>。</p><ol><li>[] 方括号</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>   /[abc]/.test(&#39;andy&#39;)     // true</span></span></code></pre></div><p>后面的字符串只要包含 abc 中任意一个字符，都返回 true 。</p><ol start="2"><li>[-] 方括号内部 范围符-</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>   /^[a-z]$/.test(c&#39;)     // true</span></span></code></pre></div><p>方括号内部加上 - 表示<strong>范围</strong>，这里表示 <strong>a 到 z</strong> 26 个英文字母都可以。</p><ol start="3"><li>[^] 方括号内部 取反符^</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>   /[^abc]/.test(&#39;andy&#39;)     // false</span></span></code></pre></div><p>方括号内部加上 ^ 表示取反，只要包含方括号内的字符，都返回 false 。</p><p><strong>注意和边界符 ^ 区别，边界符写到方括号外面。</strong></p><ol start="4"><li>字符组合</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>   /[a-z1-9]/.test(&#39;andy&#39;)     // true</span></span></code></pre></div><p>方括号内部可以使用字符组合，这里表示包含 a 到 z 的 26 个英文字母和 1 到 9 的数字都可以。</p><h3 id="_3-4-量词符" tabindex="-1">3.4 量词符 <a class="header-anchor" href="#_3-4-量词符" aria-label="Permalink to &quot;3.4 量词符&quot;">​</a></h3><p>量词符用来<strong>设定某个模式出现的次数</strong>。</p><table tabindex="0"><thead><tr><th>量词</th><th>说明</th></tr></thead><tbody><tr><td><code>\\*</code></td><td>重复零次或更多次</td></tr><tr><td>+</td><td>重复一次或更多次</td></tr><tr><td>?</td><td>重复零次或一次</td></tr><tr><td><code>{n}</code></td><td>重复 n 次</td></tr><tr><td><code>{n,}</code></td><td>重复 n 次或更多次</td></tr><tr><td><code>{n,m}</code></td><td>重复 n 到 m 次</td></tr><tr><td>()</td><td>表示捕获分组,会把每个分组里的匹配的值保存起来，使用$n(n 是一个数字，表示第 n 个捕获组的内容)</td></tr><tr><td><code>(?:)</code></td><td>表示非捕获分组，和捕获分组唯一的区别在于，非捕获分组匹配的值不会保存起来</td></tr></tbody></table><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1234567890&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\\B</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(?=(?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{3}</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(?!</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">))</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;,&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 结果：1,234,567,890，匹配的是后面是3*n个数字的非单词边界(\\B)</span></span></code></pre></div><p><strong>☆ 前瞻后顾:(?&lt;=exp) 表示匹配 exp 之后的，(?=exp)表示匹配 exp 之前的</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;hi!你是谁,ws中国r,ws中国r.&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 前瞻语法:exp1(?=exp2) 查找exp2前面的exp1 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reg1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[A-Za-z]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(?=中国)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //匹配中国前面相接的英文字段</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//将中国前面相接的英文替换成我是</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;前瞻:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reg1, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;我是&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//测试: hi!你是谁,我是中国人我是中国人</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 后顾语法:(?&lt;=exp2)exp1 查找exp2后面的exp1 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reg2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(?&lt;=中国)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[A-Za-z]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //匹配中国后面相接的英文字段/</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//将中国后面相接的英文替换成人</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;后顾:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reg2, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;人&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//测试: hi!你是谁,我是中国人我是中国人</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 负前瞻语法:exp1(?!exp2) 查找后面不是exp2的exp1 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reg3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[A-Za-z]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(?!中国)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //匹配第一个后面不与中国相接的英文字段</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 后面不与中国相接的英文替换成你好</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;负前瞻:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reg3, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;你好&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//负前瞻: 你好!你是谁,你好s中国你好,你好s中国你好.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 负后顾语法:(?&lt;!exp2)exp1 查找前面不是exp2的exp1*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reg4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(?!中国)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[A-Za-z]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //匹配第一个前面不与中国相接的英文字段/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;负后顾:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reg4, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;你好&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//负后顾: 你好!你是谁,ws中国r,ws中国r.</span></span></code></pre></div><p><strong>☆ 匹配两个字符串之间的值</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*******</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@description</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">: [正则匹配两字符串之间的值]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@author</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">: 琴时</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;打酱油AX我们是大写埃克斯(x)到大写歪(y)之间的值Y打酱油B,匹配X到Y之间的字符串&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 匹配变量 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> startStr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;X&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> endStr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Y&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 匹配两个字符串X与Y中间的字符串包含X与Y*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> reg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">X</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*?</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">Y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //&quot;.&quot;表示任意字符、&quot;*&quot;表示重复零次或更多次、&quot;?&quot;表示重复零次或一次</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pattern</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RegExp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">startStr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}.*?\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">endStr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;g&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//与reg等价</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;测试:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reg)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//测试: [ &#39;X我们是大写埃克斯(x)到大写歪(y)之间的值Y&#39;, &#39;X到Y&#39; ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;测试:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pattern)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//测试: [ &#39;X我们是大写埃克斯(x)到大写歪(y)之间的值Y&#39;, &#39;X到Y&#39; ]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 匹配两个字符串X与Y中间的字符串包含X但是不包含Y */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> reg1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">X</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*?</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(?=Y)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //&quot;.*?&quot;解释同上reg描述、前瞻语法:str(?=Y) 查找Y前面的str</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pattern1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RegExp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">startStr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}.*?(?=\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">endStr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">})\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;g&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//与reg1等价</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;测试:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reg1)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//测试: [ &#39;X我们是大写埃克斯(x)到大写歪(y)之间的值&#39;, &#39;X到&#39; ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;测试:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pattern1)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//测试: [ &#39;X我们是大写埃克斯(x)到大写歪(y)之间的值&#39;, &#39;X到&#39; ]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 匹配两个字符串X与Y中间的字符串且不包含X与Y */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> reg2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(?&lt;=X)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*?</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(?=Y)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //后顾语法:(?&lt;=X)str 查找X后面的str、&quot;.*?(?=Y)&quot;解释同上reg1描述</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pattern2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RegExp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`(?&lt;=\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">startStr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}).*?(?=\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">endStr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">})\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;g&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//与reg2等价</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;测试:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reg2)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//测试: [ &#39;我们是大写埃克斯(x)到大写歪(y)之间的值&#39;, &#39;到&#39; ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;测试:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pattern2)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//测试: [ &#39;我们是大写埃克斯(x)到大写歪(y)之间的值&#39;, &#39;到&#39; ]</span></span></code></pre></div><h3 id="_3-5-括号总结" tabindex="-1">3.5 括号总结 <a class="header-anchor" href="#_3-5-括号总结" aria-label="Permalink to &quot;3.5 括号总结&quot;">​</a></h3><ol><li>大括号 量词符. 里面表示重复次数</li><li>中括号 字符集合。匹配方括号中的任意字符.</li><li>小括号 表示优先级</li></ol><p>可以在线测试: <a href="https://c.runoob.com/" target="_blank" rel="noreferrer">https://c.runoob.com/</a></p><h3 id="_3-6-预定义类" tabindex="-1">3.6 预定义类 <a class="header-anchor" href="#_3-6-预定义类" aria-label="Permalink to &quot;3.6 预定义类&quot;">​</a></h3><p>预定义类指的是<strong>某些常见模式的简写方式</strong>。</p><table tabindex="0"><thead><tr><th>预定类</th><th>说明</th></tr></thead><tbody><tr><td>\\d</td><td>匹配 0-9 之间的任意数字，相当于[0-9]</td></tr><tr><td>\\D</td><td>匹配所有 0-9 以外的字符，相当于<code>[^O-9]</code></td></tr><tr><td>\\w</td><td>匹配任意的字母、数字和下划线，相当于[A-Za-z0-9_]</td></tr><tr><td>\\W</td><td>除所有字母、数字和下划线以外的字符，相当于〔^A-Za-z0-9_]</td></tr><tr><td>\\s</td><td>匹配空格包括换行符、制表符、空格符等)，相等于[ \\t\\r\\n\\v\\f]</td></tr><tr><td>\\S</td><td>匹配非空格的字符，相当于<code>[^\\t\\r\\n\\v\\f]</code></td></tr></tbody></table><h2 id="_4-正则表达式中的替换" tabindex="-1">4. 正则表达式中的替换 <a class="header-anchor" href="#_4-正则表达式中的替换" aria-label="Permalink to &quot;4. 正则表达式中的替换&quot;">​</a></h2><h3 id="_4-1-replace-替换" tabindex="-1">4.1 replace 替换 <a class="header-anchor" href="#_4-1-replace-替换" aria-label="Permalink to &quot;4.1 replace 替换&quot;">​</a></h3><p>replace() 方法可以实现替换字符串操作，用来替换的参数可以是一个字符串或是一个正则表达式。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>   stringObject.replace(regexp/substr,replacement)</span></span></code></pre></div><ol><li><p>第一个参数: 被替换的字符串 或者 正则表达式</p></li><li><p>第二个参数: 替换为的字符串</p></li><li><p>返回值是一个替换完毕的新字符串</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//把 &quot;Doe, John&quot; 转换为 &quot;John Doe&quot; 的形式：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Doe, John&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;测试:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\w</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\w</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;$2 $1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">说明：$1,$2上就是按顺序对应小括号里面的小正则 捕获到的内容。</span></span></code></pre></div></li></ol><h3 id="_4-2-正则表达式参数" tabindex="-1">4.2 正则表达式参数 <a class="header-anchor" href="#_4-2-正则表达式参数" aria-label="Permalink to &quot;4.2 正则表达式参数&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> /表达式/[switch] --&gt;/^[0-9]*$/g</span></span>
<span class="line"><span> new RegExp(&#39;^[0-9]*$&#39;,&#39;g&#39;)</span></span></code></pre></div><p>switch(也称为修饰符) 按照什么样的模式来匹配. 有三种值：</p><ul><li>g：全局匹配</li><li>i：忽略大小写</li><li>gi：全局匹配 + 忽略大小写</li></ul><h3 id="_4-3-编写带变量的正则表达式" tabindex="-1">4.3 编写带变量的正则表达式 <a class="header-anchor" href="#_4-3-编写带变量的正则表达式" aria-label="Permalink to &quot;4.3 编写带变量的正则表达式&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*校验数字后面接x*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> params</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;x&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pattern</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RegExp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d+\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">params</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}$\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;g&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//==&gt;/^\\d+x$/g</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;测试:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pattern.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;8x&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//true</span></span></code></pre></div><h2 id="_5-常用的正则表达式" tabindex="-1">5. 常用的正则表达式 <a class="header-anchor" href="#_5-常用的正则表达式" aria-label="Permalink to &quot;5. 常用的正则表达式&quot;">​</a></h2><h3 id="一、校验数字的表达式" tabindex="-1">一、校验数字的表达式 <a class="header-anchor" href="#一、校验数字的表达式" aria-label="Permalink to &quot;一、校验数字的表达式&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>须包含大小写字母和数字：/^(?=.*[0-9].*)(?=.*[A-Z].*)(?=.*[a-z].*).{11}$/</span></span>
<span class="line"><span></span></span>
<span class="line"><span>非数字：/^\\D*$/</span></span>
<span class="line"><span></span></span>
<span class="line"><span>匹配任意位数字：^[0-9]*$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>n位的数字：^\\d{n}$  （\\d与[0-9]意思一样）</span></span>
<span class="line"><span></span></span>
<span class="line"><span>至少n位的数字：^\\d{n,}$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>m-n位的数字：^\\d{m,n}$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>1开头11位数字：^1\\d{11}$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>零和非零开头的任意数字：^(0|[1-9]\\d*)$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>非零开头的最多带两位小数的数字：^([1-9]\\d*)+(.\\d{1,2})?$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>商品价格最多两位小数(^[1-9]\\d*(\\.\\d{1,2})?$)|(^0(\\.\\d{1,2})?$)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>带1-2位小数的正数或负数：^(\\-)?\\d+(\\.\\d{1,2})?$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>正数、负数、和小数：^(\\-|\\+)?\\d+(\\.\\d+)?$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>有两位小数的正实数：^[0-9]+(.[0-9]{2})?$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>非零的正整数：^[1-9]\\d*$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>非零的负整数：^\\-[1-9][]0-9&quot;*$ 或 ^-[1-9]\\d*$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>非负整数：^\\d+$ 或 ^[1-9]\\d*|0$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>非正整数：^-[1-9]\\d*|0$ 或 ^((-\\d+)|(0+))$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>非负浮点数：^\\d+(\\.\\d+)?$ 或 ^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>非正浮点数：^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$ 或 ^(-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*))|0?\\.0+|0$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>正浮点数：^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$ 或 ^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>负浮点数：^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$ 或 ^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>浮点数：^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$</span></span></code></pre></div><h3 id="二、校验字符的表达式" tabindex="-1">二、校验字符的表达式 <a class="header-anchor" href="#二、校验字符的表达式" aria-label="Permalink to &quot;二、校验字符的表达式&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1. 汉字：^[\\u4e00-\\u9fa5]{0,}$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2. 英文和数字：^[A-Za-z\\d]+$ 或 ^[A-Za-z\\d]{4,40}$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>3. 长度为3-20的所有字符：^.{3,20}$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>4. 由26个英文字母组成的字符串：^[A-Za-z]+$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>5. 由26个大写英文字母组成的字符串：^[A-Z]+$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>6. 由26个小写英文字母组成的字符串：^[a-z]+$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>7. 由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>8. 由数字、26个英文字母或者下划线组成的字符串：^\\w+$ 或 ^\\w{3,20}$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>9. 中文、英文、数字包括下划线：^[\\u4E00-\\u9FA5A-Za-z0-9_]+$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>10. 中文、英文、数字但不包括下划线等符号：^[\\u4E00-\\u9FA5A-Za-z0-9]+$ 或 ^[\\u4E00-\\u9FA5A-Za-z0-9]{2,20}$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>11. 可以输入含有^%&amp;&#39;,;=?$\\&quot;等字符：[^%&amp;&#39;,;=?$\\x22]+ 12 禁止输入含有~的字符：[^~\\x22]+</span></span></code></pre></div><h3 id="三、特殊需求表达式" tabindex="-1">三、特殊需求表达式 <a class="header-anchor" href="#三、特殊需求表达式" aria-label="Permalink to &quot;三、特殊需求表达式&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1. 邮箱地址：/^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(\\.[a-zA-Z0-9_-])+$/</span></span>
<span class="line"><span>说明:（英文数字下划线减号+@+英文数字下划线减号+.+英文数字下划线减号）</span></span>
<span class="line"><span>/^([A-Za-z\\d]+[-|_|\\.]?)+[A-Za-z\\d]@([A-Za-z\\d]+(-[A-Za-z\\d]+)?\\.)+[a-zA-Z]{2,3}$/</span></span>
<span class="line"><span>说明：至少一位英文/数字开头+0/1位(减号/下划线/点)+英文/数字+@+英文/数字+0/1次(减号+至少一次英文/数字)+2~3位英文</span></span>
<span class="line"><span>2. 域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?</span></span>
<span class="line"><span></span></span>
<span class="line"><span>3. InternetURL：[a-zA-z]+://[^\\s]* 或 ^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&amp;=]*)?$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>4. 手机号码：^1(?:3\\d|4[4-9]|5[0-35-9]|6[67]|7[013-8]|8\\d|9\\d|)\\d{8}$</span></span>
<span class="line"><span>说明：必须1开头+3-9其中一个+限定数字一个（限定说明：3后面可接任意数字；4可接4-9；5可接0-3或者5-9；6可接6或者7；7可接除了2的数字，8或者9可接任意数字）+ 任意数字8个</span></span>
<span class="line"><span></span></span>
<span class="line"><span>中国大陆加港澳台手机正则验证：^1(?:3\\d|4[4-9]|5[0-35-9]|6[67]|7[013-8]|8\\d|9\\d|)\\d{8}$|^([6|9])\\d{7}$|^[6]([8|6])\\d{5}$|^[0][9]\\d{8}$</span></span>
<span class="line"><span>香港：9或6开头后面跟7位数字/澳门：66或68开头后面跟5位数字/台湾：09开头后面跟8位数字</span></span>
<span class="line"><span></span></span>
<span class="line"><span>5. 电话号码(&quot;XXX-XXXXXXX&quot;、&quot;XXXX-XXXXXXXX&quot;、&quot;XXX-XXXXXXX&quot;、&quot;XXX-XXXXXXXX&quot;、&quot;XXXXXXX&quot;和&quot;XXXXXXXX)：^(\\(\\d{3,4}-)|\\d{3.4}-)?\\d{7,8}$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>6. 国内电话号码(0511-4405222、021-87888822)：\\d{3}-\\d{8}|\\d{4}-\\d{7}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>7. 身份证号(15位、18位数字)：^\\d{15}|\\d{18}$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>8. 短身份证号码(数字、字母x结尾)：^([0-9]){7,18}(x|X)?$ 或 ^\\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>9. 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>10. 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\\w{5,17}$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>11. 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>12. 日期格式：^\\d{4}-\\d{1,2}-\\d{1,2}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>简单校验出生日期(1900~2099):/^((19\\d{2})|(20\\d{2}))\\-((0?[1-9])|(1[0-2]))\\-((0?[1-9])|([1-2][0-9])|30|31)$/</span></span>
<span class="line"><span>/^((?:19\\d{2})|(?:20\\d{2}))\\-((?:0?[1-9])|(?:1[0-2]))\\-((?:0?[1-9])|(?:[1-2][0-9])|30|31)$/</span></span>
<span class="line"><span></span></span>
<span class="line"><span>13. 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>14. 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>15. 钱的输入格式： 有四种钱的表示形式我们可以接受:&quot;10000.00&quot; 和 &quot;10,000.00&quot;, 和没有 &quot;分&quot; 的 &quot;10000&quot; 和 &quot;10,000&quot;：^[1-9][0-9]*$</span></span>
<span class="line"><span>	这表示任意一个不以0开头的数字,但是,这也意味着一个字符&quot;0&quot;不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$</span></span>
<span class="line"><span>	一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$</span></span>
<span class="line"><span>	这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.</span></span>
<span class="line"><span>		下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$</span></span>
<span class="line"><span>	必须说明的是,小数点后面至少应该有1位数,所以&quot;10.&quot;是不通过的,但是 &quot;10&quot; 和 &quot;10.2&quot; 是通过的：^[0-9]+(.[0-9]{2})?$</span></span>
<span class="line"><span>	这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]{1,2})?$</span></span>
<span class="line"><span>	这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</span></span>
<span class="line"><span>	1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$</span></span>
<span class="line"><span>(^[1-9]\\d*(\\.\\d{1,2})?$)|(^0(\\.\\d{1,2})?$)</span></span>
<span class="line"><span>25. xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\\\.[x|X][m|M][l|L]$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>26. 中文字符的正则表达式：[\\u4e00-\\u9fa5]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>27. 双字节字符：[^\\x00-\\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</span></span>
<span class="line"><span></span></span>
<span class="line"><span>28. 空白行的正则表达式：\\n\\s*\\r (可以用来删除空白行)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>29. HTML标记的正则表达式：&lt;(\\S*?)[^&gt;]*&gt;.*?&lt;/\\1&gt;|&lt;.*? /&gt; (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>30. 首尾空白字符的正则表达式：^\\s*|\\s*$或(^\\s*)|(\\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>31. 腾讯QQ号：[1-9][0-9]{4,} (腾讯QQ号从10000开始)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>32. 中国邮政编码：[1-9]\\d{5}(?!\\d) (中国邮政编码为6位数字)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>33. IP地址：\\d+\\.\\d+\\.\\d+\\.\\d+ (提取IP地址时有用)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>34. IP地址：((?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d))</span></span></code></pre></div>`,79),t=[l];function h(k,e,d,r,E,g){return i(),a("div",null,t)}const y=s(p,[["render",h]]);export{F as __pageData,y as default};
