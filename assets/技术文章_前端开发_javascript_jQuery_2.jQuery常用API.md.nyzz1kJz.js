import{_ as s,q as i,p as a,aE as t}from"./chunks/framework.-H45_L2h.js";const c=JSON.parse('{"title":"2.jQuery常用API","description":"","frontmatter":{"title":"2.jQuery常用API","date":"2023-06-01T17:11:41.000Z","categories":["前端开发"],"tags":["javascript","jQuery"],"prev":"1.jQuery入门","next":"3.jQuery事件"},"headers":[],"relativePath":"技术文章/前端开发/javascript/jQuery/2.jQuery常用API.md","filePath":"技术文章/前端开发/javascript/jQuery/2.jQuery常用API.md","lastUpdated":1723096133000}'),e={name:"技术文章/前端开发/javascript/jQuery/2.jQuery常用API.md"},l=t(`<h1 id="_2-jquery-常用-api" tabindex="-1">2.jQuery 常用 API <a class="header-anchor" href="#_2-jquery-常用-api" aria-label="Permalink to &quot;2.jQuery 常用 API&quot;">​</a></h1><h2 id="_1-jquery-选择器" tabindex="-1">1. jQuery 选择器 <a class="header-anchor" href="#_1-jquery-选择器" aria-label="Permalink to &quot;1. jQuery 选择器&quot;">​</a></h2><h3 id="_1-1-jquery-基础选择器" tabindex="-1">1.1 jQuery 基础选择器 <a class="header-anchor" href="#_1-1-jquery-基础选择器" aria-label="Permalink to &quot;1.1 jQuery 基础选择器&quot;">​</a></h3><p>原生 JS 获取元素方式很多，很杂，而且兼容性情况不一致，因此 jQuery 给我们做了封装，使获取元素统一标准。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;选择器&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//  里面选择器直接写 CSS 选择器即可，但是要加引号</span></span></code></pre></div><table tabindex="0"><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>ID 选择器</td><td>$(&quot;#id&quot;)</td><td>获取指定 ID 的元素</td></tr><tr><td>全选选择器</td><td>$(&#39;*&#39;)</td><td>匹配所有元素</td></tr><tr><td>类选择器</td><td>$(&quot;.class&quot;)</td><td>获取同一类 class 的元素</td></tr><tr><td>标签选择器</td><td>$(&quot;div&quot;)</td><td>获取同一类标签的所有元素</td></tr><tr><td>并集选择器</td><td>$(&quot;div,p,li&quot;)</td><td>选取多个元素</td></tr><tr><td>交集选择器</td><td>$(&quot;i.current&quot;)</td><td>交集元素</td></tr></tbody></table><h3 id="_1-2-jquery-层级选择器" tabindex="-1">1.2 jQuery 层级选择器 <a class="header-anchor" href="#_1-2-jquery-层级选择器" aria-label="Permalink to &quot;1.2 jQuery 层级选择器&quot;">​</a></h3><table tabindex="0"><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>子代选择器</td><td>$(&quot;ul&gt;li&quot;);</td><td>使用&gt;号，获取亲儿子层级的元素;注意，并不会获取孙子层级的元素</td></tr><tr><td>后代选择器</td><td>$(&quot;ul li&quot;);</td><td>使用空格，代表后代选择器，获取 ul 下的所有 li 元素，包括孙子等</td></tr></tbody></table><p><strong>知识铺垫</strong></p><p>jQuery 设置样式</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">css</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;属性&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;值&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="_1-3-隐式迭代-重要" tabindex="-1">1.3 隐式迭代（重要） <a class="header-anchor" href="#_1-3-隐式迭代-重要" aria-label="Permalink to &quot;1.3 隐式迭代（重要）&quot;">​</a></h3><p>遍历内部 DOM 元素（伪数组形式存储）的过程就叫做<strong>隐式迭代</strong>。</p><p>简单理解：给匹配到的所有元素进行循环遍历，执行相应的方法，而不用我们再进行循环，简化我们的操作，方便我们调用。</p><h3 id="_1-4-jquery-筛选选择器" tabindex="-1">1.4 jQuery 筛选选择器 <a class="header-anchor" href="#_1-4-jquery-筛选选择器" aria-label="Permalink to &quot;1.4 jQuery 筛选选择器&quot;">​</a></h3><table tabindex="0"><thead><tr><th>语法</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>:first</td><td>$(&#39;li:first&#39;)</td><td>获取第一个 li 元素</td></tr><tr><td>:last</td><td>$(&#39;li:last&#39;)</td><td>获取最后一个 li 元素</td></tr><tr><td>:eq(index)</td><td>$(&quot;li:eq(2)&quot;)</td><td>获取到的 li 元素中，选择索引号为 2 的元素，索引号 index 从 0 开始。</td></tr><tr><td>:odd</td><td>$(&quot;li:odd&quot;)</td><td>获取到的 li 元素中，选择索引号为奇数的元素</td></tr><tr><td>:even</td><td>$(&quot;Iieven&quot;)</td><td>获取到的 li 元素中，选择索引号为偶数的元素</td></tr></tbody></table><h3 id="_1-5-jquery-筛选方法-重点" tabindex="-1">1.5 jQuery 筛选方法（重点） <a class="header-anchor" href="#_1-5-jquery-筛选方法-重点" aria-label="Permalink to &quot;1.5 jQuery 筛选方法（重点）&quot;">​</a></h3><table tabindex="0"><thead><tr><th>语法</th><th>用法</th><th>说明</th></tr></thead><tbody><tr><td>parent()</td><td>$(&quot;li&quot;).parent() ;</td><td>查找父级</td></tr><tr><td>children(selector)</td><td>$(&quot;ul&quot;).children(&quot;li&quot;)</td><td>相当于$(&quot;ul&gt;li&quot;)，最近一级（亲儿子)</td></tr><tr><td>find(selecton)</td><td>$(&quot;ul&quot;).find(&quot;li&quot;);</td><td>相当于 s(&quot;ul li&quot;),后代选择器</td></tr><tr><td>siblings(selector)</td><td>$(&quot;.first&quot;).siblings(&quot;li&quot;);</td><td>查找兄弟节点，不包括自己本身</td></tr><tr><td>nextAll([expr])</td><td>$(&quot;.first&quot; ). nextAll()</td><td>查找当前元素之后所有的同辈元素</td></tr><tr><td>prevtAll([expr])</td><td>$(&quot;.last&quot;).prevAll()</td><td>查找当前元素之前所有的同辈元素</td></tr><tr><td>hasClass(class)</td><td>$( &#39;div &#39; ).hasClass(&quot;protected&quot;)</td><td>检查当前的元素是否含有某个特定的类，如果有，则返回 true</td></tr><tr><td>eq(index)</td><td>$(&quot;li&quot;).eq(2);</td><td>相当于$(&quot;li:eq(2)&quot;) ,index 从 O 开始</td></tr></tbody></table><p><strong>重点记住</strong>： parent() children() find() siblings() eq()</p><h3 id="_1-6-jquery-里面的排他思想" tabindex="-1">1.6 jQuery 里面的排他思想 <a class="header-anchor" href="#_1-6-jquery-里面的排他思想" aria-label="Permalink to &quot;1.6 jQuery 里面的排他思想&quot;">​</a></h3><p>想要多选一的效果，排他思想：当前元素设置样式，其余的兄弟元素清除样式。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">css</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;color&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;red&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">siblings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">css</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;color&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="_1-7-链式编程" tabindex="-1">1.7 链式编程 <a class="header-anchor" href="#_1-7-链式编程" aria-label="Permalink to &quot;1.7 链式编程&quot;">​</a></h3><p>链式编程是为了节省代码量，看起来更优雅。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">css</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;color&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;red&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sibling</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">css</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;color&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;)</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">;</span></span></code></pre></div><p>使用链式编程一定注意是哪个对象执行样式.</p><h2 id="_2-jquery-样式操作" tabindex="-1">2. jQuery 样式操作 <a class="header-anchor" href="#_2-jquery-样式操作" aria-label="Permalink to &quot;2. jQuery 样式操作&quot;">​</a></h2><h3 id="_2-1-操作-css-方法" tabindex="-1">2.1 操作 css 方法 <a class="header-anchor" href="#_2-1-操作-css-方法" aria-label="Permalink to &quot;2.1 操作 css 方法&quot;">​</a></h3><p>jQuery 可以使用 css 方法来修改简单元素样式； 也可以操作类，修改多个样式。</p><ol><li>参数只写属性名，则是返回属性值</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">css</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;color&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ol start="2"><li>参数是<strong>属性名</strong>，<strong>属性值</strong>，<strong>逗号分隔</strong>，是设置一组样式，属性必须加引号，值如果是数字可以不用跟单位和引号</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">css</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;color&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;red&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ol start="3"><li>参数可以是对象形式，方便设置多组样式。属性名和属性值用冒号隔开， 属性可以不用加引号，</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">css</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ color: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;white&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;font-size&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;20px&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre></div><h3 id="_2-2-设置类样式方法" tabindex="-1">2.2 设置类样式方法 <a class="header-anchor" href="#_2-2-设置类样式方法" aria-label="Permalink to &quot;2.2 设置类样式方法&quot;">​</a></h3><p>作用等同于以前的 classList，可以操作类样式， 注意操作类里面的参数不要加点。</p><ol><li>添加类</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;current&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ol start="2"><li>移除类</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;current&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ol start="3"><li>切换类</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toggleClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;current&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="_2-3-类操作与-classname-区别" tabindex="-1">2.3 类操作与 className 区别 <a class="header-anchor" href="#_2-3-类操作与-classname-区别" aria-label="Permalink to &quot;2.3 类操作与 className 区别&quot;">​</a></h3><p>原生 JS 中 className 会覆盖元素原先里面的类名。 jQuery 里面类操作只是对指定类进行操作，不影响原先的类名。</p><h2 id="_3-jquery-效果" tabindex="-1">3. jQuery 效果 <a class="header-anchor" href="#_3-jquery-效果" aria-label="Permalink to &quot;3. jQuery 效果&quot;">​</a></h2><p>jQuery 给我们封装了很多动画效果，最为常见的如下：</p><p><strong>显示隐藏</strong> <strong>滑动</strong> <strong>淡入淡出</strong> <strong>自定义动画</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>show()		slideDown()		  fadeIn()			animate()</span></span>
<span class="line"><span>hide()		slideUp()		  fadeOut()</span></span>
<span class="line"><span>toggle()	slideToggle()	  fadeToggle()</span></span>
<span class="line"><span>  							  fadeTo()</span></span></code></pre></div><h3 id="_3-1-显示隐藏效果" tabindex="-1">3.1 显示隐藏效果 <a class="header-anchor" href="#_3-1-显示隐藏效果" aria-label="Permalink to &quot;3.1 显示隐藏效果&quot;">​</a></h3><h4 id="_1-显示语法规范" tabindex="-1">1.显示语法规范 <a class="header-anchor" href="#_1-显示语法规范" aria-label="Permalink to &quot;1.显示语法规范&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([speed, [easing], [fn]])</span></span></code></pre></div><h4 id="_2-显示参数" tabindex="-1">2.显示参数 <a class="header-anchor" href="#_2-显示参数" aria-label="Permalink to &quot;2.显示参数&quot;">​</a></h4><ul><li>参数都可以省略， 无动画直接显示。</li><li>speed：三种预定速度之一的字符串(&quot;slow&quot;,&quot;normal&quot;, or &quot;fast&quot;)或表示动画时长的毫秒数值(如：1000)。</li><li>easing：(Optional) 用来指定切换效果，默认是&quot;swing&quot;，可用参数&quot;linear&quot;。</li><li>fn: 回调函数，在动画完成时执行的函数，每个元素执行一次。</li></ul><h4 id="_3-隐藏语法规范" tabindex="-1">3.隐藏语法规范 <a class="header-anchor" href="#_3-隐藏语法规范" aria-label="Permalink to &quot;3.隐藏语法规范&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([speed, [easing], [fn]])</span></span></code></pre></div><h4 id="_4-隐藏参数" tabindex="-1">4.隐藏参数 <a class="header-anchor" href="#_4-隐藏参数" aria-label="Permalink to &quot;4.隐藏参数&quot;">​</a></h4><ul><li>参数都可以省略， 无动画直接显示。</li><li>speed：三种预定速度之一的字符串(&quot;slow&quot;,&quot;normal&quot;, or &quot;fast&quot;)或表示动画时长的毫秒数值(如：1000)。</li><li>easing：(Optional) 用来指定切换效果，默认是&quot;swing&quot;，可用参数&quot;linear&quot;。</li><li>fn: 回调函数，在动画完成时执行的函数，每个元素执行一次。</li></ul><ol start="5"><li>切换语法规范</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toggle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([speed, [easing], [fn]])</span></span></code></pre></div><ol start="6"><li>切换参数</li></ol><ul><li>参数都可以省略， 无动画直接显示。</li><li>speed：三种预定速度之一的字符串(&quot;slow&quot;,&quot;normal&quot;, or &quot;fast&quot;)或表示动画时长的毫秒数值(如：1000)。</li><li>easing：(Optional) 用来指定切换效果，默认是&quot;swing&quot;，可用参数&quot;linear&quot;。</li><li>fn: 回调函数，在动画完成时执行的函数，每个元素执行一次。 <strong>建议</strong>：平时一般不带参数，直接显示隐藏即可。</li></ul><h3 id="_3-2-滑动效果" tabindex="-1">3.2 滑动效果 <a class="header-anchor" href="#_3-2-滑动效果" aria-label="Permalink to &quot;3.2 滑动效果&quot;">​</a></h3><h4 id="_1-下滑效果语法规范" tabindex="-1">1.下滑效果语法规范 <a class="header-anchor" href="#_1-下滑效果语法规范" aria-label="Permalink to &quot;1.下滑效果语法规范&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slideDown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([speed, [easing], [fn]])</span></span></code></pre></div><h4 id="_2-下滑效果参数" tabindex="-1">2.下滑效果参数 <a class="header-anchor" href="#_2-下滑效果参数" aria-label="Permalink to &quot;2.下滑效果参数&quot;">​</a></h4><ul><li>参数都可以省略。</li><li>speed:三种预定速度之一的字符串(&quot;slow&quot;,&quot;normal&quot;, or &quot;fast&quot;)或表示动画时长的毫秒数值(如：1000)。</li><li>easing:(Optional) 用来指定切换效果，默认是&quot;swing&quot;，可用参数&quot;linear&quot;。</li><li>fn: 回调函数，在动画完成时执行的函数，每个元素执行一次。</li></ul><h4 id="_3-上滑效果语法规范" tabindex="-1">3.上滑效果语法规范 <a class="header-anchor" href="#_3-上滑效果语法规范" aria-label="Permalink to &quot;3.上滑效果语法规范&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slideUp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([speed, [easing], [fn]])</span></span></code></pre></div><h4 id="_4-上滑效果参数" tabindex="-1">4.上滑效果参数 <a class="header-anchor" href="#_4-上滑效果参数" aria-label="Permalink to &quot;4.上滑效果参数&quot;">​</a></h4><ul><li>参数都可以省略。</li><li>speed：三种预定速度之一的字符串(&quot;slow&quot;,&quot;normal&quot;, or &quot;fast&quot;)或表示动画时长的毫秒数值(如：1000)。</li><li>easing：(Optional) 用来指定切换效果，默认是&quot;swing&quot;，可用参数&quot;linear&quot;。</li><li>fn: 回调函数，在动画完成时执行的函数，每个元素执行一次。</li></ul><h4 id="_5-滑动切换效果语法规范" tabindex="-1">5.滑动切换效果语法规范 <a class="header-anchor" href="#_5-滑动切换效果语法规范" aria-label="Permalink to &quot;5.滑动切换效果语法规范&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slideToggle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([speed, [easing], [fn]])</span></span></code></pre></div><h4 id="_6-滑动切换效果参数" tabindex="-1">6.滑动切换效果参数 <a class="header-anchor" href="#_6-滑动切换效果参数" aria-label="Permalink to &quot;6.滑动切换效果参数&quot;">​</a></h4><ul><li>参数都可以省略。</li><li>speed：三种预定速度之一的字符串(&quot;slow&quot;,&quot;normal&quot;, or &quot;fast&quot;)或表示动画时长的毫秒数值(如：1000)。</li><li>easing：(Optional) 用来指定切换效果，默认是&quot;swing&quot;，可用参数&quot;linear&quot;。</li><li>fn: 回调函数，在动画完成时执行的函数，每个元素执行一次。</li></ul><h3 id="_3-3-事件切换" tabindex="-1">3.3 事件切换 <a class="header-anchor" href="#_3-3-事件切换" aria-label="Permalink to &quot;3.3 事件切换&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hover</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([over,]out)</span></span></code></pre></div><ul><li>over:鼠标移到元素上要触发的函数（相当于 mouseenter）</li><li>out:鼠标移出元素要触发的函数（相当于 mouseleave）</li><li>如果只写一个函数，则鼠标经过和离开都会触发它</li></ul><h3 id="_3-4-动画队列及其停止排队方法" tabindex="-1">3.4 动画队列及其停止排队方法 <a class="header-anchor" href="#_3-4-动画队列及其停止排队方法" aria-label="Permalink to &quot;3.4 动画队列及其停止排队方法&quot;">​</a></h3><h4 id="_1-动画或效果队列" tabindex="-1">1.动画或效果队列 <a class="header-anchor" href="#_1-动画或效果队列" aria-label="Permalink to &quot;1.动画或效果队列&quot;">​</a></h4><p>动画或者效果一旦触发就会执行，如果多次触发，就造成多个动画或者效果排队执行。</p><h4 id="_2-停止排队" tabindex="-1">2.停止排队 <a class="header-anchor" href="#_2-停止排队" aria-label="Permalink to &quot;2.停止排队&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><ul><li>stop() 方法用于停止动画或效果。</li><li>注意： stop() 写到动画或者效果的前面， 相当于停止结束上一次的动画。</li></ul><h3 id="_3-5-淡入淡出效果" tabindex="-1">3.5 淡入淡出效果 <a class="header-anchor" href="#_3-5-淡入淡出效果" aria-label="Permalink to &quot;3.5 淡入淡出效果&quot;">​</a></h3><h4 id="_1-淡入效果语法规范" tabindex="-1">1.淡入效果语法规范 <a class="header-anchor" href="#_1-淡入效果语法规范" aria-label="Permalink to &quot;1.淡入效果语法规范&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fadeIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([speed, [easing], [fn]])</span></span></code></pre></div><p><strong>淡入效果参数</strong></p><ul><li>参数都可以省略。</li><li>speed：三种预定速度之一的字符串(&quot;slow&quot;,&quot;normal&quot;, or &quot;fast&quot;)或表示动画时长的毫秒数值(如：1000)。</li><li>easing：(Optional) 用来指定切换效果，默认是&quot;swing&quot;，可用参数&quot;linear&quot;。</li><li>fn: 回调函数，在动画完成时执行的函数，每个元素执行一次。</li></ul><h4 id="_2-淡出效果语法规范" tabindex="-1">2.淡出效果语法规范 <a class="header-anchor" href="#_2-淡出效果语法规范" aria-label="Permalink to &quot;2.淡出效果语法规范&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fadeOut</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([speed, [easing], [fn]])</span></span></code></pre></div><p><strong>淡出效果参数</strong></p><ul><li>参数都可以省略。</li><li>speed：三种预定速度之一的字符串(&quot;slow&quot;,&quot;normal&quot;, or &quot;fast&quot;)或表示动画时长的毫秒数值(如：1000)。</li><li>easing：(Optional) 用来指定切换效果，默认是&quot;swing&quot;，可用参数&quot;linear&quot;。</li><li>fn: 回调函数，在动画完成时执行的函数，每个元素执行一次。</li></ul><h4 id="_3-淡入淡出切换效果语法规范" tabindex="-1">3.淡入淡出切换效果语法规范 <a class="header-anchor" href="#_3-淡入淡出切换效果语法规范" aria-label="Permalink to &quot;3.淡入淡出切换效果语法规范&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fadeToggle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([speed, [easing], [fn]])</span></span></code></pre></div><p><strong>淡入淡出切换效果参数</strong></p><ul><li>参数都可以省略。</li><li>speed：三种预定速度之一的字符串(&quot;slow&quot;,&quot;normal&quot;, or &quot;fast&quot;)或表示动画时长的毫秒数值(如：1000)。</li><li>easing：(Optional) 用来指定切换效果，默认是&quot;swing&quot;，可用参数&quot;linear&quot;。</li><li>fn: 回调函数，在动画完成时执行的函数，每个元素执行一次。</li></ul><h4 id="_4-渐进方式调整到指定的不透明度" tabindex="-1">4. 渐进方式调整到指定的不透明度 <a class="header-anchor" href="#_4-渐进方式调整到指定的不透明度" aria-label="Permalink to &quot;4. 渐进方式调整到指定的不透明度&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fadeTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([[speed], opacity, [easing], [fn]])</span></span></code></pre></div><p><strong>效果参数</strong></p><ul><li>opacity 透明度必须写，取值 0~1 之间。</li><li>speed：三种预定速度之一的字符串(&quot;slow&quot;,&quot;normal&quot;, or &quot;fast&quot;)或表示动画时长的毫秒数值(如：1000)。必须写</li><li>easing：(Optional) 用来指定切换效果，默认是&quot;swing&quot;，可用参数&quot;linear&quot;。</li><li>fn: 回调函数，在动画完成时执行的函数，每个元素执行一次。</li></ul><h3 id="_3-6-自定义动画-animate" tabindex="-1">3.6 自定义动画 animate <a class="header-anchor" href="#_3-6-自定义动画-animate" aria-label="Permalink to &quot;3.6 自定义动画 animate&quot;">​</a></h3><ol><li>语法</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">animate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(params, [speed], [easing], [fn])</span></span></code></pre></div><ol start="2"><li>参数</li></ol><ul><li>params: 想要更改的样式属性，以对象形式传递，必须写。 属性名可以不用带引号， 如果是复合属性则需要采取驼峰命名法 borderLeft。其余参数都可以省略。</li><li>speed：三种预定速度之一的字符串(&quot;slow&quot;,&quot;normal&quot;, or &quot;fast&quot;)或表示动画时长的毫秒数值(如：1000)。</li><li>easing：(Optional) 用来指定切换效果，默认是&quot;swing&quot;，可用参数&quot;linear&quot;。</li><li>fn: 回调函数，在动画完成时执行的函数，每个元素执行一次。</li></ul><h2 id="_4-jquery-属性操作" tabindex="-1">4. jQuery 属性操作 <a class="header-anchor" href="#_4-jquery-属性操作" aria-label="Permalink to &quot;4. jQuery 属性操作&quot;">​</a></h2><h3 id="_4-1-设置或获取元素固有属性值-prop" tabindex="-1">4.1 设置或获取元素固有属性值 prop() <a class="header-anchor" href="#_4-1-设置或获取元素固有属性值-prop" aria-label="Permalink to &quot;4.1 设置或获取元素固有属性值 prop()&quot;">​</a></h3><p>所谓元素固有属性就是元素本身自带的属性，比如 <code>&lt;a&gt;</code> 元素里面的 href ，比如 <code>&lt;input&gt;</code> 元素里面的 type。</p><ol><li>获取属性语法</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">prop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;属性&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ol start="2"><li>设置属性语法</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">prop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;属性&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;属性值&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="_4-2-设置或获取元素自定义属性值-attr" tabindex="-1">4.2 设置或获取元素自定义属性值 attr() <a class="header-anchor" href="#_4-2-设置或获取元素自定义属性值-attr" aria-label="Permalink to &quot;4.2 设置或获取元素自定义属性值 attr()&quot;">​</a></h3><p>用户自己给元素添加的属性，我们称为自定义属性。 比如给 div 添加 index =&quot;1&quot;。</p><ol><li>获取属性语法</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;属性&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 类似原生 getAttribute()</span></span></code></pre></div><ol start="2"><li>设置属性语法</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;属性&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;属性值&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 类似原生 setAttribute()</span></span></code></pre></div><p>改方法也可以获取 H5 自定义属性</p><h3 id="_4-3-数据缓存-data" tabindex="-1">4.3 数据缓存 data() <a class="header-anchor" href="#_4-3-数据缓存-data" aria-label="Permalink to &quot;4.3 数据缓存 data()&quot;">​</a></h3><p>data() 方法可以在指定的元素上存取数据，并不会修改 DOM 元素结构。一旦页面刷新，之前存放的数据都将被移除。</p><ol><li>附加数据语法</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;value&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 向被选元素附加数据</span></span></code></pre></div><ol start="2"><li>获取数据语法</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>date(&quot;name&quot;)             //   向被选元素获取数据</span></span></code></pre></div><p>同时，还可以读取 HTML5 自定义属性 data-index ，得到的是数字型</p><h2 id="_5-jquery-内容文本值" tabindex="-1">5. jQuery 内容文本值 <a class="header-anchor" href="#_5-jquery-内容文本值" aria-label="Permalink to &quot;5. jQuery 内容文本值&quot;">​</a></h2><p>主要针对元素的<strong>内容</strong>还有<strong>表单的值</strong>操作。</p><ol><li>普通元素内容 html()（ 相当于原生 inner HTML)</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取元素的内容</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;内容&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置元素的内容</span></span></code></pre></div><ol start="2"><li>普通元素文本内容 text() (相当与原生 innerText)</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取元素的文本内容</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;文本内容&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置元素的文本内容</span></span></code></pre></div><ol start="3"><li>表单的值 val()（ 相当于原生 value)</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取表单的值</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;内容&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置表单的值</span></span></code></pre></div><h2 id="_6-jquery-元素操作" tabindex="-1">6. jQuery 元素操作 <a class="header-anchor" href="#_6-jquery-元素操作" aria-label="Permalink to &quot;6. jQuery 元素操作&quot;">​</a></h2><p>主要是遍历、创建、添加、删除元素操作。</p><h3 id="_6-1-遍历元素" tabindex="-1">6.1 遍历元素 <a class="header-anchor" href="#_6-1-遍历元素" aria-label="Permalink to &quot;6.1 遍历元素&quot;">​</a></h3><p>jQuery 隐式迭代是对同一类元素做了同样的操作。 如果想要给同一类元素做不同操作，就需要用到遍历。</p><p><strong>语法 1：</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">each</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">domEle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  xxx</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><ol><li>each() 方法遍历匹配的每一个元素。主要用 DOM 处理。 each 每一个</li><li>里面的回调函数有 2 个参数： index 是每个元素的索引号; demEle 是每个<strong>DOM 元素对象，不是 jquery 对象</strong></li><li><strong>所以要想使用 jquery 方法，需要给这个 dom 元素转换为 jquery 对象 $(domEle)</strong></li></ol><p><strong>语法 2：</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">each</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(object，</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { xxx; })</span></span></code></pre></div><ol><li><p>$.each()方法可用于遍历任何对象。主要用于数据处理，比如数组，对象</p></li><li><p>里面的函数有 2 个参数： index 是每个元素的索引号; element 遍历内容</p></li></ol><h3 id="_6-2-创建元素" tabindex="-1">6.2 创建元素 <a class="header-anchor" href="#_6-2-创建元素" aria-label="Permalink to &quot;6.2 创建元素&quot;">​</a></h3><p><strong>语法：</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">li</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">li</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>动态的创建了一个<code>&lt;li&gt; </code></p><h3 id="_6-3-添加元素" tabindex="-1">6.3 添加元素 <a class="header-anchor" href="#_6-3-添加元素" aria-label="Permalink to &quot;6.3 添加元素&quot;">​</a></h3><ol><li>内部添加</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">内容</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>把内容放入匹配元素内部最<strong>后面</strong>，类似原生 appendChild。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">prepend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">内容</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>把内容放入匹配元素内部最<strong>前面</strong>。</p><ol start="2"><li>外部添加</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>element.after(&#39;&#39;内容&#39;&#39;)        //  把内容放入目标元素后面</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>element.before(&#39;&#39;内容&#39;&#39;)    //  把内容放入目标元素前面</span></span></code></pre></div><ul><li>内部添加元素，生成之后，它们是父子关系。</li><li>外部添加元素，生成之后，他们是兄弟关系。</li></ul><h3 id="_6-4-删除元素" tabindex="-1">6.4 删除元素 <a class="header-anchor" href="#_6-4-删除元素" aria-label="Permalink to &quot;6.4 删除元素&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>element.remove()   //  删除匹配的元素（本身）</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>element.empty()    //  删除匹配的元素集合中所有的子节点</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>element.html(&#39;&#39;&#39;&#39;)   //  清空匹配的元素内容</span></span></code></pre></div><ul><li>remove 删除元素本身。</li><li>empt() 和 html(&#39;&#39;&#39;&#39;) 作用等价，都可以删除元素里面的内容，只不过 html 还可以设置内容。</li></ul><h2 id="_7-jquery-尺寸、位置操作" tabindex="-1">7. jQuery 尺寸、位置操作 <a class="header-anchor" href="#_7-jquery-尺寸、位置操作" aria-label="Permalink to &quot;7. jQuery 尺寸、位置操作&quot;">​</a></h2><h3 id="_7-1-jquery-尺寸" tabindex="-1">7.1 jQuery 尺寸 <a class="header-anchor" href="#_7-1-jquery-尺寸" aria-label="Permalink to &quot;7.1 jQuery 尺寸&quot;">​</a></h3><table tabindex="0"><thead><tr><th>语法</th><th>用法</th></tr></thead><tbody><tr><td>width() / height()</td><td>取得匹配元素宽度和高度值只算 width / height</td></tr><tr><td>innerWidth() /l innerHieght()</td><td>取得匹配元素宽度和高度值包含 padding</td></tr><tr><td>outerWidth() / outerHeight()</td><td>取得匹配元素宽度和高度值包含 padding . border</td></tr><tr><td>outerWidth(true) / outerHeight(true)</td><td>取得匹配元素宽度和高度值包含 padding . borde、margin</td></tr></tbody></table><ul><li>以上参数为空，则是获取相应值，返回的是数字型。</li><li>如果参数为数字，则是修改相应值。</li><li>参数可以不必写单位。</li></ul><h3 id="_7-2-jquery-位置" tabindex="-1">7.2 jQuery 位置 <a class="header-anchor" href="#_7-2-jquery-位置" aria-label="Permalink to &quot;7.2 jQuery 位置&quot;">​</a></h3><p>位置主要有三个： offset()、position()、scrollTop()/scrollLeft()</p><ol><li><p>offset() 设置或获取元素偏移</p><ul><li>offset() 方法设置或返回被选元素相对于<strong>文档</strong>的偏移坐标，跟父级没有关系。</li><li>该方法有 2 个属性 left、top 。offset().top 用于获取距离文档顶部的距离，offset().left 用于获取距离文档左侧的距离。</li><li>可以设置元素的偏移：offset({ top: 10, left: 30 });</li></ul></li><li><p>position() 获取元素偏移</p><ul><li>position() 方法用于返回被选元素相对于带有定位的父级偏移坐标，如果父级都没有定位，则以文档为准。</li><li>该方法有 2 个属性 left、top。position().top 用于获取距离定位父级顶部的距离，position().left 用于获取距离定位父级左侧的距离。</li><li>该方法只能获取。</li></ul></li><li><p>scrollTop()/scrollLeft() 设置或获取元素被卷去的头部和左侧</p><ul><li>scrollTop() 方法设置或返回被选元素被卷去的头部。</li><li>不跟参数是获取，参数为不带单位的数字则是设置被卷去的头部。</li></ul></li></ol>`,174),n=[l];function h(p,d,o,r,k,u){return a(),i("div",null,n)}const E=s(e,[["render",h]]);export{c as __pageData,E as default};
