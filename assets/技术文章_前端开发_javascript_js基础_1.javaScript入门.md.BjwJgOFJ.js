import{_ as s,q as i,p as a,aE as t}from"./chunks/framework.-H45_L2h.js";const n="/assets/Snipaste_2021-02-10_13-40-00.DbdCKPMc.png",c=JSON.parse('{"title":"1.javaScript入门","description":"","frontmatter":{"title":"1.javaScript入门","date":"2023-06-02T10:50:11.000Z","categories":["前端开发"],"tags":["javascript","js基础"],"prev":false,"next":"2.Web APl简介"},"headers":[],"relativePath":"技术文章/前端开发/javascript/js基础/1.javaScript入门.md","filePath":"技术文章/前端开发/javascript/js基础/1.javaScript入门.md","lastUpdated":1723096133000}'),h={name:"技术文章/前端开发/javascript/js基础/1.javaScript入门.md"},l=t(`<h1 id="_1-javascript-入门" tabindex="-1">1.javaScript 入门 <a class="header-anchor" href="#_1-javascript-入门" aria-label="Permalink to &quot;1.javaScript 入门&quot;">​</a></h1><h2 id="_1-javascript-基础" tabindex="-1">1.JavaScript 基础 <a class="header-anchor" href="#_1-javascript-基础" aria-label="Permalink to &quot;1.JavaScript 基础&quot;">​</a></h2><h3 id="_1-组成" tabindex="-1">1.组成 <a class="header-anchor" href="#_1-组成" aria-label="Permalink to &quot;1.组成&quot;">​</a></h3><ul><li>ECMAScript:javascript 语法</li><li>DOM:页面文件对象模型</li><li>BOM:浏览器对象模型</li></ul><h4 id="_1-ecmascript" tabindex="-1">1.ECMAScript <a class="header-anchor" href="#_1-ecmascript" aria-label="Permalink to &quot;1.ECMAScript&quot;">​</a></h4><p>ECMAScript 是由 ECMA 国际（原欧洲计算机制造商协会）进行标准化的一门编程语言，这种语言在万维网上应用广泛，它往往被称为 JavaScript 或 JScript，但实际上后两者是 ECMAScript 语言的实现和扩展。</p><p>ECMAScript : ECMAScript 规定了 JS 的编程语法和基础核心知识，是所有浏览器厂商共同遵守的一套 JS 语法工业标准。</p><h4 id="_2-dom——文档对象模型" tabindex="-1">2.DOM——文档对象模型 <a class="header-anchor" href="#_2-dom——文档对象模型" aria-label="Permalink to &quot;2.DOM——文档对象模型&quot;">​</a></h4><p>文档对象模型(Document Object Model，简称 DOM）)，是 W3C 组织推荐的处理可扩展标记语言的标准编程接口。通过 DOM 提供的接口可以对页面上的各种元素进行操作(大小、位置、颜色等)。</p><h4 id="_3-bom——浏览器对象模型" tabindex="-1">3.BOM——浏览器对象模型 <a class="header-anchor" href="#_3-bom——浏览器对象模型" aria-label="Permalink to &quot;3.BOM——浏览器对象模型&quot;">​</a></h4><p>BOM(Browser ObjectModel，简称 BOM)是指浏览器对象模型，它提供了独立于内容的、可以与<strong>浏览器窗口进行互动的对象结构</strong>。通过 BOM 可以操作浏览器窗口，比如弹出框、控制浏览器跳转、获取分辨率等。</p><h3 id="_2-变量" tabindex="-1">2.变量 <a class="header-anchor" href="#_2-变量" aria-label="Permalink to &quot;2.变量&quot;">​</a></h3><ul><li>为什么需要变量?因为我们一些数据需要保存，所以需要变量</li><li>变量是什么?变量就是一个容器，用来存放数据的。方便我们以后使用里面的数据；</li><li>变量的本质是什么?变量是内存里的一块空间，用来存数据。</li><li>变量怎么使用的?我们使用变量的时候，一定要声明变量，然后赋值；声明变量本质是去内存申请空间；</li><li>什么是变量的初始化?声明变量并赋值我们称之为变量的初始化</li><li>变量命名规范有哪些？变量名尽量要规范，见名知意——驼峰命名法；区分哪些变量名不合法</li><li>交换 2 个变量值的思路?学会交换 2 个变量</li></ul><h3 id="_3-数据类型" tabindex="-1">3.数据类型 <a class="header-anchor" href="#_3-数据类型" aria-label="Permalink to &quot;3.数据类型&quot;">​</a></h3><p>JavaScript 是一种弱类型或者说动态语言。</p><p>JS 把数据类型分为两类 ∶</p><ul><li>简单数据类型( Number , string ,Boolean, Undefined,Null )</li><li>复杂数据类型( object)</li></ul><table tabindex="0"><thead><tr><th>简单数据类型</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>Number</td><td>数字型，包含整型值和浮点型值，如 21、0.21</td><td>0</td></tr><tr><td>Boolean</td><td>布尔值类型，如 true , false，等价于 1 和 0</td><td>false</td></tr><tr><td>String</td><td>字符串类型，如&quot;张三”注意咱们 js 里面，字符串都带引号</td><td>&quot;&quot;</td></tr><tr><td>Undefined</td><td>var a;声明了变量 a 但是没有给值，此时 a = undefined</td><td>undefined</td></tr><tr><td>Null</td><td>var a = null;声明了变量 a 为空值</td><td>null</td></tr></tbody></table><p>isNan(x)==&gt;不是数字返回 true,是数字返货 false;</p><p><strong>遍历字符串</strong></p><blockquote><p>1</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>//遍历字符串</span></span>
<span class="line"><span>exec 一般用于独立的动作一次性执行,返回 query(find()方法查询返回的是 data)</span></span>
<span class="line"><span>&#39;Sname&#39;: new RegExp(.)//将关键词匹配</span></span>
<span class="line"><span>newData = results.filter((item) =&gt;item.commodityIntroduction.match(RegExp(/i7/)));</span></span></code></pre></div><h3 id="_4-数据类型转换" tabindex="-1">4.数据类型转换 <a class="header-anchor" href="#_4-数据类型转换" aria-label="Permalink to &quot;4.数据类型转换&quot;">​</a></h3><h4 id="_1-转字符串类型" tabindex="-1">1.转字符串类型 <a class="header-anchor" href="#_1-转字符串类型" aria-label="Permalink to &quot;1.转字符串类型&quot;">​</a></h4><ul><li>num.toString()</li><li>String(num) //强制转换</li><li>num+&#39;&#39;</li></ul><h4 id="_2-转数字类型" tabindex="-1">2.转数字类型 <a class="header-anchor" href="#_2-转数字类型" aria-label="Permalink to &quot;2.转数字类型&quot;">​</a></h4><ul><li>parseInt(str)//取整</li><li>parseFloat(str)//保留小数</li><li>Number(str)//强制转换(str 必须是数字型字符串否则返回 NaN)</li><li>&#39;str&#39;-0=str//减乘除(str 必须是数字型字符串)</li></ul><p>数字类型字符串转数字：&quot;6&quot;+0==&gt;6</p><h4 id="_3-转换为布尔值" tabindex="-1">3.转换为布尔值 <a class="header-anchor" href="#_3-转换为布尔值" aria-label="Permalink to &quot;3.转换为布尔值&quot;">​</a></h4><ul><li>代表空、否定的值会被转换为 false ,如&quot;、0、NaN、null、undefined</li><li>其余值都会被转换为 true</li></ul><h3 id="_5-标识符、关键字、保留字" tabindex="-1">5.标识符、关键字、保留字 <a class="header-anchor" href="#_5-标识符、关键字、保留字" aria-label="Permalink to &quot;5.标识符、关键字、保留字&quot;">​</a></h3><h4 id="_1-标识符" tabindex="-1">1.标识符 <a class="header-anchor" href="#_1-标识符" aria-label="Permalink to &quot;1.标识符&quot;">​</a></h4><p>标识(zhi)符 ∶ 就是指开发人员为变量、属性、函数、参数取的名字。标识符不能是关键字或保留字。</p><h4 id="_2-关键字" tabindex="-1">2.关键字 <a class="header-anchor" href="#_2-关键字" aria-label="Permalink to &quot;2.关键字&quot;">​</a></h4><p>关键字 ∶ 是指 JS 本身已经使用了的字，不能再用它们充当变量名、方法名。 包括: break、case、catch、continue、default、delete、do、else、finally、for、function、if、in.instanceof、new、return、switch、this、throw、try、typeof、var、void、while、with 等。</p><h4 id="_3-保留字" tabindex="-1">3.保留字 <a class="header-anchor" href="#_3-保留字" aria-label="Permalink to &quot;3.保留字&quot;">​</a></h4><p>保留字︰实际上就是预留的“关键字”，意思是现在虽然还不是关键字，但是未来可能会成为关键字，同样不能使用它们当变量名或方法名。</p><p>包括: boolean、byte、char、class、const、debugger、double、enum、export、extends、fimal、float、goto、implements、import、int、interface、long、mative、package、private、protected、public、short、static、super、synchronized、throws、transient、volatile 等。</p><h3 id="_6-运算符" tabindex="-1">6.运算符 <a class="header-anchor" href="#_6-运算符" aria-label="Permalink to &quot;6.运算符&quot;">​</a></h3><p>运算符( operator )也被称为操作符，是用于实现赋值、比较和执行算数运算等功能的符号。</p><p>JavaScript 中常用的运算符有 ∶</p><ul><li>算数运算符</li><li>递增和递减运算符</li><li>比较运算符哈</li><li>逻辑运算符</li><li>赋值运算符</li></ul><h4 id="_1-算术运算符" tabindex="-1">1.算术运算符 <a class="header-anchor" href="#_1-算术运算符" aria-label="Permalink to &quot;1.算术运算符&quot;">​</a></h4><p>y=5，下面的表格解释了这些算术运算符：</p><table tabindex="0"><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th><th style="text-align:left;">例子</th><th style="text-align:left;">x 运算结果</th><th style="text-align:left;">y 运算结果</th></tr></thead><tbody><tr><td style="text-align:left;">+</td><td style="text-align:left;">加法</td><td style="text-align:left;">x=y+2</td><td style="text-align:left;">7</td><td style="text-align:left;">5</td></tr><tr><td style="text-align:left;">-</td><td style="text-align:left;">减法</td><td style="text-align:left;">x=y-2</td><td style="text-align:left;">3</td><td style="text-align:left;">5</td></tr><tr><td style="text-align:left;">*</td><td style="text-align:left;">乘法</td><td style="text-align:left;">x=y*2</td><td style="text-align:left;">10</td><td style="text-align:left;">5</td></tr><tr><td style="text-align:left;">/</td><td style="text-align:left;">除法</td><td style="text-align:left;">x=y/2</td><td style="text-align:left;">2.5</td><td style="text-align:left;">5</td></tr><tr><td style="text-align:left;">%</td><td style="text-align:left;">取模（余数）</td><td style="text-align:left;">x=y%2</td><td style="text-align:left;">1</td><td style="text-align:left;">5</td></tr><tr><td style="text-align:left;">++</td><td style="text-align:left;">自增</td><td style="text-align:left;">x=++y</td><td style="text-align:left;">6</td><td style="text-align:left;">6</td></tr><tr><td style="text-align:left;">++</td><td style="text-align:left;">后自增</td><td style="text-align:left;">x=y++</td><td style="text-align:left;">5</td><td style="text-align:left;">6</td></tr><tr><td style="text-align:left;">--</td><td style="text-align:left;">自减</td><td style="text-align:left;">x=--y</td><td style="text-align:left;">4</td><td style="text-align:left;">4</td></tr><tr><td style="text-align:left;">--</td><td style="text-align:left;">后自减</td><td style="text-align:left;">x=y--</td><td style="text-align:left;">5</td><td style="text-align:left;">4</td></tr></tbody></table><h4 id="_2-比较运算符" tabindex="-1">2.比较运算符 <a class="header-anchor" href="#_2-比较运算符" aria-label="Permalink to &quot;2.比较运算符&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">==</td><td style="text-align:left;">等于</td></tr><tr><td style="text-align:left;">===</td><td style="text-align:left;">全等于（值和数据类型均相等）</td></tr><tr><td style="text-align:left;">!=</td><td style="text-align:left;">不等于</td></tr><tr><td style="text-align:left;">!==</td><td style="text-align:left;">不绝对等于（值和类型有一个不相等，或两个都不相等）</td></tr><tr><td style="text-align:left;">&gt;</td><td style="text-align:left;">大于</td></tr><tr><td style="text-align:left;">&lt;</td><td style="text-align:left;">小于</td></tr><tr><td style="text-align:left;">&gt;=</td><td style="text-align:left;">大于或等于</td></tr><tr><td style="text-align:left;">&lt;=</td><td style="text-align:left;">小于或等于</td></tr></tbody></table><h4 id="_3-逻辑运算符" tabindex="-1">3.逻辑运算符 <a class="header-anchor" href="#_3-逻辑运算符" aria-label="Permalink to &quot;3.逻辑运算符&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th><th style="text-align:left;">例子</th></tr></thead><tbody><tr><td style="text-align:left;">&amp;&amp;</td><td style="text-align:left;">and（且）</td><td style="text-align:left;">(x &lt; 10 &amp;&amp; y &gt; 1) 为 true</td></tr><tr><td style="text-align:left;">||</td><td style="text-align:left;">or（或）</td><td style="text-align:left;">(x==5 || y==5) 为 false</td></tr><tr><td style="text-align:left;">!</td><td style="text-align:left;">not（非）</td><td style="text-align:left;">!(x==y) 为 true</td></tr></tbody></table><p><strong>短路运算（逻辑中断)</strong></p><p>短路运算的原理 ∶ 当有多个表达式(值)时,左边的表达式值可以确定结果时,就不再继续运算右边的表达式的值; 1.逻辑与</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">语法</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 表达式1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 表达式2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 表达式3</span></span></code></pre></div><ul><li><p><strong>小结</strong>：返回 值为假的表达式，没有则返回最后一个</p><p>2.逻辑或</p></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>语法:表达式1||表达式2||表达式3</span></span></code></pre></div><p><strong>小结</strong>：返回 值为真的表达式，没有则返回最后一个</p><h4 id="_4-赋值运算符" tabindex="-1">4.赋值运算符 <a class="header-anchor" href="#_4-赋值运算符" aria-label="Permalink to &quot;4.赋值运算符&quot;">​</a></h4><p>给定 <strong>x=10</strong> 和 <strong>y=5</strong>，下面的表格解释了赋值运算符：</p><table tabindex="0"><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">例子</th><th style="text-align:left;">等同于</th><th style="text-align:left;">运算结果</th></tr></thead><tbody><tr><td style="text-align:left;">=</td><td style="text-align:left;">x=y</td><td style="text-align:left;">x=y</td><td style="text-align:left;">x=5</td></tr><tr><td style="text-align:left;">+=</td><td style="text-align:left;">x+=y</td><td style="text-align:left;">x=x+y</td><td style="text-align:left;">x=15</td></tr><tr><td style="text-align:left;">-=</td><td style="text-align:left;">x-=y</td><td style="text-align:left;">x=x-y</td><td style="text-align:left;">x=5</td></tr><tr><td style="text-align:left;">*=</td><td style="text-align:left;">x*=y</td><td style="text-align:left;">x=x*y</td><td style="text-align:left;">x=50</td></tr><tr><td style="text-align:left;">/=</td><td style="text-align:left;">x/=y</td><td style="text-align:left;">x=x/y</td><td style="text-align:left;">x=2</td></tr><tr><td style="text-align:left;">%=</td><td style="text-align:left;">x%=y</td><td style="text-align:left;">x=x%y</td><td style="text-align:left;">x=0</td></tr></tbody></table><h4 id="_5-运算符优先级" tabindex="-1">5.运算符优先级 <a class="header-anchor" href="#_5-运算符优先级" aria-label="Permalink to &quot;5.运算符优先级&quot;">​</a></h4><table tabindex="0"><thead><tr><th>优先级</th><th>运算符</th><th>顺序</th></tr></thead><tbody><tr><td>1</td><td>小括号</td><td>()</td></tr><tr><td>2</td><td>—元运算符</td><td>++ -- !</td></tr><tr><td>3</td><td>算数运算符</td><td>先*/%后+-</td></tr><tr><td>4</td><td>关系运算符</td><td><code>&gt;</code> &gt;= &lt; &lt;=</td></tr><tr><td>5</td><td>相等运算符</td><td>== != === !==</td></tr><tr><td>6</td><td>逻辑运算符</td><td>先&amp;&amp;后||</td></tr><tr><td>7</td><td>赋值运算符</td><td>=</td></tr><tr><td>8</td><td>逗号运算符</td><td>,</td></tr></tbody></table><ul><li>一元运算符里面的逻辑非优先级很高</li><li>逻辑与比逻辑或优先级高</li></ul><h2 id="_2-javascript-流程控制" tabindex="-1">2.JavaScript 流程控制 <a class="header-anchor" href="#_2-javascript-流程控制" aria-label="Permalink to &quot;2.JavaScript 流程控制&quot;">​</a></h2><h3 id="_1-流程控制" tabindex="-1">1.流程控制 <a class="header-anchor" href="#_1-流程控制" aria-label="Permalink to &quot;1.流程控制&quot;">​</a></h3><p>在一个程序执行的过程中，各条代码的执行顺序对程序的结果是有直接影响的。很多时候我们要通过控制代码的执行顺序来实现我们要完成的功能。 简单理解︰流程控制就是来控制我们的代码按照什么结构顺序来执行 流程控制主要有三种结构，分别是<strong>顺序结构</strong>、<strong>分支结构</strong>和<strong>循环结构</strong>，这三种结构代表三种代码执行的顺序。</p><h3 id="_2-顺序流程控制" tabindex="-1">2.顺序流程控制 <a class="header-anchor" href="#_2-顺序流程控制" aria-label="Permalink to &quot;2.顺序流程控制&quot;">​</a></h3><p>顺序结构是程序中最简单、最基本的流程控制，它没有特定的语法结构，程序会按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的。</p><h3 id="_3-分支流程控制-if-语句" tabindex="-1">3.分支流程控制 if 语句 <a class="header-anchor" href="#_3-分支流程控制-if-语句" aria-label="Permalink to &quot;3.分支流程控制 if 语句&quot;">​</a></h3><h4 id="_3-1-分支结构" tabindex="-1">3.1 分支结构 <a class="header-anchor" href="#_3-1-分支结构" aria-label="Permalink to &quot;3.1 分支结构&quot;">​</a></h4><p>由上到下执行代码的过程中，根据不同的条件，执行不同的路径代码（执行代码多选一的过程），从而得到不同的结果</p><h4 id="_3-2-if-语句" tabindex="-1">3.2 if 语句 <a class="header-anchor" href="#_3-2-if-语句" aria-label="Permalink to &quot;3.2 if 语句&quot;">​</a></h4><p>1.语法结构</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//条件成立执行代码，否则什么也不做</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (条件表达式) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //条件成立执行的代码语句</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>语句可以理解为一个行为，循环语句和分支语句就是典型的语句。一个程序由很多个语句组成，一般情况下，会分割成一个一个的语句。</p><h4 id="_3-3-if-else-语句-双分支语句" tabindex="-1">3.3 if else 语句(双分支语句) <a class="header-anchor" href="#_3-3-if-else-语句-双分支语句" aria-label="Permalink to &quot;3.3 if else 语句(双分支语句)&quot;">​</a></h4><p>1.语法结构</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//条件成立执行if里面代码，否则执行else里面的代码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (条件表达式) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //[如果]条件成立执行的代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //[否则]执行的代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="_3-4if-else-if-语句-多分支语句" tabindex="-1">3.4if else if 语句(多分支语句) <a class="header-anchor" href="#_3-4if-else-if-语句-多分支语句" aria-label="Permalink to &quot;3.4if else if 语句(多分支语句)&quot;">​</a></h4><p>1.语法结构</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//适合于检查多重条件。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(条件表达式1）{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	语句1;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} else </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(条件表达式2){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	语句2;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}else </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(条件表达式3){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	语句3;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} else {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//上述条件都不成立执行此处代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="_3-5-三元表达式" tabindex="-1">3.5 三元表达式 <a class="header-anchor" href="#_3-5-三元表达式" aria-label="Permalink to &quot;3.5 三元表达式&quot;">​</a></h4><p>三元表达式也能做一些简单的条件选择。有三元运算符组成的式子称为三元表达式</p><p>语法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">判断表达式 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 表达式1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 表达式2 </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//判断表达式为true返回表达式1;false返回表达式2</span></span></code></pre></div><h4 id="_3-6-分支流程控制-switch-语句" tabindex="-1">3.6 分支流程控制 switch 语句 <a class="header-anchor" href="#_3-6-分支流程控制-switch-语句" aria-label="Permalink to &quot;3.6 分支流程控制 switch 语句&quot;">​</a></h4><h5 id="_3-6-1-语法结构" tabindex="-1">3.6.1 语法结构 <a class="header-anchor" href="#_3-6-1-语法结构" aria-label="Permalink to &quot;3.6.1 语法结构&quot;">​</a></h5><p>switch 语句也是多分支语句，它用于基于不同的条件来执行不同的代码。当要针对变量设置一系列的特定值的选项时，就可以使用 switch。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (表达式) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value1:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         执行语句1;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value2:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         执行语句2;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     执行最后的语句;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><h5 id="_3-6-2-switch-语句和-if-else-if-语句的区别" tabindex="-1">3.6.2 switch 语句和 if else if 语句的区别 <a class="header-anchor" href="#_3-6-2-switch-语句和-if-else-if-语句的区别" aria-label="Permalink to &quot;3.6.2 switch 语句和 if else if 语句的区别&quot;">​</a></h5><ul><li>一般情况下，它们两个语句可以相互替换</li><li>switch..case 语句通常处理 case 为比较确定值的情况，而 if..else...语句更加灵活，常用于范围判断(大于、 等于某个范围)</li><li>switch 语句进行条件判断后直接执行到程序的条件语句，效率更高。而 if..else 语句有几种条件，就得判断多 少次。</li><li>当分支比较少时，if...else 语句的执行效率比 switch 语句高。</li><li>当分支比较多时，switch 语句的执行效率比较高，而且结构更清晰。</li></ul><h3 id="_4-循环流程控制" tabindex="-1">4.循环流程控制 <a class="header-anchor" href="#_4-循环流程控制" aria-label="Permalink to &quot;4.循环流程控制&quot;">​</a></h3><h4 id="_1-循环" tabindex="-1">1.循环 <a class="header-anchor" href="#_1-循环" aria-label="Permalink to &quot;1.循环&quot;">​</a></h4><p>循环目的：在实际问题中，有许多具有<strong>规律性的重复操作</strong>，因此在程序中要完成这这类操作就需要<strong>重复执行某些语句</strong></p><p>在 Js 中，主要有三种类型的循环语句 ∶</p><ul><li>for 循环</li><li>while 循环</li><li>do...while 循环</li></ul><h4 id="_2-for-循环" tabindex="-1">2.for 循环 <a class="header-anchor" href="#_2-for-循环" aria-label="Permalink to &quot;2.for 循环&quot;">​</a></h4><p>在程序中，一组被重复执行的语句被称之为循环体，能否继续重复执行，取决于循环的终止条件。由循环体及循环的终止条件组成的语句，被称之为循环语句</p><p><strong>语法结构</strong></p><p>for 循环主要用于把某些代码循环若干次，通常跟计数有关系。其语法结构如下 ∶</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (初始化变量; 条件表达式; 操作表达式) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //循环体</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>断点调试:</strong> 断点调试是指自己在程序的某一行设置一个断点，调试时，程序运行到这一行就会停住，然后你可以一步一步往下调试，调试过程中可以看各个变量当前的值，出错的话，调试到出错的代码行即显示错误，停下。 <strong>断点调试可以帮我们观察程序的运行过程</strong></p><ul><li>浏览器中按 F12--&gt; sources --&gt;找到需要调试的文件--&gt;在程序的某一行设置断点</li><li>Watch:监视，通过 watch 可以监视变量的值的变化，非常的常用。</li><li>F11:程序单步执行，让程序一行一行的执行，这个时候，观察 watch 中变量的值的变化。</li><li>代码调试的能力非常重要，只有学会了代码调试，才能学会自己解决 bug 的能力。初学者不要觉得调试代码麻烦就不去调试，知识点花点功夫肯定学的会，但是代码调试这个东西，自己不去练，永远都学不会。</li><li>今天学的代码调试非常的简单，只要求同学们记住代码调试的这几个按钮的作用即可，后面还会学到很多的代码调试技巧。</li></ul><h4 id="_3-双重-for-循环" tabindex="-1">3.双重 for 循环 <a class="header-anchor" href="#_3-双重-for-循环" aria-label="Permalink to &quot;3.双重 for 循环&quot;">​</a></h4><h4 id="双重-for-循环概述" tabindex="-1">双重 for 循环概述 <a class="header-anchor" href="#双重-for-循环概述" aria-label="Permalink to &quot;双重 for 循环概述&quot;">​</a></h4><p>很多情况下，单层 for 循环并不能满足我们的需求，比如我们要打印一个 5 行 5 列的图形、打印一个倒直角三角形等，此时就可以通过循环嵌套来实现。</p><p><strong>循环嵌套</strong>是指在一个循环语句中再定义一个循环语句的语法结构，例如在 for 循环语句中，可以再嵌套一个 for 循环，这样的 for 循环语句我们称之为<strong>双重 for 循环</strong>。</p><h4 id="for-循环小结" tabindex="-1">for 循环小结 <a class="header-anchor" href="#for-循环小结" aria-label="Permalink to &quot;for 循环小结&quot;">​</a></h4><ul><li>for 循环可以重复执行某些相同代码</li><li>for 循环可以重复执行些许不同的代码，因为我们有计数器</li><li>for 循环可以重复执行某些操作，比如算术运算符加法操作</li><li>随着需求增加，双重 for 循环可以做更多、更好看的效果</li><li>双重 for 循环，外层循环一次，内层 for 循环全部执行</li><li>for 循环是循环条件和数字直接相关的循环</li><li>分析要比写代码更重要</li><li>一些核心算法想不到，但是要学会，分析它执行过程</li><li>举一反三，自己经常总结，做一些相似的案例</li></ul><h4 id="_4-while-循环" tabindex="-1">4.while 循环 <a class="header-anchor" href="#_4-while-循环" aria-label="Permalink to &quot;4.while 循环&quot;">​</a></h4><p>while 语句可以在条件表达式为真的前提下，循环执行指定的一段代码，直到表达式不为真时结束循环 while 语句的语法结构如下 ∶</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (条件表达式) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //循环体代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>执行思路:</strong></p><ul><li>先执行条件表达式，如果结果为 true，则执行循环体代码;</li><li>如果为 false，则退出循环，执行后面代码 ② 执行循环体代码</li><li>循环体代码执行完毕后，程序会继续判断执行条件表达式，如条件仍为 true，则会继续执行循环体，直到循 环条件为 false 时，整个循环过程才会结束</li></ul><h4 id="_5-do-while-循环" tabindex="-1">5.do while 循环 <a class="header-anchor" href="#_5-do-while-循环" aria-label="Permalink to &quot;5.do while 循环&quot;">​</a></h4><p>do... while 语句其实是 while 语句的一个变体。该循环会先执行一次代码块，然后对条件表达式进行判断，如果条件为真，就会重复执行循环体，否则退出循环 do... while 语句的语法结构如下 ∶</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //循环体代码 – 条件表达式为 true 时重复执行循环体代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (条件表达式)</span></span></code></pre></div><p><strong>执行思路:</strong></p><ul><li><p>先执行一次循环体代码</p></li><li><p>再执行条件表达式，如果结果为 true，则继续执行循环体代码，如果为 false，则退出循环，继续执行后面代码</p><p><strong>注意 ∶ 先再执行循环体，再判断，我们会发现 do...while 循环语句至少会执行一次循环体代码</strong></p></li></ul><h4 id="_6-循环小结" tabindex="-1">6.循环小结 <a class="header-anchor" href="#_6-循环小结" aria-label="Permalink to &quot;6.循环小结&quot;">​</a></h4><ul><li>JS 中循环有 for . while、do while</li><li>三个循环很多情况下都可以相互替代使用</li><li>如果是用来计次数，跟数字相关的，三者使用基本相同，但是我们更喜欢用 for</li><li>while 和 do...while 可以做更复杂的判断条件，比 for 循环灵活一些</li><li>while 和 do...while 执行顺序不一样，while 先判断后执行，do...while 先执行一次，再判断执行</li><li>while 和 do...while 执行次数不一样，do...while 至少会执行一次循环体，而 while 可能一次也不执行</li><li>实际工作中，<strong>我们更常用 for 循环语句</strong>，它写法更简洁直观，所以这个要重点学习</li></ul><h4 id="_7-continue-break" tabindex="-1">7.continue break <a class="header-anchor" href="#_7-continue-break" aria-label="Permalink to &quot;7.continue break&quot;">​</a></h4><h5 id="_7-1-continue-关键字" tabindex="-1">7.1 continue 关键字 <a class="header-anchor" href="#_7-1-continue-关键字" aria-label="Permalink to &quot;7.1 continue 关键字&quot;">​</a></h5><p><strong>continue 关键字</strong>用于立即<strong>跳出本次循环</strong>，<strong>继续下一次循环</strong>（本次循环体中 continue 之后的代码就会少执行一次)。</p><h5 id="_7-2-break-关键字" tabindex="-1">7.2 break 关键字 <a class="header-anchor" href="#_7-2-break-关键字" aria-label="Permalink to &quot;7.2 break 关键字&quot;">​</a></h5><p>break 关键字用于立即跳出整个循环（循环结束)。</p><h2 id="_3-javascript-命名规范以及语法格式" tabindex="-1">3.JavaScript 命名规范以及语法格式 <a class="header-anchor" href="#_3-javascript-命名规范以及语法格式" aria-label="Permalink to &quot;3.JavaScript 命名规范以及语法格式&quot;">​</a></h2><h3 id="_1-标识符命名规范" tabindex="-1">1.标识符命名规范 <a class="header-anchor" href="#_1-标识符命名规范" aria-label="Permalink to &quot;1.标识符命名规范&quot;">​</a></h3><ul><li>变量、函数的命名必须要有意义</li><li>变量的名称一般用名词</li><li>函数的名称一般用动词</li></ul><h3 id="_2-操作符规范" tabindex="-1">2.操作符规范 <a class="header-anchor" href="#_2-操作符规范" aria-label="Permalink to &quot;2.操作符规范&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//操作符的左右两侧各保留一个空格</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> l; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    break</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //直接退出整个for循环，跳到整个for循环下面的语句</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;我正在吃第&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;个包子呢&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_4-javascript-数组" tabindex="-1">4.JavaScript 数组 <a class="header-anchor" href="#_4-javascript-数组" aria-label="Permalink to &quot;4.JavaScript 数组&quot;">​</a></h2><h3 id="_1-数组大概念" tabindex="-1">1.数组大概念 <a class="header-anchor" href="#_1-数组大概念" aria-label="Permalink to &quot;1.数组大概念&quot;">​</a></h3><blockquote><p>数组是指一组数据的集合，其中的每个数据被称作元素，在数组中可以存放任意类型的元素。数组是一种将一组数据存储在单个变量名下的优雅方式。</p></blockquote><h3 id="_2-创建数组" tabindex="-1">2.创建数组 <a class="header-anchor" href="#_2-创建数组" aria-label="Permalink to &quot;2.创建数组&quot;">​</a></h3><h4 id="_2-1-数组的创建方式" tabindex="-1">2.1 数组的创建方式 <a class="header-anchor" href="#_2-1-数组的创建方式" aria-label="Permalink to &quot;2.1 数组的创建方式&quot;">​</a></h4><p>JS 中创建数组有两种方式:</p><ul><li>利用 new 创建数组</li><li>利用数组字面量创建数组</li></ul><h4 id="_2-2-利用-new-创建数组" tabindex="-1">2.2 利用 new 创建数组 <a class="header-anchor" href="#_2-2-利用-new-创建数组" aria-label="Permalink to &quot;2.2 利用 new 创建数组&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr[i])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 数组名 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//创建一个新的空数组</span></span></code></pre></div><p>这种方式暂且了解，等学完对象再看注意 Array0 ，A 要大写</p><h4 id="_2-3-利用数组字面量创建数组" tabindex="-1">2.3 利用数组字面量创建数组 <a class="header-anchor" href="#_2-3-利用数组字面量创建数组" aria-label="Permalink to &quot;2.3 利用数组字面量创建数组&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//1．使用数组字面量方式创建空的数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 数组名 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [] ;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//2．使用数组字面量方式创建带初始值的数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 数组名 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;小白&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，小黑</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;，&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">大黄</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;，&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">瑞奇</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;]</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">;</span></span></code></pre></div><ul><li>数组的字面量是方括号[]</li><li>声明数组并赋值称为数组的初始化</li><li>这种字面量方式也是我们以后最多使用的方式</li></ul><h4 id="_2-4-数组元素的类型" tabindex="-1">2.4 数组元素的类型 <a class="header-anchor" href="#_2-4-数组元素的类型" aria-label="Permalink to &quot;2.4 数组元素的类型&quot;">​</a></h4><p>数组中可以存放任意类型的数据，例字符串，数字，布尔值等。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arrstus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;小白&quot;,12,true,28.9] </span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">;</span></span></code></pre></div><h3 id="_3-获取数组元素" tabindex="-1">3.获取数组元素 <a class="header-anchor" href="#_3-获取数组元素" aria-label="Permalink to &quot;3.获取数组元素&quot;">​</a></h3><h4 id="_3-1-数组的索引" tabindex="-1">3.1 数组的索引 <a class="header-anchor" href="#_3-1-数组的索引" aria-label="Permalink to &quot;3.1 数组的索引&quot;">​</a></h4><p>索引(下标)∶ 用来访问数组元素的序号（数组下标从 0 开始)。</p><p>vararr = [&#39;小白&#39;,&#39;小黑&#39;,&#39;大黄&#39;,&#39;瑞奇&#39;]; 索引号 ∶ 0 1 2 3</p><p>数组可以通过<strong>索引</strong>来访问、设置、修改对应的数组元素，我们可以通过“<strong>数组名[索引</strong>”的形式来获取数组中的元素。 这里的<strong>访问</strong>就是获取得到的意思</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//定义数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arrstus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//获取数组中的第2个元素</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arrStus[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><h3 id="_4-遍历数组" tabindex="-1">4.遍历数组 <a class="header-anchor" href="#_4-遍历数组" aria-label="Permalink to &quot;4.遍历数组&quot;">​</a></h3><p><strong>遍历</strong>:就是把数组中的每个元素从头到尾都访问一次(类似我们每天早上学生的点名)。</p><p>es6 语法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {item.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">every</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">item.value)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">所有item.value都为true则返回true,否则返回false;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">item.value)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">存在item.value为true则返回true,否则返回false;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;指定元素&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) arrList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">splice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newList</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;指定元素&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> )  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">过滤掉不需要的</span></span></code></pre></div><h3 id="_5-数组中新增元素" tabindex="-1">5.数组中新增元素 <a class="header-anchor" href="#_5-数组中新增元素" aria-label="Permalink to &quot;5.数组中新增元素&quot;">​</a></h3><p>可以通过修改 length 长度以及索引号增加数组元素</p><h4 id="_5-1-通过修改-length-长度新增数组元素" tabindex="-1">5.1 通过修改 length 长度新增数组元素 <a class="header-anchor" href="#_5-1-通过修改-length-长度新增数组元素" aria-label="Permalink to &quot;5.1 通过修改 length 长度新增数组元素&quot;">​</a></h4><p>可以通过修改 length 长度来实现数组扩容的目的</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">length属性是可读写的</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;red&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;green&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;blue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;pink&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><p>其中索引号是 4，5，6 的空间没有给值，就是声明变量未给值，默认值就是<strong>undefined</strong>。</p><h4 id="_5-2-通过修改数组索引新增数组元素" tabindex="-1">5.2 通过修改数组索引新增数组元素 <a class="header-anchor" href="#_5-2-通过修改数组索引新增数组元素" aria-label="Permalink to &quot;5.2 通过修改数组索引新增数组元素&quot;">​</a></h4><ul><li>可以通过修改数组索引的方式追加数组元素</li><li>不能直接给数组名赋值，否则会覆盖掉以前的数据</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>var arr = [ &#39;red&#39;,&#39;green&#39;,&#39;blue&#39;,&#39;pink&#39;];</span></span>
<span class="line"><span>arr[4] = &#39;hotpink&#39;;</span></span>
<span class="line"><span>console.log (arr);</span></span></code></pre></div><p>这种方式也是我们最常用的一种方式。</p><h3 id="_6-数组排序" tabindex="-1">6.数组排序 <a class="header-anchor" href="#_6-数组排序" aria-label="Permalink to &quot;6.数组排序&quot;">​</a></h3><p>冒泡排序︰是一种算法，把一系列的数据按照一定的顺序进行排列显示(从小到大或从大到小)。</p><p><strong>冒泡排序</strong>：是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺字错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢 ° 浮&quot;到数列的顶端。</p><p><img src="`+n+`" alt="Snipaste_2021-02-10_13-40-00" loading="lazy"></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 交换躺输为:i=length-1;交换次数为:j=length-i-1  */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 外层循环管趟数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 里面的循环管 每一趟的交换次数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 内部交换2个变量的值 前一个和后面一个数组元素相比较</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (arr[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> temp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[j]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      arr[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      arr[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> temp</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_5-javascript-函数" tabindex="-1">5.JavaScript 函数 <a class="header-anchor" href="#_5-javascript-函数" aria-label="Permalink to &quot;5.JavaScript 函数&quot;">​</a></h2><h3 id="_1-函数的概念" tabindex="-1">1. 函数的概念 <a class="header-anchor" href="#_1-函数的概念" aria-label="Permalink to &quot;1. 函数的概念&quot;">​</a></h3><p>在 JS 里面，可能会定义非常多的相同代码或者功能相似的代码，这些代码可能需要大量重复使用。 虽然 for 循环语句也能实现一些简单的重复操作，但是比较具有局限性，此时我们就可以使用 JS 中的函数。 <strong>函数</strong>：就是<strong>封装了一段可被重复调用执行的代码块</strong>。通过此代码块可以实现大量代码的重复使用。</p><h3 id="_2-函数的使用" tabindex="-1">2. 函数的使用 <a class="header-anchor" href="#_2-函数的使用" aria-label="Permalink to &quot;2. 函数的使用&quot;">​</a></h3><h4 id="_2-1-声明函数" tabindex="-1">2.1 声明函数 <a class="header-anchor" href="#_2-1-声明函数" aria-label="Permalink to &quot;2.1 声明函数&quot;">​</a></h4><p>函数在使用时分为两步：声明函数和调用函数。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 声明函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 函数名</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //函数体代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>function 是声明函数的关键字,必须小写</li><li>由于函数一般是为了实现某个功能才定义的， 所以通常我们将函数名命名为动词，比如 getSum</li></ul><h4 id="_2-2-调用函数" tabindex="-1">2.2 调用函数 <a class="header-anchor" href="#_2-2-调用函数" aria-label="Permalink to &quot;2.2 调用函数&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 调用函数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">函数名</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 通过调用函数名来执行函数体代码</span></span></code></pre></div><ul><li>调用的时候千万不要忘记添加小括号</li><li>口诀：函数不调用，自己不执行。</li></ul><p>注意：声明函数本身并不会执行代码，只有调用函数时才会执行函数体代码。</p><h4 id="_2-3-函数的封装" tabindex="-1">2.3 函数的封装 <a class="header-anchor" href="#_2-3-函数的封装" aria-label="Permalink to &quot;2.3 函数的封装&quot;">​</a></h4><ul><li>函数的封装是把一个或者多个功能通过函数的方式封装起来，对外只提供一个简单的函数接口</li><li>简单理解：封装类似于将电脑配件整合组装到机箱中 ( 类似快递打包）</li></ul><h3 id="_3-函数的参数" tabindex="-1">3. 函数的参数 <a class="header-anchor" href="#_3-函数的参数" aria-label="Permalink to &quot;3. 函数的参数&quot;">​</a></h3><h4 id="_3-1-形参和实参" tabindex="-1">3.1 形参和实参 <a class="header-anchor" href="#_3-1-形参和实参" aria-label="Permalink to &quot;3.1 形参和实参&quot;">​</a></h4><p>在声明函数时，可以在函数名称后面的小括号中添加一些参数，这些参数被称为形参，而在调用该函数时， 同样也需要传递相应的参数，这些参数被称为实参。</p><table tabindex="0"><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>形参</td><td><strong>形</strong>式上的<strong>参</strong>数 <strong>函数定义</strong>的时候传递的参数 当前并不知道是什么</td></tr><tr><td>实参</td><td><strong>实</strong>际上的<strong>参</strong>数 <strong>函数调用</strong>的时候传递的参数 实参是传递给形参的</td></tr></tbody></table><p><strong>参数的作用</strong> : 在<strong>函数内部</strong>某些值不能固定，我们可以通过参数在<strong>调用函数时传递</strong>不同的值进去。</p><p>在声明函数时，可以在函数名称后面的小括号中添加一些参数，这些参数被称为<strong>形参</strong>，而在调用该函数时，同样也需要传递相应的参数，这些参数被称为<strong>实参</strong>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 带参数的函数声明</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 函数名</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">形参1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">形参2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> , </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">形参3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可以定义任意多的参数，用逗号分隔</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 函数体</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 带参数的函数调用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 函数名</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(实参1, 实参2, 实参3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h4 id="_3-2-函数参数的传递过程" tabindex="-1">3.2 函数参数的传递过程 <a class="header-anchor" href="#_3-2-函数参数的传递过程" aria-label="Permalink to &quot;3.2 函数参数的传递过程&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 声明函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getSum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">num1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">num2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num2)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 调用函数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 11</span></span></code></pre></div><ol><li>调用的时候实参值是传递给形参的</li><li>形参简单理解为：<strong>不用声明的变量</strong></li><li>实参和形参的多个参数之间用逗号（,）分隔</li></ol><h4 id="_3-3-函数形参和实参个数不匹配问题" tabindex="-1">3.3 函数形参和实参个数不匹配问题 <a class="header-anchor" href="#_3-3-函数形参和实参个数不匹配问题" aria-label="Permalink to &quot;3.3 函数形参和实参个数不匹配问题&quot;">​</a></h4><table tabindex="0"><thead><tr><th>参数个数</th><th>说明</th></tr></thead><tbody><tr><td>实参个数等于形参个数</td><td>输出正确结果</td></tr><tr><td>实参个数大于形参个数</td><td>只取到形参的个数</td></tr><tr><td>实参个数小于形参个数</td><td>多的形参定义为 undefined，结果为 NaN</td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">num1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">num2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num2)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 形参和实参个数相等，输出正确结果 sum(100,  400, 500, 700);  // 实参个数多于形参，只取到形参的个数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 实参个数少于形参，多的形参定义为undefined，结果为NaN</span></span></code></pre></div><h4 id="_3-4-小结" tabindex="-1">3.4 小结 <a class="header-anchor" href="#_3-4-小结" aria-label="Permalink to &quot;3.4 小结&quot;">​</a></h4><ul><li>函数可以带参数也可以不带参数</li><li>声明函数的时候，函数名括号里面的是形参，形参的默认值为 undefined</li><li>调用函数的时候，函数名括号里面的是实参</li><li>多个参数中间用逗号分隔</li><li>形参的个数可以和实参个数不匹配，但是结果不可预计，我们尽量要匹配</li></ul><h3 id="_4-函数的返回值" tabindex="-1">4.函数的返回值 <a class="header-anchor" href="#_4-函数的返回值" aria-label="Permalink to &quot;4.函数的返回值&quot;">​</a></h3><h4 id="_4-1-return-语句" tabindex="-1">4.1 return 语句 <a class="header-anchor" href="#_4-1-return-语句" aria-label="Permalink to &quot;4.1 return 语句&quot;">​</a></h4><p>有的时候，我们会希望函数将值返回给调用者，此时通过使用 return 语句就可以实现。</p><p>return 语句的语法格式如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 声明函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 函数名</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">（）{  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 需要返回的值;}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 调用函数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">函数名</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 此时调用函数就可以得到函数体内return 后面的值</span></span></code></pre></div><ul><li>在使用 return 语句时，函数会停止执行，并返回指定的值</li><li>如果函数<strong>没有 return</strong> ，返回的值是 <strong>undefined</strong></li></ul><p>有的时候，我们会希望函数将值返回给调用者，此时通过使用 return 语句就可以实现。</p><p>例如，声明了一个 sum()函数，该函数的返回值为 666，其代码如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 声明函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">（）{   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 666</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 调用函数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 此时 sum 的值就等于666，因为 return  语句会把自身后面的值返回给调用者</span></span></code></pre></div><h4 id="_4-2-return-终止函数" tabindex="-1">4.2 return 终止函数 <a class="header-anchor" href="#_4-2-return-终止函数" aria-label="Permalink to &quot;4.2 return 终止函数&quot;">​</a></h4><p>return 语句之后的代码不被执行。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">num1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">num2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//函数体</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num2; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 注意：return 后的代码不执行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;我不会被执行，因为前面有 return&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> resNum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">21</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 调用函数，传入两个实参，并通过 resNum 接收函数返回值</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resNum);     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 27</span></span></code></pre></div><h4 id="_4-3-return-的返回值" tabindex="-1">4.3 return 的返回值 <a class="header-anchor" href="#_4-3-return-的返回值" aria-label="Permalink to &quot;4.3 return 的返回值&quot;">​</a></h4><p>return 只能返回一个值。如果用逗号隔开多个值，以最后一个为准。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">num1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">num2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //函数体</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num1，num2;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> resNum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">21</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 调用函数，传入两个实参，并通过 resNum 接收函数返回值  alert(resNum);     // 6</span></span></code></pre></div><h4 id="_4-4-函数没有-return-返回-undefined" tabindex="-1">4.4 函数没有 return 返回 undefined <a class="header-anchor" href="#_4-4-函数没有-return-返回-undefined" aria-label="Permalink to &quot;4.4 函数没有 return 返回 undefined&quot;">​</a></h4><p>函数都是有返回值的</p><ol><li><p>如果有 return 则返回 return 后面的值</p></li><li><p>如果没有 return 则返回 undefined</p></li></ol><h4 id="_4-5-break-continue-return-的区别" tabindex="-1">4.5 break ,continue ,return 的区别 <a class="header-anchor" href="#_4-5-break-continue-return-的区别" aria-label="Permalink to &quot;4.5 break ,continue ,return 的区别&quot;">​</a></h4><ul><li>break ：结束当前的循环体（如 for、while）</li><li>continue ：跳出本次循环，继续执行下次循环（如 for、while）</li><li>return ：不仅可以退出循环，还能够返回 return 语句中的值，同时还可以结束当前的函数体内的代码</li></ul><h3 id="_5-arguments-的使用" tabindex="-1">5. arguments 的使用 <a class="header-anchor" href="#_5-arguments-的使用" aria-label="Permalink to &quot;5. arguments 的使用&quot;">​</a></h3><p>当我们不确定有多少个参数传递的时候，可以用 <strong>arguments</strong> 来获取。在 JavaScript 中，arguments 实际上它是当前函数的一个<strong>内置对象</strong>。所有函数都内置了一个 arguments 对象，arguments 对象中存<strong>储了传递的所有实参</strong>。</p><p><strong>arguments 展示形式是一个伪数组</strong>，因此可以进行遍历。伪数组具有以下特点：</p><ul><li>具有 length 属性</li><li>按索引方式储存数据</li><li>不具有数组的 push , pop 等方法</li></ul><h3 id="_6-函数的两种声明方式" tabindex="-1">6.函数的两种声明方式 <a class="header-anchor" href="#_6-函数的两种声明方式" aria-label="Permalink to &quot;6.函数的两种声明方式&quot;">​</a></h3><h4 id="_1-自定义函数方式-命名函数" tabindex="-1">1.自定义函数方式(命名函数) <a class="header-anchor" href="#_1-自定义函数方式-命名函数" aria-label="Permalink to &quot;1.自定义函数方式(命名函数)&quot;">​</a></h4><p>利用函数关键字 function 自定义函数方式。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 声明定义方式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 调用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><ul><li>因为有名字，所以也被称为<strong>命名函数</strong></li><li>调用函数的代码既可以放到声明函数的前面，也可以放在声明函数的后面</li></ul><h4 id="_2-函数表达式方式-匿名函数" tabindex="-1">2.函数表达式方式(匿名函数） <a class="header-anchor" href="#_2-函数表达式方式-匿名函数" aria-label="Permalink to &quot;2.函数表达式方式(匿名函数）&quot;">​</a></h4><p>利用函数表达式方式的写法如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这是函数表达式写法，匿名函数后面跟分号结束</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}；</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 调用的方式，函数调用必须写到函数体下面</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><ul><li>因为函数没有名字，所以也被称为匿名函数</li><li>这个 fn 里面存储的是一个函数</li><li>函数表达式方式原理跟声明变量方式是一致的</li><li>函数调用的代码必须写到函数体后面</li></ul><h2 id="_6-javascript-作用域" tabindex="-1">6.JavaScript 作用域 <a class="header-anchor" href="#_6-javascript-作用域" aria-label="Permalink to &quot;6.JavaScript 作用域&quot;">​</a></h2><h3 id="_1-作用域" tabindex="-1">1.作用域 <a class="header-anchor" href="#_1-作用域" aria-label="Permalink to &quot;1.作用域&quot;">​</a></h3><h4 id="_1-1-作用域概述" tabindex="-1">1.1 作用域概述 <a class="header-anchor" href="#_1-1-作用域概述" aria-label="Permalink to &quot;1.1 作用域概述&quot;">​</a></h4><p>通常来说，一段程序代码中所用到的名字并不总是有效和可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突。</p><h3 id="_2-变量的作用域" tabindex="-1">2.变量的作用域 <a class="header-anchor" href="#_2-变量的作用域" aria-label="Permalink to &quot;2.变量的作用域&quot;">​</a></h3><h4 id="_2-1-变量作用域的分类" tabindex="-1">2.1 变量作用域的分类 <a class="header-anchor" href="#_2-1-变量作用域的分类" aria-label="Permalink to &quot;2.1 变量作用域的分类&quot;">​</a></h4><p>在 JavaScript 中，根据作用域的不同，变量可以分为两种:</p><ul><li>全局变量</li><li>局部变量</li></ul><h4 id="_2-2-全局变量" tabindex="-1">2.2 全局变量 <a class="header-anchor" href="#_2-2-全局变量" aria-label="Permalink to &quot;2.2 全局变量&quot;">​</a></h4><p>在全局作用域下声明的变量叫做全局变量(在函数外部定义的变量)。.</p><ul><li>全局变量在代码的任何位置都可以使用</li><li>在全局作用域下 var 声明的变量是全局变量</li><li>特殊情况下，在函数内不使用 var 声明的变量也是全局变量(不建议使用)</li></ul><h4 id="_2-3-局部变量" tabindex="-1">2.3 局部变量 <a class="header-anchor" href="#_2-3-局部变量" aria-label="Permalink to &quot;2.3 局部变量&quot;">​</a></h4><p>在局部作用域下声明的变量叫做局部变量(在函数内部定义的变量)</p><ul><li>局部变量只能在该函数内部使用</li><li>在函数内部 var 声明的变量是局部变量</li><li>函数的<strong>形参</strong>实际上就是局部变量</li></ul><h4 id="_2-3-全局变量和局部变量的区别" tabindex="-1">2.3 全局变量和局部变量的区别 <a class="header-anchor" href="#_2-3-全局变量和局部变量的区别" aria-label="Permalink to &quot;2.3 全局变量和局部变量的区别&quot;">​</a></h4><ul><li>全局变量:在任何一个地方都可以使用，只有在浏览器关闭时才会被销毁，因此比较占内存</li><li>局部变量︰只在函数内部使用，当其所在的代码块被执行时，会被初始化;当代码块运行结束后，就会被销毁，因此更节省内存空间</li></ul><h3 id="_3-作用域链" tabindex="-1">3.作用域链 <a class="header-anchor" href="#_3-作用域链" aria-label="Permalink to &quot;3.作用域链&quot;">​</a></h3><ul><li>只要是代码，就至少有一个作用域</li><li>写在函数内部的局部作用域</li><li>如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域</li><li>根据在内部函数可以访问外部函数变量的这种机制，用链式查找决定哪些数据能被内部函数访问，就称作作用域链</li></ul><h2 id="_7-javascript-预解析" tabindex="-1">7.JavaScript 预解析 <a class="header-anchor" href="#_7-javascript-预解析" aria-label="Permalink to &quot;7.JavaScript 预解析&quot;">​</a></h2><h3 id="_1-预解析" tabindex="-1">1.预解析 <a class="header-anchor" href="#_1-预解析" aria-label="Permalink to &quot;1.预解析&quot;">​</a></h3><p>JavaScript 代码是由浏览器中的 JavaScript 解析器来执行的。JavaScript 解析器在运行 JavaScript 代码的时候分为两步 ∶ 预解析和代码执行。</p><ol><li><p>我们 js 引擎运行 js 分为两步：预解析代码执行</p><ul><li>预解析 js 引擎会把 js 里面所有的 var 还有 function 提升到当前作用域的最前面</li><li>代码执行 按照代码书写的顺序从上往下执行</li></ul></li><li><p>预解析分为 变量预解析（变量提升）和 函数预解析（函数提升）</p><ul><li>变量提升 就是把所有的变量声明提升到当前的作用域最前面 不提升赋值操作</li><li>函数提升 就是把所有的函数声明提升到当前作用域的最前面 不调用函数</li></ul></li></ol><h2 id="_8-javascript-对象" tabindex="-1">8.JavaScript 对象 <a class="header-anchor" href="#_8-javascript-对象" aria-label="Permalink to &quot;8.JavaScript 对象&quot;">​</a></h2><h3 id="_1-对象" tabindex="-1">1.对象 <a class="header-anchor" href="#_1-对象" aria-label="Permalink to &quot;1.对象&quot;">​</a></h3><h4 id="_1-1-什么是对象" tabindex="-1">1.1 什么是对象? <a class="header-anchor" href="#_1-1-什么是对象" aria-label="Permalink to &quot;1.1 什么是对象?&quot;">​</a></h4><p>在 JavaScript 中，对象是一组无序的相关属性和方法的集合，所有的事物都是对象，例如字符串、数值、数组、函数等。</p><p>对象是由属性和方法组成的。</p><ul><li>属性 ∶ 事物的<strong>特征</strong>，在对象中用<strong>属性</strong>来表示(常用名词)</li><li>方法︰事物的<strong>行为</strong>，在对象中用<strong>方法</strong>来表示(常用动词)</li></ul><h4 id="_1-2-为什么需要对象" tabindex="-1">1.2 为什么需要对象 <a class="header-anchor" href="#_1-2-为什么需要对象" aria-label="Permalink to &quot;1.2 为什么需要对象&quot;">​</a></h4><p>保存一个值时，可以使用<strong>变量</strong>，保存多个值(一组值)时，可以使用<strong>数组</strong>。如果要保存一个人的完整信例如，将“张三疯”的个人的信息保存在数组中的方式为︰</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;张三疯，&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">男</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;，128,154] </span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">;</span></span></code></pre></div><p>JS 中的对象表达结构更清晰，更强大。张三疯的个人信息在对象中的表达结构如下 ∶</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">张三疯.姓名 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;张三疯&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">张三疯.性别 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;男&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">张三疯.年龄 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 128</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">张三疯.身高 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 154</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">person.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;张三疯&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //或者person[&#39;name&#39;]=&#39;张三疯&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">person.sex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;男&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">person.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 128</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">person.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 154</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//删除指定元素</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object[key]</span></span></code></pre></div><h3 id="_2-创建对象的三种方式" tabindex="-1">2.创建对象的三种方式 <a class="header-anchor" href="#_2-创建对象的三种方式" aria-label="Permalink to &quot;2.创建对象的三种方式&quot;">​</a></h3><p>在 JavaScript 中，现阶段我们可以采用三种方式创建对象( object ) :</p><ul><li><p>利用<strong>字面量</strong>创建对象</p></li><li><p>利用<strong>new Object</strong>创建对象</p></li><li><p>利用<strong>构造函数</strong>创建对象</p></li></ul><h4 id="_2-1-利用字面量创建对象" tabindex="-1">2.1 利用字面量创建对象 <a class="header-anchor" href="#_2-1-利用字面量创建对象" aria-label="Permalink to &quot;2.1 利用字面量创建对象&quot;">​</a></h4><p>对象字面量:就是花括号{}里面包含了表达这个具体事物（对象）的属性和方法。</p><p><strong>变量、属性、函数、方法总结</strong></p><ul><li>变量:单独声明赋值，单独存在</li><li>属性:对象里面的变量称为属性，不需要声明，用来描述该对象的特征</li><li>函数︰单独存在的，通过“函数名()”的方式就可以调用</li><li>方法 ∶ 对象里面的函数称为方法，方法不需要声明，使用“对象.方法名(”的方式就可以调用，方法用来描述该对象的行为和功能。</li></ul><h4 id="_2-2-利用-new-object-创建对象" tabindex="-1">2.2 利用 new Object 创建对象 <a class="header-anchor" href="#_2-2-利用-new-object-创建对象" aria-label="Permalink to &quot;2.2 利用 new Object 创建对象&quot;">​</a></h4><p>跟我们前面学的 new Array)原理一致</p><h4 id="_2-3-利用构造函数创建对象" tabindex="-1">2.3 利用构造函数创建对象 <a class="header-anchor" href="#_2-3-利用构造函数创建对象" aria-label="Permalink to &quot;2.3 利用构造函数创建对象&quot;">​</a></h4><p><strong>构造函数</strong> ：是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值，它总与 new 运算符一起 使用。我们可以把对象中一些公共的属性和方法抽取出来，然后封装到这个函数里面。</p><p>在 js 中，使用构造函数要时要注意以下两点：</p><ul><li>构造函数用于创建某一类对象，其<strong>首字母要大写</strong></li><li>构造函数要<strong>和 new 一起使用</strong>才有意义</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Star</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">uname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uname</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.sex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sex</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sing</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sang)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ldh </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Star</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;刘德华&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;男&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 调用函数返回的是一个对象</span></span></code></pre></div><p>注意</p><ol><li><p>构造函数约定首字母大写。</p></li><li><p>函数内的属性和方法前面需要添加 this ，表示当前对象的属性和方法。</p></li><li><p>构造函数中不需要 return 返回结果。</p></li><li><p>当我们创建对象的时候，必须用 new 来调用构造函数。</p></li></ol><h4 id="_2-4-构造函数和对象" tabindex="-1">2.4 构造函数和对象 <a class="header-anchor" href="#_2-4-构造函数和对象" aria-label="Permalink to &quot;2.4 构造函数和对象&quot;">​</a></h4><ul><li>构造函数，如 Stars()，抽象了对象的公共部分，封装到了函数里面，它泛指某一大类（class）</li><li>创建对象，如 new Stars()，特指某一个，通过 new 关键字创建对象的过程我们也称为对象实例化</li></ul><h3 id="_3-new-关键字" tabindex="-1">3.new 关键字 <a class="header-anchor" href="#_3-new-关键字" aria-label="Permalink to &quot;3.new 关键字&quot;">​</a></h3><p>new 在执行时会做四件事情:</p><ol><li><p>在内存中创建一个新的空对象。</p></li><li><p>让 this 指向这个新的对象。</p></li><li><p>执行构造函数里面的代码，给这个新对象添加属性和方法。</p></li><li><p>返回这个新对象（所以构造函数里面不需要 return ) 。</p></li></ol><h3 id="_4-遍历对象属性" tabindex="-1">4. 遍历对象属性 <a class="header-anchor" href="#_4-遍历对象属性" aria-label="Permalink to &quot;4. 遍历对象属性&quot;">​</a></h3><p>for...in 语句用于对数组或者对象的属性进行循环操作。 其语法如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (变量 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 对象名字) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 在此执行代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>语法中的变量是自定义的，它需要符合命名规范，通常我们会将这个变量写为 k 或者 key。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> k </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(k) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这里的 k 是属性名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj[k]) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这里的 obj[k] 是属性值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>小结</strong></p><ol><li>对象可以让代码结构更清晰</li><li>对象复杂数据类型 object。</li><li>本质：对象就是一组无序的相关属性和方法的集合。</li><li>构造函数泛指某一大类，比如苹果，不管是红色苹果还是绿色苹果，都统称为苹果。</li><li>对象实例特指一个事物，比如这个苹果、正在给你们讲课的 pink 老师等。</li><li>for...in 语句用于对对象的属性进行循环操作。</li></ol><h2 id="_9-javascript-内置对象" tabindex="-1">9.JavaScript 内置对象 <a class="header-anchor" href="#_9-javascript-内置对象" aria-label="Permalink to &quot;9.JavaScript 内置对象&quot;">​</a></h2><h3 id="_1-内置对象" tabindex="-1">1.内置对象 <a class="header-anchor" href="#_1-内置对象" aria-label="Permalink to &quot;1.内置对象&quot;">​</a></h3><ul><li>JavaScript 中的对象分为 3 种:自定义对象、内置对象、浏览器对象</li><li>前面两种对象是 JS 基础内容，属于 ECMAScript;第三个浏览器对象属于我们 S 独有的，我们 JS API 讲解</li><li>内置对象就是指 JS 语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或是最基本而必要的功能（属性和方法)</li><li>内置对象最大的优点就是帮助我们快速开发</li><li>JavaScript 提供了多个内置对象:Math、 Date . Array、string 等</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//去除两边空格</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">trim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//切割字符串</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;index.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)))</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.js&#39;</span></span></code></pre></div><h3 id="_2-查文档" tabindex="-1">2. 查文档 <a class="header-anchor" href="#_2-查文档" aria-label="Permalink to &quot;2. 查文档&quot;">​</a></h3><h4 id="_2-1-mdn" tabindex="-1">2.1 MDN <a class="header-anchor" href="#_2-1-mdn" aria-label="Permalink to &quot;2.1 MDN&quot;">​</a></h4><p>学习一个内置对象的使用，只要学会其常用成员的使用即可，我们可以通过查文档学习，可以通过 MDN/W3C 来查询。</p><p>Mozilla 开发者网络（MDN）提供了有关开放网络技术（Open Web）的信息，包括 HTML、CSS 和万维网及 HTML5 应用的 API。</p><p>MDN: <a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/</a></p><h4 id="_2-2-如何学习对象中的方法" tabindex="-1">2.2 如何学习对象中的方法 <a class="header-anchor" href="#_2-2-如何学习对象中的方法" aria-label="Permalink to &quot;2.2 如何学习对象中的方法&quot;">​</a></h4><ol><li><p>查阅该方法的功能</p></li><li><p>查看里面参数的意义和类型</p></li><li><p>查看返回值的意义和类型</p></li><li><p>通过 demo 进行测试</p></li></ol><h3 id="_3-math-对象" tabindex="-1">3. Math 对象 <a class="header-anchor" href="#_3-math-对象" aria-label="Permalink to &quot;3. Math 对象&quot;">​</a></h3><h4 id="_3-1-math-概述" tabindex="-1">3.1 Math 概述 <a class="header-anchor" href="#_3-1-math-概述" aria-label="Permalink to &quot;3.1 Math 概述&quot;">​</a></h4><p>Math 对象不是构造函数，它具有数学常数和函数的属性和方法。跟数学相关的运算（求绝对值，取整、最大值 等）可以使用 Math 中的成员。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PI</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 圆周率</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 向下取整</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ceil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 向上取整</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">round</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 四舍五入版 就近取整 注意 -3.5 结果是 -3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">abs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 绝对值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">min</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 求最大和最小值</span></span></code></pre></div><p><strong>注意：上面的方法必须带括号</strong></p><h4 id="_3-2-随机数方法-random" tabindex="-1">3.2 随机数方法 random() <a class="header-anchor" href="#_3-2-随机数方法-random" aria-label="Permalink to &quot;3.2 随机数方法 random()&quot;">​</a></h4><p>random() 方法可以随机返回一个小数，其取值范围是 [0，1)，左闭右开 0 &lt;= x &lt; 1 得到一个两数之间的随机整数，包括两个数在内</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getRandom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">min</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (max </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> min </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> min</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>生成 length 个 0~9 的随机数:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> length; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_4-日期对象" tabindex="-1">4. 日期对象 <a class="header-anchor" href="#_4-日期对象" aria-label="Permalink to &quot;4. 日期对象&quot;">​</a></h3><h4 id="_4-1-date-概述" tabindex="-1">4.1 Date 概述 <a class="header-anchor" href="#_4-1-date-概述" aria-label="Permalink to &quot;4.1 Date 概述&quot;">​</a></h4><ul><li>Date 对象和 Math 对象不一样，他是一个构造函数，所以我们需要实例化后才能使用</li><li>Date 实例用来处理日期和时间</li></ul><h4 id="_4-2-date-方法的使用" tabindex="-1">4.2 Date()方法的使用 <a class="header-anchor" href="#_4-2-date-方法的使用" aria-label="Permalink to &quot;4.2 Date()方法的使用&quot;">​</a></h4><p><strong>1.获取当前时间必须实例化</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> now </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(now)</span></span></code></pre></div><p><strong>2.Date(构造函数的参数</strong> 如果括号里面有时间，就返回参数里面的时间。例如日期格式字符串为‘2019-5-1’，可以写成 new Date(2019-5-1&quot;)或者 new Date(2019/5/1)</p><h4 id="_4-3-日期格式化" tabindex="-1">4.3 日期格式化 <a class="header-anchor" href="#_4-3-日期格式化" aria-label="Permalink to &quot;4.3 日期格式化&quot;">​</a></h4><table tabindex="0"><thead><tr><th>方法名</th><th>说明</th><th>代码</th></tr></thead><tbody><tr><td>getFullYear()</td><td>获取当年</td><td>dObj.getFullYear()</td></tr><tr><td>getMonth()</td><td>获取当月(0-11)</td><td>dObj.getMonth()</td></tr><tr><td>getDate()</td><td>获取当天日期</td><td>dObj.getDate()</td></tr><tr><td>getDay()</td><td>获取星期几(周日 0 到周六 6)</td><td>dobj.getDay()</td></tr><tr><td>getHours()</td><td>获取当前小时</td><td>dobj.getHours()</td></tr><tr><td>getMinutes()</td><td>获取当前分钟</td><td>dObj.getMinutes()</td></tr><tr><td>getSeconds()</td><td>获取当前秒钟</td><td>dObj.getSeconds()</td></tr></tbody></table><h4 id="_4-4-获取日期的总的毫秒形式-时间戳" tabindex="-1">4.4 获取日期的总的毫秒形式 (时间戳) <a class="header-anchor" href="#_4-4-获取日期的总的毫秒形式-时间戳" aria-label="Permalink to &quot;4.4 获取日期的总的毫秒形式 (时间戳)&quot;">​</a></h4><p>Date 对象是基于 1970 年 1 月 1 日（世界标准时间）起的毫秒数</p><p>为什么计算机起始时间从 1970 年开始? 我们经常利用总的毫秒数来计算时间，因为它更精确</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 实例化Date对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> now </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1. 用于获取对象的原始值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">valueOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2. 简单写可以这么做</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> now </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3. HTML5中提供的方法，有兼容性问题</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> now </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p><strong>小结代码：</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 生成系统当前时间 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//创建时间对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> yy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getFullYear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//年</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMonth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">padStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//月(padStart:字符串不满2位数,开头补全&#39;0&#39;)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">padStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//日</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hh</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getHours</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">padStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//小时</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMinutes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">padStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//分钟</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ss</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSeconds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">padStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//秒钟</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">yy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}-\${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}-\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ss</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //返回时间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 转换时间戳 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getTimes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(time)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // const date1 = Date.now()//H5当前时间戳</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // console.log(date1)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> date</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 格式化时间 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> formatTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 格式化的时间戳必须是Number型*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(time) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//创建时间对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> yy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getFullYear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//年</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMonth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">padStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//月</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">padStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//日</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hh</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getHours</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">padStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//小时</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMinutes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">padStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//分钟</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ss</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSeconds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">padStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//秒钟</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">yy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}-\${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}-\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ss</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //返回时间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 倒计时 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> countDown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nowTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 当前时间戳</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(time) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 结束时间戳</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> times </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (endTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nowTime) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 剩余时间总的秒数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parseInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(times </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">padStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 天</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hh </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parseInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(((times </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">padStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//时</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parseInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(((times </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">padStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 分</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ss </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parseInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((times </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">padStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 当前的秒</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}天\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}时\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}分\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ss</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}秒\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //返回时间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;系统当前时间:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;时间戳:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getTimes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;转换时间戳:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getTimes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2021-03-01 08:00:00&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;格式化指定时间:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">formatTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getTimes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2021-03-01 08:00:00&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;格式化当前时间:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">formatTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getTimes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;倒计时:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">countDown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2021-02-13 08:00:00&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><h3 id="_5-数组对象" tabindex="-1">5. 数组对象 <a class="header-anchor" href="#_5-数组对象" aria-label="Permalink to &quot;5. 数组对象&quot;">​</a></h3><h4 id="_5-1-数组对象的创建" tabindex="-1">5.1 数组对象的创建 <a class="header-anchor" href="#_5-1-数组对象的创建" aria-label="Permalink to &quot;5.1 数组对象的创建&quot;">​</a></h4><p>创建数组对象的两种方式</p><ul><li>字面量方式</li><li>new Array()</li></ul><h4 id="_5-2-检测是否为数组" tabindex="-1">5.2 检测是否为数组 <a class="header-anchor" href="#_5-2-检测是否为数组" aria-label="Permalink to &quot;5.2 检测是否为数组&quot;">​</a></h4><ul><li>instanceof 运算符，可以判断一个对象是否属于某种类型</li><li>Array.isArray()用于判断一个对象是否为数组，isArray() 是 HTML5 中提供的方法</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">23</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span></code></pre></div><h4 id="_5-3-添加删除数组元素的方法" tabindex="-1">5.3 添加删除数组元素的方法 <a class="header-anchor" href="#_5-3-添加删除数组元素的方法" aria-label="Permalink to &quot;5.3 添加删除数组元素的方法&quot;">​</a></h4><table tabindex="0"><thead><tr><th>方法名</th><th>说明</th><th>返回值</th></tr></thead><tbody><tr><td>push(参数 1....)</td><td>末尾添加一个或多个元素，注意修改原数组</td><td>并返回新的长度</td></tr><tr><td>pop()</td><td>删除数组最后一个元素，把数组长度减 1 无参数、修改原数组</td><td>返回它删除的元素的值</td></tr><tr><td>unshift(参数 1...)</td><td>向数组的开头添加一个或更多元素，注意修改原数组</td><td>并返回新的长度</td></tr><tr><td>shift()</td><td>删除数组的第一个元素，数组长度减 1 无参数、修改原数组</td><td>返回它删除的元素的值</td></tr><tr><td>splice(index,num)</td><td>删除指定元素：index 第几个开始，num 为删除个数</td><td>返回它删除的元素的值</td></tr></tbody></table><h4 id="_5-4-数组排序" tabindex="-1">5.4 数组排序 <a class="header-anchor" href="#_5-4-数组排序" aria-label="Permalink to &quot;5.4 数组排序&quot;">​</a></h4><table tabindex="0"><thead><tr><th>方法名</th><th>说明</th><th>是否修改原数组</th></tr></thead><tbody><tr><td>reverse()</td><td>颠倒数组中元素的顺序,无参数</td><td>该方法会改变原来的数组返回新数组</td></tr><tr><td>sort()</td><td>对数组的元素进行排序</td><td>该方法会改变原来的数组返回新数组</td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 降a序</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // return a - b; // 升序</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr)</span></span></code></pre></div><h4 id="_5-5-数组索引方法" tabindex="-1">5.5 数组索引方法 <a class="header-anchor" href="#_5-5-数组索引方法" aria-label="Permalink to &quot;5.5 数组索引方法&quot;">​</a></h4><table tabindex="0"><thead><tr><th>方法名</th><th>说明</th><th>返回值</th></tr></thead><tbody><tr><td>indexOf()</td><td>数组中查找给定元素的第一个索引</td><td>如果存在返回索引号如果不存在，则返回-1。</td></tr><tr><td>lastIndexOf()</td><td>在数组中的最后一个的索引,</td><td>如果存在返回索引号如果不存在，则返回-1。</td></tr></tbody></table><p><strong>封装数组去重复</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 封装一个 去重的函数 unique 独一无二的</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> unique</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newArr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (newArr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">indexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr[i]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      newArr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr[i])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newArr</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="_5-6-数组转换为字符串" tabindex="-1">5.6 数组转换为字符串 <a class="header-anchor" href="#_5-6-数组转换为字符串" aria-label="Permalink to &quot;5.6 数组转换为字符串&quot;">​</a></h4><table tabindex="0"><thead><tr><th>方法名</th><th>说明</th><th>返回值</th></tr></thead><tbody><tr><td>toString()</td><td>把数组转换成字符串，逗号分隔每一项</td><td>返回一个字符串</td></tr><tr><td>join(&quot;分隔符&#39;)</td><td>方法用于把数组中的所有元素转换为一个字符串。</td><td>返回一个字符串</td></tr></tbody></table><h4 id="_5-7-其他方法" tabindex="-1">5.7 其他方法 <a class="header-anchor" href="#_5-7-其他方法" aria-label="Permalink to &quot;5.7 其他方法&quot;">​</a></h4><table tabindex="0"><thead><tr><th>方法名</th><th>说明</th><th>返回值</th></tr></thead><tbody><tr><td>concat()</td><td>连接两个或多个数组不影响原数组</td><td>返回一个新的数组</td></tr><tr><td>slice()</td><td>数组截取 slice(begin, end),包括 begin 不包括 end,不影响原数组</td><td>返回被截取项目的新数组</td></tr><tr><td>splice()</td><td>数组删除 splice(第几个开始,要删除个数)</td><td>返回它删除的元素的值，这个会影响原数组</td></tr></tbody></table><p>slice() 和 splice() 目的基本相同，建议同学们重点看下 splice()</p><h3 id="_6-字符串对象" tabindex="-1">6.字符串对象 <a class="header-anchor" href="#_6-字符串对象" aria-label="Permalink to &quot;6.字符串对象&quot;">​</a></h3><h4 id="_6-1-基本包装类型" tabindex="-1">6.1 基本包装类型 <a class="header-anchor" href="#_6-1-基本包装类型" aria-label="Permalink to &quot;6.1 基本包装类型&quot;">​</a></h4><p>为了方便操作基本数据类型，JavaScript 还提供了三个特殊的引用类型：String、Number 和 Boolean。 基本包装类型就是把简单数据类型包装成为复杂数据类型，这样基本数据类型就有了属性和方法。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 下面代码有什么问题？</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;andy&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>按道理基本数据类型是没有属性和方法的，而对象才有属性和方法，但上面代码却可以执行，这是因为 js 会把 基本数据类型包装为复杂数据类型，其执行过程如下 ：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1. 生成临时变量，把简单类型包装为复杂数据类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> temp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;andy&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2. 赋值给我们声明的字符变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> temp</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3. 销毁临时变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">temp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span></code></pre></div><h4 id="_6-2-字符串的不可变" tabindex="-1">6.2 字符串的不可变 <a class="header-anchor" href="#_6-2-字符串的不可变" aria-label="Permalink to &quot;6.2 字符串的不可变&quot;">​</a></h4><p>指的是里面的值不可变，虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;abc&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;hello&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 当重新给 str 赋值的时候，常量&#39;abc&#39;不会被修改，依然在内存中</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 由于字符串的不可变，在大量拼接字符串的时候会有效率问题</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这个结果需要花费大量时间来显示，因为需要不断的开辟新的空间</span></span></code></pre></div><h4 id="_6-3-根据字符返回位" tabindex="-1">6.3 根据字符返回位 <a class="header-anchor" href="#_6-3-根据字符返回位" aria-label="Permalink to &quot;6.3 根据字符返回位&quot;">​</a></h4><p>字符串所有的方法，都不会修改字符串本身(字符串是不可变的)，操作完成会返回一个新的字符串。</p><table tabindex="0"><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>indexOf(&#39;要查找的字符，[开始的位置])</td><td>返回指定内容在元字符串中的位置，如果找不到就返回-1，开始的位置是 index 索引号</td></tr><tr><td>lastIndexOf()</td><td>从后往前找，只找第一个匹配的</td></tr></tbody></table><h4 id="_6-4-根据位置返回字符-重点" tabindex="-1">6.4 根据位置返回字符（重点） <a class="header-anchor" href="#_6-4-根据位置返回字符-重点" aria-label="Permalink to &quot;6.4 根据位置返回字符（重点）&quot;">​</a></h4><table tabindex="0"><thead><tr><th>方法名</th><th>说明</th><th>使用</th></tr></thead><tbody><tr><td>charAt(index)</td><td>返回指定位置的字符(index 字符串的索引号)</td><td>str.charAt(O)</td></tr><tr><td>charCodeAt(index)</td><td>获取指定位置处字符的 ASCII 码(index 索引号)</td><td>str.charCodeAt(O)</td></tr><tr><td>str[index]</td><td>获取指定位置处字符</td><td>HTML5，IE8+支持和 charAt()等效</td></tr></tbody></table><h4 id="_6-5-字符串操作方法-重点" tabindex="-1">6.5 字符串操作方法（重点） <a class="header-anchor" href="#_6-5-字符串操作方法-重点" aria-label="Permalink to &quot;6.5 字符串操作方法（重点）&quot;">​</a></h4><table tabindex="0"><thead><tr><th>方法名</th><th>说明</th><th>返回值</th></tr></thead><tbody><tr><td>concat(str1,str2,str3...)</td><td>用于连接两个或多个字符串。拼接字符串，等效于+，+更常用</td><td>返回新字符串</td></tr><tr><td>substr(start,length)</td><td>从 start 位置开始, length 取的个数重点记住这个</td><td>返回截取部分，不影响原字符串</td></tr><tr><td>slice(start, end)</td><td>从 start 位置开始，截取到 end 位置，end 取不到(他们俩都是索引号）</td><td>返回截取部分，不影响原字符串</td></tr><tr><td>substring(start, end)</td><td>基本和 slice 相同，但是不接受负值</td><td>返回截取部分，不影响原字符串</td></tr></tbody></table><h4 id="_6-6replace-方法" tabindex="-1">6.6replace()方法 <a class="header-anchor" href="#_6-6replace-方法" aria-label="Permalink to &quot;6.6replace()方法&quot;">​</a></h4><p>replace() 方法用于在字符串中用一些字符替换另一些字符。 其使用格式如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(被替换的字符串， 要替换为的字符串);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//只替换第一个相同的字符</span></span></code></pre></div><h4 id="_6-7split-方法" tabindex="-1">6.7split()方法 <a class="header-anchor" href="#_6-7split-方法" aria-label="Permalink to &quot;6.7split()方法&quot;">​</a></h4><p>split()方法用于切分字符串，它可以将字符串切分为数组。在切分完毕之后，返回的是一个新数组。 例如下面代码：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a,b,c,d&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;,&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回的是一个数组 [a, b, c, d]</span></span></code></pre></div><h4 id="_6-8-其他方法" tabindex="-1">6.8 其他方法 <a class="header-anchor" href="#_6-8-其他方法" aria-label="Permalink to &quot;6.8 其他方法&quot;">​</a></h4><ul><li>toUpperCase() //转换大写</li><li>toLowerCase() //转换小写</li></ul><p>示例：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str8 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;chenzhifeng&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str9 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str8.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toUpperCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//转换为大写</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str10 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str9.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toLowerCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//转换为小写</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str8, str9, str10)</span></span></code></pre></div><h2 id="_10-javascript-简单类型与复杂类型" tabindex="-1">10.JavaScript 简单类型与复杂类型 <a class="header-anchor" href="#_10-javascript-简单类型与复杂类型" aria-label="Permalink to &quot;10.JavaScript 简单类型与复杂类型&quot;">​</a></h2><h3 id="_1-简单类型与复杂类型" tabindex="-1">1.简单类型与复杂类型 <a class="header-anchor" href="#_1-简单类型与复杂类型" aria-label="Permalink to &quot;1.简单类型与复杂类型&quot;">​</a></h3><p>简单类型又叫做基本数据类型或者<strong>值类型</strong>，复杂类型又叫做<strong>引用类型</strong>。</p><ul><li>值类型：简单数据类型/基本数据类型，在存储时变量中存储的是值本身，因此叫做值类型 string ，number，boolean，undefined，null</li><li>引用类型：复杂数据类型，在存储时变量中存储的仅仅是地址（引用），因此叫做引用数据类型 通过 new 关键字创建的对象（系统对象、自定义对象），如 Object、Array、Date 等</li></ul><h3 id="_2-堆和栈" tabindex="-1">2.堆和栈 <a class="header-anchor" href="#_2-堆和栈" aria-label="Permalink to &quot;2.堆和栈&quot;">​</a></h3><p>堆栈空间分配区别：</p><ol><li><p>栈（操作系统）：由操作系统自动分配释放存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的栈；</p><p><strong>简单数据类型存放到栈里面</strong></p></li><li><p>堆（操作系统）：存储复杂类型(对象)，一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收。</p><p><strong>复杂数据类型存放到堆里面</strong></p></li></ol><p><strong>注意</strong>：JavaScript 中没有堆栈的概念，通过堆栈的方式，可以让大家更容易理解代码的一些执行方式，便于将来学习其他语言。</p><h3 id="_3-简单类型的内存分配" tabindex="-1">3.简单类型的内存分配 <a class="header-anchor" href="#_3-简单类型的内存分配" aria-label="Permalink to &quot;3.简单类型的内存分配&quot;">​</a></h3><ul><li>值类型（简单数据类型）： string ，number，boolean，undefined，null</li><li>值类型变量的数据直接存放在变量（栈空间）中</li></ul><h3 id="_4-复杂类型的内存分配" tabindex="-1">4. 复杂类型的内存分配 <a class="header-anchor" href="#_4-复杂类型的内存分配" aria-label="Permalink to &quot;4. 复杂类型的内存分配&quot;">​</a></h3><ul><li>引用类型（复杂数据类型）：通过 new 关键字创建的对象（系统对象、自定义对象），如 Object、Array、Date 等</li><li>引用类型变量（栈空间）里存放的是地址，真正的对象实例存放在堆空间中</li></ul><h3 id="_5-简单类型传参" tabindex="-1">5.简单类型传参 <a class="header-anchor" href="#_5-简单类型传参" aria-label="Permalink to &quot;5.简单类型传参&quot;">​</a></h3><p>函数的形参也可以看做是一个变量，当我们把一个值类型变量作为参数传给函数的形参时，其实是把变量在栈 空间里的值复制了一份给形参，那么在方法内部对形参做任何修改，都不会影响到的外部变量。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span></code></pre></div><h3 id="_6-复杂类型传参" tabindex="-1">6. 复杂类型传参 <a class="header-anchor" href="#_6-复杂类型传参" aria-label="Permalink to &quot;6. 复杂类型传参&quot;">​</a></h3><p>函数的形参也可以看做是一个变量，当我们把引用类型变量传给形参时，其实是把变量在栈空间里保存的堆地 址复制给了形参，形参和实参其实保存的是同一个堆地址，所以操作的是同一个对象。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> f1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // x = p</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x.name) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2. 这个输出什么 ?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  x.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;张学友&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x.name) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3. 这个输出什么 ?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;刘德华&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p.name) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1. 这个输出什么 ?</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">f1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p.name) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4. 这个输出什么 ?</span></span></code></pre></div>`,397),k=[l];function p(e,r,d,E,g,y){return a(),i("div",null,k)}const F=s(h,[["render",p]]);export{c as __pageData,F as default};
