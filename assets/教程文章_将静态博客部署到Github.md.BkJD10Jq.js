import{_ as i,q as s,p as a,aE as t}from"./chunks/framework.-H45_L2h.js";const h="/assets/image-20240429155231847.rHf8ai72.png",n="/assets/image-20240429161132822.B_5jF0sk.png",p="/assets/image-20240429172330958.7MoJ3aI1.png",_=JSON.parse('{"title":"将静态博客部署到 Github","description":"","frontmatter":{"title":"将静态博客部署到 Github","date":"2024-04-29T15:48:45.000Z","categories":["教程文章"],"tags":["博客部署"],"hot":3},"headers":[],"relativePath":"教程文章/将静态博客部署到Github.md","filePath":"教程文章/将静态博客部署到Github.md","lastUpdated":1723022138000}'),e={name:"教程文章/将静态博客部署到Github.md"},l=t('<h1 id="将静态博客部署到-github" tabindex="-1">将静态博客部署到 Github <a class="header-anchor" href="#将静态博客部署到-github" aria-label="Permalink to &quot;将静态博客部署到 Github&quot;">​</a></h1><h3 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h3><blockquote><p>将 vuepress 打包并部署到 Github Pages.</p><p>GitHub 相比与 Gitee，只要在 GitHub 配置第一次后，下次更新博客推送不需要前往 GitHub 重新部署更新</p><p>GitHub action 会监听 pages 分支，有新内容推送上来会自动构建部署</p></blockquote><h3 id="部署到-github-根路径下" tabindex="-1">部署到 Github 根路径下 <a class="header-anchor" href="#部署到-github-根路径下" aria-label="Permalink to &quot;部署到 Github 根路径下&quot;">​</a></h3><ol><li><p>创建仓库，仓库名必须是【用户名.github.io】</p><p><img src="'+h+`" alt="image-20240429155231847" loading="lazy"></p></li><li><p>修改 vuepress 项目配置，将 base 的值修改成：<code>/</code></p></li><li><p>然后执行以下命令行：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 打包构建镜像文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 进入打包好的文件目录</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dist</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 初始化本地git仓库</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -A</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;初始化项目&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#关联远程仓库[即刚刚创建的GitHub仓库]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git@github.com:kimshift/kimshift.github.io.git</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pages</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#将dist镜像文件推送至Github仓库---pages分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;pages&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span></span></code></pre></div></li><li><p>打包且成功推送到 github 后，前往 GitHub 仓库设置 pages 部署</p><p><img src="`+n+'" alt="image-20240429161132822" loading="lazy"></p></li><li><p>可前往 GitHub 仓库的 action 查看部署结果：<a href="https://github.com/kimshift/kimshift.github.io/actions" target="_blank" rel="noreferrer">https://github.com/kimshift/kimshift.github.io/actions</a></p><p><img src="'+p+'" alt="image-20240429172330958" loading="lazy"></p></li><li><p>部署完成后，即可正常访问：<a href="https://kimshift.github.io" target="_blank" rel="noreferrer">https://kimshift.github.io</a></p></li></ol>',5),k=[l];function r(g,o,d,F,c,u){return a(),s("div",null,k)}const m=i(e,[["render",r]]);export{_ as __pageData,m as default};
