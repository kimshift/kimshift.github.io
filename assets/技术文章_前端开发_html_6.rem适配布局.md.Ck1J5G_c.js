import{_ as s,q as i,p as a,aE as l}from"./chunks/framework.-H45_L2h.js";const c=JSON.parse('{"title":"6.rem适配布局","description":"","frontmatter":{"title":"6.rem适配布局","date":"2023-06-02T09:59:35.000Z","categories":["前端开发"],"tags":["html"],"prev":"5.flex弹性布局","next":"7.响应式布局"},"headers":[],"relativePath":"技术文章/前端开发/html/6.rem适配布局.md","filePath":"技术文章/前端开发/html/6.rem适配布局.md","lastUpdated":1723096133000}'),t={name:"技术文章/前端开发/html/6.rem适配布局.md"},n=l(`<h1 id="_6-rem-适配布局" tabindex="-1">6.rem 适配布局 <a class="header-anchor" href="#_6-rem-适配布局" aria-label="Permalink to &quot;6.rem 适配布局&quot;">​</a></h1><h2 id="_1-rem-基础" tabindex="-1">1.rem 基础 <a class="header-anchor" href="#_1-rem-基础" aria-label="Permalink to &quot;1.rem 基础&quot;">​</a></h2><p><strong>rem 单位</strong></p><ul><li>rem (root em)是一个相对单位，类似于 em , em 是父元素字体大小。.</li><li>不同的是<strong>rem</strong>的基准是相对于 html 元素的<strong>字体大小</strong>。</li><li>比如，根元素( html )设置 font-size=12px;非根元素设置 width:2rem;则换成 px 表示就是 24px。</li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">rem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">rem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">purple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /*1. em相对于父元素的字体大小来说的*/</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /*width: 10em;height: 10em;*/</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 2. rem相对于html元素字体大小来说的*/</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">rem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">rem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 3.rem的优点就是可以通过修改html里面的文字大小来改变页面中元素的大小可以整体控制*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_2-媒体查询" tabindex="-1">2. 媒体查询 <a class="header-anchor" href="#_2-媒体查询" aria-label="Permalink to &quot;2. 媒体查询&quot;">​</a></h2><h3 id="_2-1-什么是媒体查询" tabindex="-1">2.1 什么是媒体查询 <a class="header-anchor" href="#_2-1-什么是媒体查询" aria-label="Permalink to &quot;2.1 什么是媒体查询&quot;">​</a></h3><p>媒体查询(<strong>Media Query</strong>）是 CSS3 新语法。</p><ul><li>使用@media 查询，可以针对不同的媒体类型定义不同的样式</li><li><strong>@media 可以针对不同的屏幕尺寸设置不同的样式</strong></li><li>当你重置浏览器大尔的过程中，页面也会根据浏览器的宽度和高度重新渲染页面</li><li>目前针对很多苹果手机、Android 手机，平板等设备都用得到多媒体查询</li></ul><h3 id="_2-2-语法规范" tabindex="-1">2.2 语法规范 <a class="header-anchor" href="#_2-2-语法规范" aria-label="Permalink to &quot;2.2 语法规范&quot;">​</a></h3><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">media mediatype </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|not|only (media feature){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    CSS-Code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>用@media 开头 注意@符号</li><li>mediatype 媒体类型</li><li>关键字 and not only</li><li>media feature 媒体特性必须有小括号包含</li></ul><h4 id="_2-2-1-mediatype-查询类型" tabindex="-1">2.2.1 mediatype 查询类型 <a class="header-anchor" href="#_2-2-1-mediatype-查询类型" aria-label="Permalink to &quot;2.2.1 mediatype 查询类型&quot;">​</a></h4><p>将不同的终端设备划分成不同的类型，称为媒体类型</p><table tabindex="0"><thead><tr><th>值</th><th>解释说明</th></tr></thead><tbody><tr><td>all</td><td>用于所有设备</td></tr><tr><td>print</td><td>用于打印机和打印预览</td></tr><tr><td><strong>screen</strong></td><td><strong>用于电脑屏幕，平板电脑，智能手机等</strong></td></tr></tbody></table><h4 id="_2-2-2-关键字" tabindex="-1">2.2.2 关键字 <a class="header-anchor" href="#_2-2-2-关键字" aria-label="Permalink to &quot;2.2.2 关键字&quot;">​</a></h4><p>关键字将媒体类型或多个媒体特性连接到一起做为媒体查询的条件。</p><ul><li>and：可以将多个媒体特性连接到一起，相当于“且”的意思。</li><li>not：排除某个媒体类型，相当于“非”的意思，可以省略。</li><li>only：指定某个特定的媒体类型，可以省略。</li></ul><h4 id="_2-2-3-媒体特性" tabindex="-1">2.2.3 媒体特性 <a class="header-anchor" href="#_2-2-3-媒体特性" aria-label="Permalink to &quot;2.2.3 媒体特性&quot;">​</a></h4><p>每种媒体类型都具体各自不同的特性，根据不同媒体类型的媒体特性设置不同的展示风格。我们暂且了解三个。注意他们要加小括号包含</p><table tabindex="0"><thead><tr><th>值</th><th>解释说明</th></tr></thead><tbody><tr><td>width</td><td>定义输出设备中页面可见区域的宽度</td></tr><tr><td>min-width</td><td>定义输出设备中页面最小可见区域宽度</td></tr><tr><td>max-width</td><td>定义输出设备中页面最大可见区域宽度</td></tr></tbody></table><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 这句话的意思就是： 在我们屏幕上 并且 最大的宽度是 800像素 设置我们想要的样式 */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* max-width 小于等于800 */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 媒体查询可以根据不同的屏幕尺寸在改变不同的样式 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@media</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> screen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">max-width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">800</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@media</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> screen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">max-width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">purple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_2-3-媒体查询-rem-实现元素动态大小变化" tabindex="-1">2.3 媒体查询+rem 实现元素动态大小变化 <a class="header-anchor" href="#_2-3-媒体查询-rem-实现元素动态大小变化" aria-label="Permalink to &quot;2.3 媒体查询+rem 实现元素动态大小变化&quot;">​</a></h3><ul><li>rem 单位是跟着 html 来走的，有了 rem 页面元素可以设置不同大小尺寸</li><li>媒体查询可以根据同设备宽度来修改样式</li><li>媒体查询+rem 就可以实现不同设备宽度，实现页面元素大小的动态变化</li></ul><h3 id="_2-4-引入资源-理解" tabindex="-1">2.4 引入资源（理解) <a class="header-anchor" href="#_2-4-引入资源-理解" aria-label="Permalink to &quot;2.4 引入资源（理解)&quot;">​</a></h3><p>当样式比较繁多的时候，我们可以针对不同的媒体使用不同 stylesheets (样式表)。</p><p>原理，就是直接在 link 中判断设备的尺寸，然后引用不同的 css 文件。 1.语法规范</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stylesheet&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mystylesheet.css media=&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mediatype</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> and|not|only</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> (media</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> feature)</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="_3-less-基础" tabindex="-1">3.Less 基础 <a class="header-anchor" href="#_3-less-基础" aria-label="Permalink to &quot;3.Less 基础&quot;">​</a></h2><h3 id="_3-1-维护-css-的弊端" tabindex="-1">3.1 维护 css 的弊端 <a class="header-anchor" href="#_3-1-维护-css-的弊端" aria-label="Permalink to &quot;3.1 维护 css 的弊端&quot;">​</a></h3><p>CSS 是一门非程序式语言，没有变量、函数、SCOPE(作用域）等概念。</p><ul><li>CSS 需要书写大量看似没有逻辑的代码，CSS 冗余度是比较高的。不方便维护及扩展，不利于复用。</li><li>CSS 没有很好的计算能力</li><li>非前端开发工程师来讲，往往会因为缺少 CSS 编写经验而很难写出组织良好且易于维护的 CSS 代码项目。</li></ul><h3 id="_3-2-less-介绍" tabindex="-1">3.2 Less 介绍 <a class="header-anchor" href="#_3-2-less-介绍" aria-label="Permalink to &quot;3.2 Less 介绍&quot;">​</a></h3><blockquote><p>Less ( Leaner Style Sheets 的缩写）是一门 CSS 扩展语言，也成为 CSS 预处理器。</p><p>做为 CSS 的一种形式的扩展，它并没有减少 CSS 的功能，而是在现有的 CSS 语法上，为 CSS 加入程序式语言的特性。</p><p>它在 CSS 的语法基础之上，引入了变量，Mixin(混入），运算以及函数等功能，大大简化了 CSS 的编写，并且降低了 CSS 的维护成本，就像它的名称所说的那样，Less 可以让我们用更少的代码做更多的事情。</p></blockquote><p>Less 中文网址: <a href="http://lesscss.cn/" target="_blank" rel="noreferrer">http://lesscss.cn/</a> 常见的 CSS 预处理器:Sass、Less、Stylus</p><h3 id="_3-3-less-使用" tabindex="-1">3.3 Less 使用 <a class="header-anchor" href="#_3-3-less-使用" aria-label="Permalink to &quot;3.3 Less 使用&quot;">​</a></h3><p>我们首先新建一个后缀名为 less 的文件，在这个 less 文件里面书写 less 语句。</p><ul><li>Less 变量</li><li>Less 编译</li><li>Less 嵌套</li><li>Less 运算</li></ul><h3 id="_3-4-less-变量" tabindex="-1">3.4 Less 变量 <a class="header-anchor" href="#_3-4-less-变量" aria-label="Permalink to &quot;3.4 Less 变量&quot;">​</a></h3><p>变量是指没有固定的值，可以改变的。因为我们 CSS 中的一些颜色和数值等经常使用。</p><div class="language-less vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">less</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">变量名</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">值</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><strong>变量命名规范</strong></p><ul><li>必须有@为前缀</li><li>不能包含特殊字符</li><li>不能以数字开头</li><li>大小写敏感</li></ul><h3 id="_3-5-less-编译" tabindex="-1">3.5 Less 编译 <a class="header-anchor" href="#_3-5-less-编译" aria-label="Permalink to &quot;3.5 Less 编译&quot;">​</a></h3><blockquote><p>本质上，Less 包含一套自定义的语法及一个解析器，用户根据这些语法定义自己的样式规则，这些规则最终会通过解析器，编译生成对应的 CSS 文件。所以，我们需要把我们的 less 文件，编译生成为 css 文件，这样我们的 html 页面才能使用。</p></blockquote><p><strong>vscode Less 插件 ★</strong> Easy LESS 插件用来把 less 文件编译为 css 文件 安装完毕插件，重新加载下 vscode。只要保存一下 Less 文件，会自动生成 CSS 文件。</p><h3 id="_3-6-less-嵌套" tabindex="-1">3.6 Less 嵌套 <a class="header-anchor" href="#_3-6-less-嵌套" aria-label="Permalink to &quot;3.6 Less 嵌套&quot;">​</a></h3><p>我们经常用到选择器的嵌套</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">#header</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> .logo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Less 嵌套写法</p><div class="language-less vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">less</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">#header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  .logo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果遇见（交集|伪类|伪元素选择器） 内层选择器的前面没有&amp;符号，则它被解析为父选择器的后代;如果有&amp;符号，它就被解析为父元素自身或父元素的伪类。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:hover</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Less 嵌套写法</strong></p><div class="language-less vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">less</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hover</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_3-7-less-运算-★" tabindex="-1">3.7 Less 运算 ★ <a class="header-anchor" href="#_3-7-less-运算-★" aria-label="Permalink to &quot;3.7 Less 运算 ★&quot;">​</a></h3><p>任何数字、颜色或者变量都可以参与运算。就是 Less 提供了加(+)、减(-)、乘(*)、除(/ )算术运算。</p><div class="language-less vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">less</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*Less里面写*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">witdh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  border</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: @</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">witdh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solid</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*生成的css*/</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  border</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solid</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*Less甚至还可以这样*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">width: (@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">width</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 2;</span></span></code></pre></div><p><strong>注意:</strong></p><ul><li>乘号(<strong>*</strong>)和除号(<strong>/</strong>)的写法</li><li><strong>运算符中间左右有个空格隔开 1px + 5</strong></li><li>对于两个不同的单位的值之间的运算，运算结果的值取第一个值的单位</li><li>如果两个值之间只有一个值有单位，则运算结果就取该单位</li></ul><h2 id="_4-rem-适配方案" tabindex="-1">4.rem 适配方案 <a class="header-anchor" href="#_4-rem-适配方案" aria-label="Permalink to &quot;4.rem 适配方案&quot;">​</a></h2><p><strong>rem 适配方案</strong></p><ol><li>让一些不能等比自适应的元素，达到当设备尺寸发生改变的时候，等比例适配当前设备。</li><li>使用媒体查询根据不同设备按比例设置 html 的字体大小，然后页面元素使用 rem 做尺寸单位，当 html 字体大小变化元素尺寸也会发生变化，从而达到等比缩放的适配。</li></ol><h3 id="_4-1-rem-实际开发适配方案" tabindex="-1">4.1 rem 实际开发适配方案 <a class="header-anchor" href="#_4-1-rem-实际开发适配方案" aria-label="Permalink to &quot;4.1 rem 实际开发适配方案&quot;">​</a></h3><ol><li>按照设计稿与设备宽度的比例，动态计算并设置 html 根标签的 font-size 大小;（媒体查询)</li><li>CSS 中，设计稿元素的宽、高、相对位置等取值，按照同等比例换算为 rem 为单位的值;</li></ol><h3 id="_4-2-rem-适配方案技术使用-市场主流" tabindex="-1">4.2 rem 适配方案技术使用（市场主流) <a class="header-anchor" href="#_4-2-rem-适配方案技术使用-市场主流" aria-label="Permalink to &quot;4.2 rem 适配方案技术使用（市场主流)&quot;">​</a></h3><ol><li><p>技术方案 1</p><ul><li>less</li><li>媒体查询</li><li>rem</li></ul></li><li><p>技术方案 2（推荐)</p><ul><li>flexible.js</li><li>rem</li></ul></li></ol><p>总结:</p><ol><li>两种方案现在都存在。</li><li>方案 2 更简单，现阶段大家无需了解里面的 js 代码。</li></ol><h3 id="_4-3-rem-实际开发适配方案-1" tabindex="-1">4.3 rem 实际开发适配方案 1 <a class="header-anchor" href="#_4-3-rem-实际开发适配方案-1" aria-label="Permalink to &quot;4.3 rem 实际开发适配方案 1&quot;">​</a></h3><p>rem ＋媒体查询+less 技术</p><h4 id="_4-3-1-设计稿常见尺寸宽度" tabindex="-1">4.3.1 设计稿常见尺寸宽度 <a class="header-anchor" href="#_4-3-1-设计稿常见尺寸宽度" aria-label="Permalink to &quot;4.3.1 设计稿常见尺寸宽度&quot;">​</a></h4><table tabindex="0"><thead><tr><th>设备</th><th>常见宽度</th></tr></thead><tbody><tr><td>iphone 4.5</td><td>640px</td></tr><tr><td>iphone 678</td><td>750px</td></tr><tr><td>Android</td><td>常见 320px、360px、375px、384px、400px、414px、500px、720px<br>大部分 4.7~5 寸的安卓设备为 720px</td></tr></tbody></table><p>一般情况下，我们以一套或两套效果图适应大部分的屏幕，放弃极端屏或对其优雅降级，牺牲一些效果现在基本以 750 为准。</p><h4 id="_4-3-2-动态设置-html-标签-font-size-大小" tabindex="-1">4.3.2 动态设置 html 标签 font-size 大小 <a class="header-anchor" href="#_4-3-2-动态设置-html-标签-font-size-大小" aria-label="Permalink to &quot;4.3.2 动态设置 html 标签 font-size 大小&quot;">​</a></h4><ul><li>假设设计稿是 750px</li><li>假设我们把整个屏幕划分为 15 等份(划分标准不一可以是 20 份也可以是 10 等份）</li><li>每一份作为 html 字体大小，这里就是 50px</li><li>那么在 320px 设备的时候，字体大小为 320/15 就是 21.33px</li><li>用我们页面元素的大小除以不同的 html 字体大小会发现他们比例还是相同的</li><li>比如我们以 750 为标准设计稿</li><li>一个 100*100 像素的页面元素在 750 屏幕下，就是 100/50 转换为 rem 是 2rem * 2 rem 比例是 1 比 1</li><li>320 屏幕下，html 字体大小为 21.33 则 2rem = 42.66px 此时宽和高都是 42.66 但是宽和高的比例还是 1 比 1</li><li>但是已经能实现不同屏幕下页面元素盒子等比例缩放的效果</li></ul><h4 id="_4-3-3-元素大小取值方法" tabindex="-1">4.3.3 元素大小取值方法 <a class="header-anchor" href="#_4-3-3-元素大小取值方法" aria-label="Permalink to &quot;4.3.3 元素大小取值方法&quot;">​</a></h4><ul><li>最后的公式︰页面元素的 rem 值=页面元素值(px) / (屏幕宽度 │ 划分的份数)</li><li>屏幕宽度/划分的份数就是 html font-size 的大小或者:页面元素的 rem 值=页面元素值(px ) / html font-size 字体大小</li></ul><h3 id="_4-4-rem-适配方案-2" tabindex="-1">4.4 rem 适配方案 2 <a class="header-anchor" href="#_4-4-rem-适配方案-2" aria-label="Permalink to &quot;4.4 rem 适配方案 2&quot;">​</a></h3><h4 id="_4-4-1-简洁高效的-rem-适配方案-flexible-js" tabindex="-1">4.4.1 简洁高效的 rem 适配方案 flexible.js <a class="header-anchor" href="#_4-4-1-简洁高效的-rem-适配方案-flexible-js" aria-label="Permalink to &quot;4.4.1 简洁高效的 rem 适配方案 flexible.js&quot;">​</a></h4><ul><li>手机淘宝团队出的简洁高效移动端适配库</li><li>我们再也不需要在写不同屏幕的媒体查询，因为里面 js 做了处理</li><li>它的原理是把当前设备划分为 10 等份，但是不同设备下，比例还是一致的。</li><li>我们要做的，就是确定好我们当前设备的 html 文字大小就可以了</li><li>比如当前设计稿是 750px，那么我们只需要把 html 文字大小设置为 75px(750px/10)就可以</li><li>里面页面元素 rem 值:页面元素的 px 值/ 75</li><li>剩余的，让 flexible.js 来去算</li></ul><p>github 地址:<a href="https://github.com/amfe/lib-flexible" target="_blank" rel="noreferrer">https://github.com/amfe/lib-flexible</a></p><h2 id="_5-less-文件导入" tabindex="-1">5.less 文件导入 <a class="header-anchor" href="#_5-less-文件导入" aria-label="Permalink to &quot;5.less 文件导入&quot;">​</a></h2><p>将刚才设置好的 common.less 引入到 index.less 里面语法如下:</p><div class="language-less vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">less</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//在index.less 中导入common.less文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">import &quot;common&quot;</span></span></code></pre></div>`,85),e=[n];function h(p,k,r,d,E,o){return a(),i("div",null,e)}const y=s(t,[["render",h]]);export{c as __pageData,y as default};
