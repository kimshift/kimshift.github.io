import{_ as s,q as i,p as a,aE as t}from"./chunks/framework.-H45_L2h.js";const g=JSON.parse('{"title":"5.移动端特效","description":"","frontmatter":{"title":"5.移动端特效","date":"2023-06-02T10:59:04.000Z","categories":["前端开发"],"tags":["javascript","js基础"],"prev":"4.PC端网页特效","next":"6.本地存储"},"headers":[],"relativePath":"技术文章/前端开发/javascript/js基础/5.移动端特效.md","filePath":"技术文章/前端开发/javascript/js基础/5.移动端特效.md","lastUpdated":1723096133000}'),l={name:"技术文章/前端开发/javascript/js基础/5.移动端特效.md"},n=t(`<h1 id="_5-移动端特效" tabindex="-1">5.移动端特效 <a class="header-anchor" href="#_5-移动端特效" aria-label="Permalink to &quot;5.移动端特效&quot;">​</a></h1><h2 id="_1-触屏事件" tabindex="-1">1. 触屏事件 <a class="header-anchor" href="#_1-触屏事件" aria-label="Permalink to &quot;1. 触屏事件&quot;">​</a></h2><h3 id="_1-1-触屏事件概述" tabindex="-1">1.1 触屏事件概述 <a class="header-anchor" href="#_1-1-触屏事件概述" aria-label="Permalink to &quot;1.1 触屏事件概述&quot;">​</a></h3><p>移动端浏览器兼容性较好，我们不需要考虑以前 JS 的兼容性问题，可以放心的使用原生 JS 书写效果，但是移动 端也有自己独特的地方。比如<strong>触屏事件 touch</strong>（也称触摸事件），Android 和 IOS 都有。</p><p>touch 对象代表一个触摸点。触摸点可能是一根手指，也可能是一根触摸笔。触屏事件可响应用户手指（或触控 笔）对屏幕或者触控板操作。 常见的触屏事件如下：</p><table tabindex="0"><thead><tr><th>触屏 touch 事件</th><th>说明</th></tr></thead><tbody><tr><td>touchstart</td><td>手指触摸到一个 DOM 元素时触发</td></tr><tr><td>touchmove</td><td>手指在一个 DOM 元素上滑动时触发</td></tr><tr><td>touchend</td><td>手指从一个 DOM 元素上移开时触发</td></tr></tbody></table><h3 id="_1-2-触摸事件对象-touchevent" tabindex="-1">1.2 触摸事件对象（TouchEvent） <a class="header-anchor" href="#_1-2-触摸事件对象-touchevent" aria-label="Permalink to &quot;1.2 触摸事件对象（TouchEvent）&quot;">​</a></h3><p>TouchEvent 是一类描述手指在触摸平面（触摸屏、触摸板等）的状态变化的事件。这类事件用于描述一个或多 个触点，使开发者可以检测触点的移动，触点的增加和减少，等等</p><p>touchstart、touchmove、touchend 三个事件都会各自有事件对象。</p><p>触摸事件对象重点我们看三个常见对象列表：</p><table tabindex="0"><thead><tr><th>触摸列表</th><th>说明</th></tr></thead><tbody><tr><td>touches</td><td>正在触摸屏幕的所有手指的一个列表</td></tr><tr><td>targetTouches</td><td>正在触摸当前 DOM 元素上的手指的一个列表</td></tr><tr><td>changedTouches</td><td>手指状态发生了改变的列表，从无到有，从有到无变化</td></tr></tbody></table><p><strong>因为平时我们都是给元素注册触摸事件，所以重点记住 targetTocuhes</strong></p><h3 id="_1-3-移动端拖动元素" tabindex="-1">1.3 移动端拖动元素 <a class="header-anchor" href="#_1-3-移动端拖动元素" aria-label="Permalink to &quot;1.3 移动端拖动元素&quot;">​</a></h3><ol><li>touchstart、touchmove、touchend 可以实现拖动元素</li><li>但是拖动元素需要当前手指的坐标值 我们可以使用 targetTouches[0] 里面的 pageX 和 pageY</li><li>移动端拖动的原理： 手指移动中，计算出手指移动的距离。然后用盒子原来的位置 + 手指移动的距离</li><li>手指移动的距离： 手指滑动中的位置 减去 手指刚开始触摸的位置</li></ol><p>拖动元素三步曲：</p><ol><li>触摸元素 touchstart： 获取手指初始坐标，同时获得盒子原来的位置</li><li>移动手指 touchmove： 计算手指的滑动距离，并且移动盒子</li><li>离开手指 touchend</li></ol><p>注意： 手指移动也会触发滚动屏幕所以这里要阻止默认的屏幕滚动 e.preventDefault();</p><h2 id="_2-移动端常见特效" tabindex="-1">2. 移动端常见特效 <a class="header-anchor" href="#_2-移动端常见特效" aria-label="Permalink to &quot;2. 移动端常见特效&quot;">​</a></h2><h3 id="_2-1-classlist-属性" tabindex="-1">2.1 classList 属性 <a class="header-anchor" href="#_2-1-classlist-属性" aria-label="Permalink to &quot;2.1 classList 属性&quot;">​</a></h3><p>classList 属性是 HTML5 新增的一个属性，返回元素的类名。但是 ie10 以上版本支持。</p><p>该属性用于在元素中添加，移除及切换 CSS 类。有以下方法</p><p><strong>添加类</strong>： element.classList.add（’类名’）；</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> focus.classList.add(&#39;current&#39;);</span></span></code></pre></div><p><strong>移除类</strong>： element.classList.remove（’类名’）;</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>focus.classList.remove(&#39;current&#39;);</span></span></code></pre></div><p><strong>切换类</strong>： element.classList.toggle（’类名’）；</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>focus.classList.toggle(‘current’);</span></span></code></pre></div><p>注意以上方法里面，所有类名都不带点</p><h3 id="_2-2-click-延时解决方案" tabindex="-1">2.2 click 延时解决方案 <a class="header-anchor" href="#_2-2-click-延时解决方案" aria-label="Permalink to &quot;2.2 click 延时解决方案&quot;">​</a></h3><p>移动端 click 事件会有 300ms 的延时，原因是移动端屏幕双击会缩放(double tap to zoom) 页面。</p><p>解决方案：</p><ol><li>禁用缩放。 浏览器禁用默认的双击缩放行为并且去掉 300ms 的点击延迟。</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;meta name=&quot;viewport&quot; content=&quot;user-scalable=no&quot;&gt;</span></span></code></pre></div><ol start="2"><li>利用 touch 事件自己封装这个事件解决 300ms 延迟。</li></ol><p>原理就是：</p><ul><li>当我们手指触摸屏幕，记录当前触摸时间</li><li>当我们手指离开屏幕， 用离开的时间减去触摸的时间</li><li>如果时间小于 150ms，并且没有滑动过屏幕， 那么我们就定义为点击</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//封装tap，解决click 300ms 延时</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isMove </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> startTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 记录触摸时候的时间变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  obj.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;touchstart&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    startTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 记录触摸时间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  obj.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;touchmove&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    isMove </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 看看是否有滑动，有滑动算拖拽，不算点击</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  obj.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;touchend&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">isMove </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> startTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 150</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 如果手指触摸和离开时间小于150ms 算点击</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      callback </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 执行回调函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    isMove </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 取反 重置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    startTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//调用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(div, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 执行代码  */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><ol start="3"><li>使用插件。 fastclick 插件解决 300ms 延迟。</li></ol><h2 id="_3-移动端常用开发插件" tabindex="-1">3. 移动端常用开发插件 <a class="header-anchor" href="#_3-移动端常用开发插件" aria-label="Permalink to &quot;3. 移动端常用开发插件&quot;">​</a></h2><h3 id="_3-1-什么是插件" tabindex="-1">3.1 什么是插件 <a class="header-anchor" href="#_3-1-什么是插件" aria-label="Permalink to &quot;3.1 什么是插件&quot;">​</a></h3><p>移动端要求的是快速开发，所以我们经常会借助于一些插件来帮我完成操作，那么什么是插件呢？</p><p>JS 插件是 js 文件，它遵循一定规范编写，方便程序展示效果，拥有特定功能且方便调用。如轮播图和瀑布流插件。</p><p>特点：它一般是为了解决某个问题而专门存在，其功能单一，并且比较小。 我们以前写的 animate.js 也算一个最简单的插件</p><h3 id="_3-2-插件的使用" tabindex="-1">3.2 插件的使用 <a class="header-anchor" href="#_3-2-插件的使用" aria-label="Permalink to &quot;3.2 插件的使用&quot;">​</a></h3><ol><li>引入 js 插件文件。</li><li>按照规定语法使用。</li></ol><p>fastclick 插件解决 300ms 延迟。使用延时 GitHub 官网地址: <a href="https://github.com/ftlabs/fastclick" target="_blank" rel="noreferrer">https://github.com/ftlabs/fastclick</a></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;addEventListener&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;DOMContentLoaded&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      FastClick.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.body)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_3-3-swiper-插件的使用" tabindex="-1">3.3 Swiper 插件的使用 <a class="header-anchor" href="#_3-3-swiper-插件的使用" aria-label="Permalink to &quot;3.3 Swiper 插件的使用&quot;">​</a></h3><p>中文官网地址： <a href="https://www.swiper.com.cn/" target="_blank" rel="noreferrer">https://www.swiper.com.cn/</a></p><ol><li>引入插件相关文件。</li><li>按照规定语法使用</li></ol><h3 id="_3-4-其他移动端常见插件" tabindex="-1">3.4 其他移动端常见插件 <a class="header-anchor" href="#_3-4-其他移动端常见插件" aria-label="Permalink to &quot;3.4 其他移动端常见插件&quot;">​</a></h3><ul><li>superslide： <a href="http://www.superslide2.com/" target="_blank" rel="noreferrer">http://www.superslide2.com/</a></li><li>iscroll： <a href="https://github.com/cubiq/iscroll" target="_blank" rel="noreferrer">https://github.com/cubiq/iscroll</a></li></ul><h3 id="_3-5-插件的使用总结" tabindex="-1">3.5 插件的使用总结 <a class="header-anchor" href="#_3-5-插件的使用总结" aria-label="Permalink to &quot;3.5 插件的使用总结&quot;">​</a></h3><ol><li>确认插件实现的功能</li><li>去官网查看使用说明</li><li>下载插件</li><li>打开 demo 实例文件，查看需要引入的相关文件，并且引入</li><li>复制 demo 实例文件中的结构 html，样式 css 以及 js 代码</li></ol><h3 id="_3-6-练习-移动端视频插件-zy-media-js" tabindex="-1">3.6 练习-移动端视频插件 zy.media.js <a class="header-anchor" href="#_3-6-练习-移动端视频插件-zy-media-js" aria-label="Permalink to &quot;3.6 练习-移动端视频插件 zy.media.js&quot;">​</a></h3><ul><li>H5 给我们提供了 video 标签，但是浏览器的支持情况不同。</li><li>不同的视频格式文件，我们可以通过 source 解决。</li><li>但是外观样式，还有暂停，播放，全屏等功能我们只能自己写代码解决。</li><li>这个时候我们可以使用插件方式来制作。</li></ul><h2 id="_4-移动端常用开发框架" tabindex="-1">4. 移动端常用开发框架 <a class="header-anchor" href="#_4-移动端常用开发框架" aria-label="Permalink to &quot;4. 移动端常用开发框架&quot;">​</a></h2><h3 id="_4-1-框架概述" tabindex="-1">4.1 框架概述 <a class="header-anchor" href="#_4-1-框架概述" aria-label="Permalink to &quot;4.1 框架概述&quot;">​</a></h3><p><strong>框架</strong>，顾名思义就是一套架构，它会基于自身的特点向用户提供一套较为完整的解决方案。框架的控制权在框架 本身，使用者要按照框架所规定的某种规范进行开发。</p><p><strong>插件</strong>一般是为了解决某个问题而专门存在，其功能单一，并且比较小。</p><ul><li>前端<strong>常用的框架</strong>有 <strong>Bootstrap</strong>、<strong>Vue</strong>、<strong>Angular</strong>、<strong>React</strong> 等。既能开发 PC 端，也能开发移动端</li><li>前端<strong>常用的移动端插件</strong>有 <strong>swiper</strong>、<strong>superslide</strong>、<strong>iscroll</strong>等。</li><li>框架： 大而全，一整套解决方案</li><li>插件： 小而专一，某个功能的解决方案</li></ul><h3 id="_4-2-bootstrap" tabindex="-1">4.2 Bootstrap <a class="header-anchor" href="#_4-2-bootstrap" aria-label="Permalink to &quot;4.2 Bootstrap&quot;">​</a></h3><p>Bootstrap 是一个简洁、直观、强悍的前端开发框架，它让 web 开发更迅速、简单。</p><p>它能开发 PC 端，也能开发移动端</p><p>Bootstrap JS 插件使用步骤： .</p><ol><li>引入相关 js 文件</li><li>复制 HTML 结构</li><li>修改对应样式</li><li>修改相应 JS 参数</li></ol>`,66),e=[n];function h(p,k,r,d,o,c){return a(),i("div",null,e)}const u=s(l,[["render",h]]);export{g as __pageData,u as default};
