import{_ as s,q as e,p as i,aE as t}from"./chunks/framework.-H45_L2h.js";const a="/assets/image-20210213133249765.C-1--tbB.png",n="/assets/image-20210213143412945.Ba9pGt--.png",l="/assets/image-20210218001038773.C40PFnTq.png",v=JSON.parse('{"title":"2.Web APl简介","description":"","frontmatter":{"title":"2.Web APl简介","date":"2023-06-02T10:52:38.000Z","categories":["前端开发"],"tags":["javascript","js基础"],"prev":"1.javaScript入门","next":"3.BOM浏览器对象模型"},"headers":[],"relativePath":"技术文章/前端开发/javascript/js基础/2.Web APl简介.md","filePath":"技术文章/前端开发/javascript/js基础/2.Web APl简介.md","lastUpdated":1723096133000}'),p={name:"技术文章/前端开发/javascript/js基础/2.Web APl简介.md"},h=t('<h1 id="_2-web-apl简介" tabindex="-1">2.Web APl简介 <a class="header-anchor" href="#_2-web-apl简介" aria-label="Permalink to &quot;2.Web APl简介&quot;">​</a></h1><h2 id="_1-js-基础与-web-api-关联" tabindex="-1">1.js 基础与 Web API 关联 <a class="header-anchor" href="#_1-js-基础与-web-api-关联" aria-label="Permalink to &quot;1.js 基础与 Web API 关联&quot;">​</a></h2><p><strong>JS 基础阶段</strong></p><ul><li>我们学习的是 ECMAscript 标准规定的基本语法</li><li>要求同学们掌握 Js 基础语法</li><li>只学习基本语法，做不了常用的网页交互效果</li><li>目的是为了 Js 后面的课程打基础、做铺垫</li></ul><p><strong>Web APls 阶段</strong></p><ul><li><p>web APIs 是 w3c 组织的标准</p></li><li><p>web APIs 我们主要学习 DOM 和 BOM</p></li><li><p>web APIs 是我们 Js 所独有的部分</p></li><li><p>我们膝要学习页面交互功能</p></li><li><p>需要使用 Js 基础的课程内容做基础</p></li></ul><p>Js 基础学习 ECMAScript 基础语法为后面作铺垫，web APIs 是 Js 的应用，大量使用 Js 基础语法做交互效果</p><h2 id="_2-api-和-web-api" tabindex="-1">2.API 和 Web API <a class="header-anchor" href="#_2-api-和-web-api" aria-label="Permalink to &quot;2.API 和 Web API&quot;">​</a></h2><h3 id="_2-1-api" tabindex="-1">2.1 API <a class="header-anchor" href="#_2-1-api" aria-label="Permalink to &quot;2.1 API&quot;">​</a></h3><p>APl (Application Programming Interface,应用程序编程接口)是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。 简单理解︰API 是给程序员提供的一种工具，以便能更轻松的实现想要完成的功能。</p><h3 id="_2-2-web-api" tabindex="-1">2.2 Web API <a class="header-anchor" href="#_2-2-web-api" aria-label="Permalink to &quot;2.2 Web API&quot;">​</a></h3><p>Web API 是浏览器提供的一套操作浏览器功能和页面元素的 API( BOM 和 DOM)。</p><p>现阶段我们主要针对于浏览器讲解常用的 API，主要针对浏览器做交互效果。</p><p>比如我们想要浏览器弹出一个警示框，直接使用 alert(‘弹出’)</p><p>MDN 详细 API : <a href="https://developer.mozilla.org/zh-CN/docs/Web/API" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/API</a></p><p>因为 Web API 很多，所以我们将这个阶段称为 Web APls</p><h3 id="_2-3-api-和-web-api-总结" tabindex="-1">2.3 API 和 Web API 总结 <a class="header-anchor" href="#_2-3-api-和-web-api-总结" aria-label="Permalink to &quot;2.3 API 和 Web API 总结&quot;">​</a></h3><ol><li>API 是为我们程序员提供的一个接口，帮助我们实现某种功能，我们会使用就可以了，不必纠结内部如何实现</li><li>Web API 主要是针对于浏览器提供的接口，主要针对于浏览器做交互效果。</li><li>Web API 一般都有输入和输出（函数的传参和返回值)，WebAPI 很多都是方法（函数)</li><li>学习 Web API 可以结合前面学习内置对象方法的思路学习</li></ol><h2 id="_3-dom" tabindex="-1">3.DOM <a class="header-anchor" href="#_3-dom" aria-label="Permalink to &quot;3.DOM&quot;">​</a></h2><h3 id="_1-dom-简介" tabindex="-1">1.DOM 简介 <a class="header-anchor" href="#_1-dom-简介" aria-label="Permalink to &quot;1.DOM 简介&quot;">​</a></h3><h4 id="_1-什么是-dom" tabindex="-1">1.什么是 DOM <a class="header-anchor" href="#_1-什么是-dom" aria-label="Permalink to &quot;1.什么是 DOM&quot;">​</a></h4><p>文档对象模型( Document Object Model，简称 DOM ）)，是 W3C 组织推荐的处理可扩展标记语言（HTML 或者 XML)的标准<strong>编程接口</strong>。 W3C 已经定义了一系列的 DOM 接口，通过这些 DOM 接口可以改变网页的内容、结构和样式。</p><h4 id="_2-dom-树" tabindex="-1">2.DOM 树 <a class="header-anchor" href="#_2-dom-树" aria-label="Permalink to &quot;2.DOM 树&quot;">​</a></h4><p><img src="'+a+`" alt="image-20210213133249765" loading="lazy"></p><ul><li>文档:一个页面就是一个文档，DOM 中使用 document 表示</li><li>元素︰页面中的所有标签都是元素，DOM 中使用 element 表示</li><li>节点 ∶ 网页中的所有内容都是节点（标签、属性、文本、注释等），DOM 中使用 node 表示</li></ul><p><strong>DOM 把以上内容都看做是对象</strong></p><h3 id="_2-获取元素" tabindex="-1">2. 获取元素 <a class="header-anchor" href="#_2-获取元素" aria-label="Permalink to &quot;2. 获取元素&quot;">​</a></h3><h4 id="_2-1-如何获取页面元素" tabindex="-1">2.1 如何获取页面元素 <a class="header-anchor" href="#_2-1-如何获取页面元素" aria-label="Permalink to &quot;2.1 如何获取页面元素&quot;">​</a></h4><p>DOM 在我们实际开发中主要用来操作元素。</p><p>我们如何来获取页面中的元素呢?</p><p>获取页面中的元素可以使用以下几种方式:</p><ul><li>根据 ID 获取根据标签名获取</li><li>通过 HTML5 新增的方法获取</li><li>特殊元素获取</li></ul><h4 id="_2-2-根据-id-获取" tabindex="-1">2.2 根据 ID 获取 <a class="header-anchor" href="#_2-2-根据-id-获取" aria-label="Permalink to &quot;2.2 根据 ID 获取&quot;">​</a></h4><p>使用 getElementById() 方法可以获取带有 ID 的元素对象。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>使用 <strong>console.dir()</strong> 可以打印我们获取的元素对象，更好的查看对象里面的属性和方法。</p><h4 id="_2-3-根据标签名获取" tabindex="-1">2.3 根据标签名获取 <a class="header-anchor" href="#_2-3-根据标签名获取" aria-label="Permalink to &quot;2.3 根据标签名获取&quot;">​</a></h4><p>使用 getElementsByTagName()方法可以返回带有指定标签名的对象的集合。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementsByTagName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;标签名&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>注意</strong>:</p><ol><li>因为得到的是一个对象的集合，所以我们想要操作里面的元素就需要遍历。</li><li>得到元素对象是动态的</li></ol><h4 id="_2-4-通过-html5-新增的方法获取" tabindex="-1">2.4 通过 HTML5 新增的方法获取 <a class="header-anchor" href="#_2-4-通过-html5-新增的方法获取" aria-label="Permalink to &quot;2.4 通过 HTML5 新增的方法获取&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1. document.getElementsByClassName (&#39;类名&#39;);//根据类名返回元素对象集合</span></span>
<span class="line"><span>2. document.queryselector(&#39;选择器&#39;) ;//根据指定选择器返回第一个元素对象</span></span>
<span class="line"><span>3. document.queryselectorAl1(&#39;选择器&#39;);//根据指定选择器返回</span></span></code></pre></div><p><strong>注意</strong>： querySelector 和 querySelectorAll 里面的选择器需要加<strong>符号</strong>,比如:document.querySelector(&#39;#nav&#39;);</p><h4 id="_2-5-获取特殊元素-body-html" tabindex="-1">2.5 获取特殊元素(body,html) <a class="header-anchor" href="#_2-5-获取特殊元素-body-html" aria-label="Permalink to &quot;2.5 获取特殊元素(body,html)&quot;">​</a></h4><p>获取 body 元素</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">doucumnet.bodyl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 返回body元素对象</span></span></code></pre></div><p>获取 html 元素</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.documentElement l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">返回html元素对象</span></span></code></pre></div><h3 id="_3-事件基础" tabindex="-1">3. 事件基础 <a class="header-anchor" href="#_3-事件基础" aria-label="Permalink to &quot;3. 事件基础&quot;">​</a></h3><h4 id="_3-1-事件概述" tabindex="-1">3.1 事件概述 <a class="header-anchor" href="#_3-1-事件概述" aria-label="Permalink to &quot;3.1 事件概述&quot;">​</a></h4><p>JavaScript 使我们有能力创建动态页面，而事件是可以被 JavaScript 侦测到的行为。 <strong>简单理解</strong>： 触发--- 响应机制。</p><p>网页中的每个元素都可以产生某些可以触发 JavaScript 的事件，例如，我们可以在用户点击某按钮时产生一个 事件，然后去执行某些操作。</p><h4 id="_3-2-事件三要素" tabindex="-1">3.2 事件三要素 <a class="header-anchor" href="#_3-2-事件三要素" aria-label="Permalink to &quot;3.2 事件三要素&quot;">​</a></h4><ol><li>事件源 （谁）</li><li>事件类型 （什么事件）</li><li>事件处理程序 （做啥）</li></ol><h4 id="_3-3-执行事件的步骤" tabindex="-1">3.3 执行事件的步骤 <a class="header-anchor" href="#_3-3-执行事件的步骤" aria-label="Permalink to &quot;3.3 执行事件的步骤&quot;">​</a></h4><ol><li>获取事件源</li><li>注册事件（绑定事件)</li><li>添加事件处理程序(采取函数赋值形式)</li></ol><h4 id="_3-4-常见的鼠标事件-略" tabindex="-1">3.4 常见的鼠标事件(略) <a class="header-anchor" href="#_3-4-常见的鼠标事件-略" aria-label="Permalink to &quot;3.4 常见的鼠标事件(略)&quot;">​</a></h4><table tabindex="0"><thead><tr><th>鼠标事件</th><th>触发条件</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标点击左键触发</td></tr><tr><td>onmouseover</td><td>鼠标经过触发</td></tr><tr><td>onmouseout</td><td>鼠标离开触发</td></tr><tr><td>onfocus</td><td>获得鼠标焦点触发</td></tr><tr><td>onblur</td><td>失去鼠标焦点触发</td></tr><tr><td>onmousemove</td><td>鼠标移动触发</td></tr><tr><td>onmouseup</td><td>鼠标弹起触发</td></tr><tr><td>onmousedown</td><td>鼠标按下触发</td></tr></tbody></table><h4 id="_3-5-分析事件三要素" tabindex="-1">3.5 分析事件三要素 <a class="header-anchor" href="#_3-5-分析事件三要素" aria-label="Permalink to &quot;3.5 分析事件三要素&quot;">​</a></h4><ul><li>下拉菜单三要素</li><li>关闭广告三要素</li></ul><h3 id="_4-操作元素" tabindex="-1">4.操作元素 <a class="header-anchor" href="#_4-操作元素" aria-label="Permalink to &quot;4.操作元素&quot;">​</a></h3><p>JavaScript 的 DOM 操作可以改变网页内容、结构和样式，我们可以利用 DOM 操作元素来改变元素里面的内 容 、属性等。注意以下都是属性</p><h4 id="_4-1-改变元素内容" tabindex="-1">4.1 改变元素内容 <a class="header-anchor" href="#_4-1-改变元素内容" aria-label="Permalink to &quot;4.1 改变元素内容&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>element.innerText</span></span></code></pre></div><p>从起始位置到终止位置的内容,但它去除 html 标签，同时空格和换行也会去掉</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>element.innerHTML</span></span></code></pre></div><p>起始位置到终止位置的全部内容，包括 html 标签，同时保留空格和换行</p><h4 id="_4-2-常用元素的属性操作" tabindex="-1">4.2 常用元素的属性操作 <a class="header-anchor" href="#_4-2-常用元素的属性操作" aria-label="Permalink to &quot;4.2 常用元素的属性操作&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1. innerText、innerHTML 改变元素内容</span></span>
<span class="line"><span>2. src、href</span></span>
<span class="line"><span>3. id、alt、title</span></span></code></pre></div><h4 id="_4-3-表单元素的属性操作" tabindex="-1">4.3 表单元素的属性操作 <a class="header-anchor" href="#_4-3-表单元素的属性操作" aria-label="Permalink to &quot;4.3 表单元素的属性操作&quot;">​</a></h4><p>利用 DOM 可以操作如下表单元素的属性：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>type、value、checked、selected、disabled</span></span></code></pre></div><h4 id="_4-4-样式属性操作" tabindex="-1">4.4 样式属性操作 <a class="header-anchor" href="#_4-4-样式属性操作" aria-label="Permalink to &quot;4.4 样式属性操作&quot;">​</a></h4><p>我们可以通过 JS 修改元素的大小、颜色、位置等样式。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1. element.style 行内样式操作</span></span>
<span class="line"><span>2. element.className 类名样式操作</span></span></code></pre></div><p><strong>注意</strong>：</p><ol><li><p>JS 里面的样式采取驼峰命名法 比如 fontSize、 backgroundColor</p></li><li><p>JS 修改 style 样式操作，产生的是行内样式，CSS 权重比较高</p></li><li><p>如果样式修改较多，可以采取操作类名方式更改元素样式。</p></li><li><p>class 因为是个保留字，因此使用 className 来操作元素类名属性</p></li><li><p>className 会直接更改元素的类名，会覆盖原先的类名。</p></li></ol><p><strong>操作元素总结</strong></p><p>操作元素是 DOM 核心内容</p><p><img src="`+n+'" alt="image-20210213143412945" loading="lazy"></p><h4 id="_4-5-排他思想" tabindex="-1">4.5 排他思想 <a class="header-anchor" href="#_4-5-排他思想" aria-label="Permalink to &quot;4.5 排他思想&quot;">​</a></h4><p>如果有同一组元素，我们想要某一个元素实现某种样式， 需要用到循环的排他思想算法：</p><ol><li>所有元素全部清除样式（干掉其他人）</li><li>给当前元素设置样式 （留下我自己）</li><li>注意顺序不能颠倒，首先干掉其他人，再设置自己</li></ol><h4 id="_4-6-自定义属性的操作" tabindex="-1">4.6 自定义属性的操作 <a class="header-anchor" href="#_4-6-自定义属性的操作" aria-label="Permalink to &quot;4.6 自定义属性的操作&quot;">​</a></h4><ol><li>获取属性值</li></ol><ul><li>element.属性 获取属性值。</li><li>element.getAttribute(&#39;属性&#39;);</li></ul><p><strong>区别：</strong></p><ul><li>element.属性 获取内置属性值（元素本身自带的属性）</li><li>element.getAttribute(‘属性’); 主要获得自定义的属性 （标准） 我们程序员自定义的属性</li></ul><ol start="2"><li>设置属性值</li></ol><ul><li>element.属性 = ‘值’ 设置内置属性值。</li><li>element.setAttribute(&#39;属性&#39;, &#39;值&#39;);</li></ul><p><strong>区别：</strong></p><ul><li>element.属性 设置内置属性值</li><li>element.setAttribute(‘属性’); 主要设置自定义的属性 （标准）</li></ul><ol start="3"><li>移除属性</li></ol><ul><li>element.removeAttribute(&#39;属性&#39;);</li></ul><h4 id="_4-7-h5-自定义属性" tabindex="-1">4.7 H5 自定义属性 <a class="header-anchor" href="#_4-7-h5-自定义属性" aria-label="Permalink to &quot;4.7 H5 自定义属性&quot;">​</a></h4><p>自定义属性目的：是为了保存并使用数据。有些数据可以保存到页面中而不用保存到数据库中。</p><p>自定义属性获取是通过 getAttribute(‘属性’) 获取。</p><p>但是有些自定义属性很容易引起歧义，不容易判断是元素的内置属性还是自定义属性。</p><p>H5 给我们新增了自定义属性：</p><p><strong>1. 设置 H5 自定义属性</strong></p><p>H5 规定自定义属性 data-开头做为属性名并且赋值。</p><p>比如 <code>&lt;div data-index=“1”&gt;&lt;/div&gt;</code></p><p>或者使用 JS 设置 element.setAttribute(‘data-index’, 2)</p><p><strong>2.获取 H5 自定义属性</strong></p><ol><li>兼容性获取 element.getAttribute(‘data-index’);</li><li>H5 新增 element.dataset.index 或者 element.dataset[‘index’] ie 11 才开始支持</li></ol><h3 id="_5-节点操作" tabindex="-1">5. 节点操作 <a class="header-anchor" href="#_5-节点操作" aria-label="Permalink to &quot;5. 节点操作&quot;">​</a></h3><h4 id="_5-1-为什么学节点操作" tabindex="-1">5.1 为什么学节点操作 <a class="header-anchor" href="#_5-1-为什么学节点操作" aria-label="Permalink to &quot;5.1 为什么学节点操作&quot;">​</a></h4><p>获取元素通常使用两种方式：</p><p><strong>1.利用 DOM 提供的方法获取元素</strong></p><ul><li>document.getElementByld()</li><li>document.getElementsByTagName()</li><li>document.querySelector 等</li><li>逻辑性不强、繁琐</li></ul><p><strong>2.利用节点层级关系获取元素</strong></p><ul><li>利用父子兄节点关系获取元素</li><li>逻辑性强，但是兼容性稍差</li></ul><p>这两种方式都可以获取元素节点，我们后面都会使用，但是节点操作更简单</p><h4 id="_5-2-节点概述" tabindex="-1">5.2 节点概述 <a class="header-anchor" href="#_5-2-节点概述" aria-label="Permalink to &quot;5.2 节点概述&quot;">​</a></h4><p>网页中的所有内容都是节点（标签、属性、文本、注释等），在 DOM 中，节点使用 node 来表示。 HTML DOM 树中的所有节点均可通过 JavaScript 进行访问，所有 HTML 元素（节点）均可被修改，也可以 创建或删除。</p><p><img src="'+a+'" alt="image-20210213133249765" loading="lazy"></p><p>一般地，节点至少拥有 nodeType（节点类型）、nodeName（节点名称）和 nodeValue（节点值）这三个 基本属性。</p><ul><li>元素节点 nodeType 为 1</li><li>属性节点 nodeType 为 2</li><li>文本节点 nodeType 为 3 （文本节点包含文字、空格、换行等）</li></ul><p>我们在实际开发中，节点操作主要操作的是元素节点</p><h4 id="_5-3-节点层级" tabindex="-1">5.3 节点层级 <a class="header-anchor" href="#_5-3-节点层级" aria-label="Permalink to &quot;5.3 节点层级&quot;">​</a></h4><p>利用 DOM 树可以把节点划分为不同的层级关系，常见的是父子兄层级关系。</p><p><img src="'+a+`" alt="image-20210213133249765" loading="lazy"></p><p>利用 DOM 树可以把节点划分为不同的层级关系，常见的是父子兄层级关系。</p><p><strong>1.父级节点</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>node.parentNode</span></span></code></pre></div><ul><li>parentNode 属性可返回某节点的父节点，注意是最近的一个父节点</li><li>如果指定的节点没有父节点则返回 null</li></ul><p><strong>2.子节点</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1. parentNode.childNodes（标准）</span></span></code></pre></div><p>parentNode.childNodes 返回包含指定节点的子节点的集合，该集合为即时更新的集合。</p><p>注意：返回值里面包含了所有的子节点，包括元素节点，文本节点等。</p><p>如果只想要获得里面的元素节点，则需要专门处理。 所以我们一般不提倡使用 childNodes</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ul </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(‘ul’);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ul.childNodes.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ul.childNodes[i].nodeType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ul.childNodes[i] 是元素节点</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ul.childNodes[i]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>2. parentNode.children（非标准）</span></span></code></pre></div><p>parentNode.children 是一个只读属性，返回所有的子元素节点。它只返回子元素节点，其余节点不返 回 （<strong>这个是我们重点掌握的</strong>）。 虽然 children 是一个非标准，但是得到了各个浏览器的支持，因此我们可以放心使用</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>3. parentNode.firstChild</span></span></code></pre></div><p>返回第一个子节点，找不到则返回 null。同样，也是包含所有的节点。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>4.parentNode.lastChild</span></span></code></pre></div><p>返回最后一个子节点，找不到则返回 null。同样，也是包含所有的节点。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>5. parentNode.firstElementChild</span></span></code></pre></div><p>返回第一个子元素节点，找不到则返回 null。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>6. parentNode.lastElementChild</span></span></code></pre></div><p>返回最后一个子元素节点，找不到则返回 null。</p><p><strong>注意</strong>：这两个方法有兼容性问题，IE9 以上才支持。</p><p>实际开发中，firstChild 和 lastChild 包含其他节点，操作不方便，而 firstElementChild 和 lastElementChild 又有兼容性问题，那么我们如何获取第一个子元素节点或最后一个子元素节点呢？</p><p>解决方案：</p><ol><li>如果想要第一个子元素节点，可以使用 parentNode.chilren[0]</li><li>如果想要最后一个子元素节点，可以使用 parentNode.chilren[parentNode.chilren.length - 1]</li></ol><p><strong>3. 兄弟节点</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1. node.nextSibling</span></span></code></pre></div><p>返回当前元素的下一个兄弟元素节点，找不到则返回 null。同样，也是包含所有的节点。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>2. node.previousSibling</span></span></code></pre></div><p>返回当前元素上一个兄弟元素节点，找不到则返回 null。同样，也是包含所有的节点。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>3. node.nextElementSibling</span></span></code></pre></div><p>返回当前元素下一个兄弟元素节点，找不到则返回 null。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>4. node.previousElementSibling</span></span></code></pre></div><p>返回当前元素上一个兄弟节点，找不到则返回 null。</p><p><strong>注意</strong>：这两个方法有兼容性问题， IE9 以上才支持。</p><p><strong>自己封装一个兼容性的函数</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getNextElementSibling</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> el </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((el </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> el.nextSibling)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (el.nodeType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> el</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="_5-4-创建节点" tabindex="-1">5.4 创建节点 <a class="header-anchor" href="#_5-4-创建节点" aria-label="Permalink to &quot;5.4 创建节点&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>document.createElement(&#39;tagName&#39;)</span></span></code></pre></div><p>document.createElement() 方法创建由 tagName 指定的 HTML 元素。因为这些元素原先不存在， 是根据我们的需求动态生成的，所以我们也称为<strong>动态创建元素节点</strong>。</p><h4 id="_5-5-添加节点" tabindex="-1">5.5 添加节点 <a class="header-anchor" href="#_5-5-添加节点" aria-label="Permalink to &quot;5.5 添加节点&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1. node.appendChild(child)</span></span></code></pre></div><p>node.appendChild() 方法将一个节点添加到指定父节点的子节点列表<strong>末尾</strong>。类似于 CSS 里面的 after 伪元素。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>2. node.insertBefore(child, 指定元素)</span></span></code></pre></div><p>node.insertBefore() 方法将一个节点添加到父节点的指定子节点<strong>前面</strong>。类似于 CSS 里面的 before 伪元素。</p><h4 id="_5-6-删除节点" tabindex="-1">5.6 删除节点 <a class="header-anchor" href="#_5-6-删除节点" aria-label="Permalink to &quot;5.6 删除节点&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>node.removeChild(child)</span></span></code></pre></div><p>node.removeChild() 方法从 DOM 中删除一个子节点，返回删除的节点。</p><h4 id="_5-7-复制节点-克隆节点" tabindex="-1">5.7 复制节点(克隆节点) <a class="header-anchor" href="#_5-7-复制节点-克隆节点" aria-label="Permalink to &quot;5.7 复制节点(克隆节点)&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>node.cloneNode()</span></span></code></pre></div><p>node.cloneNode() 方法返回调用该方法的节点的一个副本。 也称为克隆节点/拷贝节点</p><p><strong>注意</strong>：</p><ol><li>如果括号参数为空或者为 false ，则是<strong>浅拷贝</strong>，即只克隆复制节点本身，不克隆里面的子节点。</li><li>如果括号参数为 true ，则是<strong>深度拷贝</strong>，会复制节点本身以及里面所有的子节点。</li></ol><h4 id="_5-8-三种动态创建元素区别" tabindex="-1">5.8 三种动态创建元素区别 <a class="header-anchor" href="#_5-8-三种动态创建元素区别" aria-label="Permalink to &quot;5.8 三种动态创建元素区别&quot;">​</a></h4><ul><li>document.write()</li><li>element.innerHTML</li><li>document.createElement()</li></ul><p><strong>区别</strong></p><ol><li><p>document.write 是直接将内容写入页面的内容流，但是文档流执行完毕，则它会导致页面全部重绘</p></li><li><p>innerHTML 是将内容写入某个 DOM 节点，不会导致页面全部重绘</p></li><li><p>innerHTML 创建多个元素效率更高（不要拼接字符串，采取数组形式拼接），结构稍微复杂</p></li><li><p>createElement() 创建多个元素效率稍低一点点，但是结构更清晰</p></li></ol><p><strong>总结</strong>：不同浏览器下，innerHTML 效率要比 creatElement 高</p><h3 id="_6-dom-重点核心" tabindex="-1">6. DOM 重点核心 <a class="header-anchor" href="#_6-dom-重点核心" aria-label="Permalink to &quot;6. DOM 重点核心&quot;">​</a></h3><p>文档对象模型（Document Object Model，简称 DOM），是 W3C 组织推荐的处理可扩展标记语言 （HTML 或者 XML）的标准编程接口。</p><p>W3C 已经定义了一系列的 DOM 接口，通过这些 DOM 接口可以改变网页的内容、结构和样式。</p><ol><li>对于 JavaScript，为了能够使 JavaScript 操作 HTML，JavaScript 就有了一套自己的 dom 编程接口。</li><li>对于 HTML，dom 使得 html 形成一棵 dom 树. 包含 文档、元素、节点</li></ol><p>我们获取过来的 DOM 元素是 一个对象（object），所以称 为 文档对象模型</p><p>关于 dom 操作，我们主要针对于元素的操作。主要有创建、增、删、改、查、属性操作、事件操作。</p><h4 id="_6-1-创建" tabindex="-1">6.1 创建 <a class="header-anchor" href="#_6-1-创建" aria-label="Permalink to &quot;6.1 创建&quot;">​</a></h4><ol><li>document.write</li><li>innerHTML</li><li>createElement</li></ol><h4 id="_6-2-增" tabindex="-1">6.2 增 <a class="header-anchor" href="#_6-2-增" aria-label="Permalink to &quot;6.2 增&quot;">​</a></h4><ol><li><p>appendChild</p></li><li><p>insertBefore</p></li></ol><h4 id="_6-3-删" tabindex="-1">6.3 删 <a class="header-anchor" href="#_6-3-删" aria-label="Permalink to &quot;6.3 删&quot;">​</a></h4><ol><li>removeChild</li></ol><h4 id="_6-4-改" tabindex="-1">6.4 改 <a class="header-anchor" href="#_6-4-改" aria-label="Permalink to &quot;6.4 改&quot;">​</a></h4><p>主要修改 dom 的元素属性，dom 元素的内容、属性, 表单的值等</p><ol><li><p>修改元素属性： src、href、title 等</p></li><li><p>修改普通元素内容： innerHTML 、innerText</p></li><li><p>修改表单元素： value、type、disabled 等</p></li><li><p>修改元素样式： style、className</p></li></ol><h4 id="_6-5-查" tabindex="-1">6.5 查 <a class="header-anchor" href="#_6-5-查" aria-label="Permalink to &quot;6.5 查&quot;">​</a></h4><p>主要获取查询 dom 的元素</p><ol><li>DOM 提供的 API 方法： getElementById、getElementsByTagName 古老用法 不太推荐</li><li>H5 提供的新方法： querySelector、querySelectorAll 提倡</li><li>利用节点操作获取元素： 父(parentNode)、子(children)、兄(previousElementSibling、 nextElementSibling) 提倡</li></ol><h4 id="_6-6-属性操作" tabindex="-1">6.6 属性操作 <a class="header-anchor" href="#_6-6-属性操作" aria-label="Permalink to &quot;6.6 属性操作&quot;">​</a></h4><p>主要针对于自定义属性。</p><ol><li>setAttribute：设置 dom 的属性值</li><li>getAttribute：得到 dom 的属性值</li><li>removeAttribute 移除属性</li></ol><h4 id="_6-7-事件操作" tabindex="-1">6.7 事件操作 <a class="header-anchor" href="#_6-7-事件操作" aria-label="Permalink to &quot;6.7 事件操作&quot;">​</a></h4><p>给元素注册事件， 采取 事件源.事件类型 = 事件处理程序</p><table tabindex="0"><thead><tr><th>鼠标事件</th><th>触发条件</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标点击左键触发</td></tr><tr><td>onmouseover</td><td>鼠标经过触发</td></tr><tr><td>onmouseout</td><td>鼠标离开触发</td></tr><tr><td>onfocus</td><td>获得鼠标焦点触发</td></tr><tr><td>onblur</td><td>失去鼠标焦点触发</td></tr><tr><td>onmousemove</td><td>鼠标移动触发</td></tr><tr><td>onmouseup</td><td>鼠标弹起触发</td></tr><tr><td>onmousedown</td><td>鼠标按下触发</td></tr></tbody></table><h2 id="_4-事件高级" tabindex="-1">4.事件高级 <a class="header-anchor" href="#_4-事件高级" aria-label="Permalink to &quot;4.事件高级&quot;">​</a></h2><h3 id="_1-注册事件-绑定事件" tabindex="-1">1. 注册事件（绑定事件） <a class="header-anchor" href="#_1-注册事件-绑定事件" aria-label="Permalink to &quot;1. 注册事件（绑定事件）&quot;">​</a></h3><h4 id="_1-1-注册事件概述" tabindex="-1">1.1 注册事件概述 <a class="header-anchor" href="#_1-1-注册事件概述" aria-label="Permalink to &quot;1.1 注册事件概述&quot;">​</a></h4><p>给元素添加事件，称为注册事件或者绑定事件。 注册事件有两种方式:传统方式和方法监听注册方式</p><p><strong>传统注册方式</strong></p><ul><li><p>利用 on 开头的事件 onclick</p></li><li><p><code>&lt;button onclick=&quot;alert(&#39;hi~&#39;)&quot;&gt;&lt;/button&gt;</code></p></li><li><p>btn.onclick = function() {}</p></li><li><p>特点:注册事件的唯一性</p></li><li><p>同一个元素同一个事件只能设置一个处理函数，最后注册的处理函数将会覆盖前面注册的处理函数</p></li></ul><p><strong>方法监听注册方式</strong></p><ul><li>w3c 标准推荐方式</li><li>addEventListener()它是一个方法</li><li>IE9 之前的 E 不支持此方法，可使用 attachEvent()代替</li><li>特点:同一个元素同一个事件可以注册多个监听器</li><li>按注册顺序依次执行</li></ul><h4 id="_1-2-addeventlistener-事件监听方式" tabindex="-1">1.2 addEventListener 事件监听方式 <a class="header-anchor" href="#_1-2-addeventlistener-事件监听方式" aria-label="Permalink to &quot;1.2 addEventListener 事件监听方式&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> eventTarget.addEventListener(type, listener[, useCapture])</span></span></code></pre></div><p>eventTarget.addEventListener()方法将指定的监听器注册到 eventTarget（目标对象）上，当该对 象触发指定的事件时，就会执行事件处理函数。</p><p>该方法接收三个参数：</p><ul><li>type：事件类型字符串，比如 click 、mouseover ，注意这里不要带 on</li><li>listener：事件处理函数，事件发生时，会调用该监听函数</li><li>useCapture：可选参数，是一个布尔值，默认是 false。学完 DOM 事件流后，我们再进一步学习</li></ul><h4 id="_1-3-attachevent-事件监听方式" tabindex="-1">1.3 attachEvent 事件监听方式 <a class="header-anchor" href="#_1-3-attachevent-事件监听方式" aria-label="Permalink to &quot;1.3 attachEvent 事件监听方式&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> eventTarget.attachEvent(eventNameWithOn, callback)</span></span></code></pre></div><p>eventTarget.attachEvent()方法将指定的监听器注册到 eventTarget（目标对象） 上，当该对象触 发指定的事件时，指定的回调函数就会被执行。</p><p>该方法接收两个参数：</p><ul><li>eventNameWithOn：事件类型字符串，比如 onclick 、onmouseover ，这里要带 on</li><li>callback： 事件处理函数，当目标触发事件时回调函数被调用</li></ul><p>注意：IE8 及早期版本支持</p><h4 id="_1-4-注册事件兼容性解决方案" tabindex="-1">1.4 注册事件兼容性解决方案 <a class="header-anchor" href="#_1-4-注册事件兼容性解决方案" aria-label="Permalink to &quot;1.4 注册事件兼容性解决方案&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">eventName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 判断当前浏览器是否支持 addEventListener 方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (element.addEventListener) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(eventName, fn) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 第三个参数 默认是false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (element.attachEvent) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attachEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;on&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> eventName, fn)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 相当于 element.onclick = fn;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    element[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;on&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> eventName] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fn</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>兼容性处理的原则： 首先照顾大多数浏览器，再处理特殊浏览器</strong></p><h3 id="_2-删除事件-解绑事件" tabindex="-1">2. 删除事件（解绑事件） <a class="header-anchor" href="#_2-删除事件-解绑事件" aria-label="Permalink to &quot;2. 删除事件（解绑事件）&quot;">​</a></h3><h4 id="_2-1-删除事件的方式" tabindex="-1">2.1 删除事件的方式 <a class="header-anchor" href="#_2-1-删除事件的方式" aria-label="Permalink to &quot;2.1 删除事件的方式&quot;">​</a></h4><ol><li>传统注册方式</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>eventTarget.onclick = null;</span></span></code></pre></div><ol start="2"><li>方法监听注册方式</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>① eventTarget.removeEventListener(type, listener[, useCapture]);</span></span>
<span class="line"><span>② eventTarget.detachEvent(eventNameWithOn, callback);</span></span></code></pre></div><h4 id="_2-2-删除事件兼容性解决方案" tabindex="-1">2.2 删除事件兼容性解决方案 <a class="header-anchor" href="#_2-2-删除事件兼容性解决方案" aria-label="Permalink to &quot;2.2 删除事件兼容性解决方案&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> removeEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">eventName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 判断当前浏览器是否支持 removeEventListener 方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (element.removeEventListener) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(eventName, fn) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 第三个参数 默认是false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (element.detachEvent) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">detachEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;on&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> eventName, fn)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    element[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;on&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> eventName] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_3-dom-事件流" tabindex="-1">3. DOM 事件流 <a class="header-anchor" href="#_3-dom-事件流" aria-label="Permalink to &quot;3. DOM 事件流&quot;">​</a></h3><p>事件流描述的是从页面中接收事件的顺序。</p><p><strong>事件发生时会在元素节点之间按照特定的顺序传播，这个传播过程即 DOM 事件流</strong>。 比如我们给一个 div 注册了点击事件：</p><p>DOM 事件流分为 3 个阶段：</p><ol><li>捕获阶段</li><li>当前目标阶段</li><li>冒泡阶段</li></ol><ul><li>事件冒泡： IE 最早提出，事件开始时由最具体的元素接收，然后逐级向上传播到到 DOM 最顶层节点的过程。</li><li>事件捕获： 网景最早提出，由 DOM 最顶层节点开始，然后逐级向下传播到到最具体的元素接收的过程。</li></ul><p>我们向水里面扔一块石头，首先它会有一个下降的过程，这个过程就可以理解为从最顶层向事件发生的最具 体元素（目标点）的捕获过程；之后会产生泡泡，会在最低点（ 最具体元素）之后漂浮到水面上，这个过 程相当于事件冒泡。</p><p>注意</p><ol><li>JS 代码中只能执行捕获或者冒泡其中的一个阶段。</li><li>onclick 和 attachEvent 只能得到冒泡阶段。</li><li>addEventListener(type, listener[, useCapture])第三个参数如果是 true，表示在事件捕 获阶段调用事件处理程序；如果是 false（不写默认就是 false），表示在事件冒泡阶段调用事件处理 程序。</li><li>实际开发中我们很少使用事件捕获，我们更关注事件冒泡。</li><li>有些事件是没有冒泡的，比如 onblur、onfocus、onmouseenter、onmouseleave</li><li>事件冒泡有时候会带来麻烦，有时候又会帮助很巧妙的做某些事件，我们后面讲解。</li></ol><h3 id="_4-事件对象" tabindex="-1">4. 事件对象 <a class="header-anchor" href="#_4-事件对象" aria-label="Permalink to &quot;4. 事件对象&quot;">​</a></h3><h4 id="_4-1-什么是事件对象" tabindex="-1">4.1 什么是事件对象 <a class="header-anchor" href="#_4-1-什么是事件对象" aria-label="Permalink to &quot;4.1 什么是事件对象&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>eventTarget.onclick = function(event) {}</span></span>
<span class="line"><span>eventTarget.addEventListener(&#39;click&#39;, function(event) {}）</span></span>
<span class="line"><span> // 这个 event 就是事件对象，我们还喜欢的写成 e 或者 evt</span></span></code></pre></div><p>官方解释：event 对象代表事件的状态，比如键盘按键的状态、鼠标的位置、鼠标按钮的状态。 简单理解：事件发生后，跟事件相关的一系列信息数据的集合都放到这个对象里面，这个对象就是事件对象 event，它有很多属性和方法。 比如：</p><ol><li>谁绑定了这个事件。</li><li>鼠标触发事件的话，会得到鼠标的相关信息，如鼠标位置。</li><li>键盘触发事件的话，会得到键盘的相关信息，如按了哪个键。</li></ol><h4 id="_4-2-事件对象的使用语法" tabindex="-1">4.2 事件对象的使用语法 <a class="header-anchor" href="#_4-2-事件对象的使用语法" aria-label="Permalink to &quot;4.2 事件对象的使用语法&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> eventTarget.onclick = function(event) {</span></span>
<span class="line"><span> // 这个 event 就是事件对象，我们还喜欢的写成 e 或者 evt</span></span>
<span class="line"><span> }</span></span>
<span class="line"><span> eventTarget.addEventListener(&#39;click&#39;, function(event) {</span></span>
<span class="line"><span> // 这个 event 就是事件对象，我们还喜欢的写成 e 或者 evt</span></span>
<span class="line"><span> })</span></span></code></pre></div><p>这个 event 是个形参，系统帮我们设定为事件对象，不需要传递实参过去。 当我们注册事件时， event 对象就会被系统自动创建，并依次传递给事件监听器（事件处理函数）。</p><h4 id="_4-3-事件对象的兼容性方案" tabindex="-1">4.3 事件对象的兼容性方案 <a class="header-anchor" href="#_4-3-事件对象的兼容性方案" aria-label="Permalink to &quot;4.3 事件对象的兼容性方案&quot;">​</a></h4><p>事件对象本身的获取存在兼容问题： 1. 标准浏览器中是浏览器给方法传递的参数，只需要定义形参 e 就可以获取到。 2. 在 IE6~8 中，浏览器不会给方法传递参数，如果需要的话，需要到 window.event 中获取查找。</p><p>解决: e = e || window.event;</p><h4 id="_4-4-事件对象的常见属性和方法" tabindex="-1">4.4 事件对象的常见属性和方法 <a class="header-anchor" href="#_4-4-事件对象的常见属性和方法" aria-label="Permalink to &quot;4.4 事件对象的常见属性和方法&quot;">​</a></h4><p>e.target 和 this 的区别： this 是事件绑定的元素， 这个函数的调用者（绑定这个事件的元素） e.target 是事件触发的元素。</p><table tabindex="0"><thead><tr><th>事件对象属性方法</th><th>说明</th></tr></thead><tbody><tr><td>e.target</td><td>返回触发事件的对象 标准</td></tr><tr><td>e.srcElement</td><td>返回触发事件的对象 非标准 ie6-8 使用</td></tr><tr><td>e.type</td><td>返回事件的类型比如 click mouseover 不带 on</td></tr><tr><td>e.cancelBubble</td><td>该属性阻止冒泡非标准 ie6-8 使用</td></tr><tr><td>e.returnValue</td><td>该属性阻止默认事件(默认行为)非标准 ie6-8 使用比如不让链接跳转</td></tr><tr><td>e.preventDefault()</td><td>该方法阻止默认事件（默认行为)标准比如不让链接跳转</td></tr><tr><td>e.stopPropagation()</td><td>阻止胃泡标准</td></tr></tbody></table><h3 id="_5-阻止事件冒泡" tabindex="-1">5. 阻止事件冒泡 <a class="header-anchor" href="#_5-阻止事件冒泡" aria-label="Permalink to &quot;5. 阻止事件冒泡&quot;">​</a></h3><h4 id="_5-1-阻止事件冒泡的两种方式" tabindex="-1">5.1 阻止事件冒泡的两种方式 <a class="header-anchor" href="#_5-1-阻止事件冒泡的两种方式" aria-label="Permalink to &quot;5.1 阻止事件冒泡的两种方式&quot;">​</a></h4><p>事件冒泡：开始时由最具体的元素接收，然后逐级向上传播到到 DOM 最顶层节点。</p><p>事件冒泡本身的特性，会带来的坏处，也会带来的好处，需要我们灵活掌握。</p><p><strong>阻止事件冒泡</strong></p><ul><li>标准写法：利用事件对象里面的 stopPropagation()方法</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>e.stopPropagation()</span></span></code></pre></div><ul><li>非标准写法：IE 6-8 利用事件对象 cancelBubble 属性</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>e.cancelBubble = true;</span></span></code></pre></div><h4 id="_5-2-阻止事件冒泡的兼容性解决方案" tabindex="-1">5.2 阻止事件冒泡的兼容性解决方案 <a class="header-anchor" href="#_5-2-阻止事件冒泡的兼容性解决方案" aria-label="Permalink to &quot;5.2 阻止事件冒泡的兼容性解决方案&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.stopPropagation) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stopPropagation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  window.event.cancelBubble </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_6-事件委托-代理、委派" tabindex="-1">6. 事件委托（代理、委派） <a class="header-anchor" href="#_6-事件委托-代理、委派" aria-label="Permalink to &quot;6. 事件委托（代理、委派）&quot;">​</a></h3><p>事件冒泡本身的特性，会带来的坏处，也会<strong>带来的好处</strong>，需要我们灵活掌握。生活中有如下场景：</p><p>咱们班有 100 个学生， 快递员有 100 个快递， 如果一个个的送花费时间较长。同时每个学生领取的时候，也需 要排队领取，也花费时间较长，何如？</p><p><strong>解决方案</strong>： 快递员把 100 个快递，<strong>委托</strong>给班主任，班主任把这些快递放到办公室，同学们下课自行领取即可。</p><p><strong>优势</strong>： 快递员省事，委托给班主任就可以走了。 同学们领取也方便，因为相信班主任。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;ul&gt;</span></span>
<span class="line"><span>    &lt;li&gt;知否知否，应该有弹框在手&lt;/li&gt;</span></span>
<span class="line"><span>    &lt;li&gt;知否知否，应该有弹框在手&lt;/li&gt;</span></span>
<span class="line"><span>    &lt;li&gt;知否知否，应该有弹框在手&lt;/li&gt;</span></span>
<span class="line"><span>    &lt;li&gt;知否知否，应该有弹框在手&lt;/li&gt;</span></span>
<span class="line"><span>    &lt;li&gt;知否知否，应该有弹框在手&lt;/li&gt;</span></span>
<span class="line"><span>&lt;/ul&gt;</span></span></code></pre></div><p>点击每个 li 都会弹出对话框，以前需要给每个 li 注册事件，是非常辛苦的，而且访问 DOM 的次数越多，这就 会延长整个页面的交互就绪时间。 <strong>事件委托</strong> ：事件委托也称为事件代理， 在 jQuery 里面称为事件委派。</p><p><strong>事件委托的原理</strong> ：不是每个子节点单独设置事件监听器，而是事件监听器设置在其父节点上，然后利用冒泡原理影响设置每个子节点。</p><p>以上案例：给 ul 注册点击事件，然后利用事件对象的 target 来找到当前点击的 li，因为点击 li，事件会冒泡到 ul 上， ul 有注册事件，就会触发事件监听器。</p><p><strong>事件委托的作用</strong> ：我们只操作了一次 DOM ，提高了程序的性能。</p><h3 id="_7-常用的鼠标事件" tabindex="-1">7. 常用的鼠标事件 <a class="header-anchor" href="#_7-常用的鼠标事件" aria-label="Permalink to &quot;7. 常用的鼠标事件&quot;">​</a></h3><h4 id="_7-1-常用的鼠标事件" tabindex="-1">7.1 常用的鼠标事件 <a class="header-anchor" href="#_7-1-常用的鼠标事件" aria-label="Permalink to &quot;7.1 常用的鼠标事件&quot;">​</a></h4><table tabindex="0"><thead><tr><th>鼠标事件</th><th>触发条件</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标点击左键触发</td></tr><tr><td>onmouseover</td><td>鼠标经过触发(鼠标悬浮)</td></tr><tr><td>onmouseout</td><td>鼠标离开触发</td></tr><tr><td>onfocus</td><td>获得鼠标焦点触发</td></tr><tr><td>onblur</td><td>失去鼠标焦点触发</td></tr><tr><td>onmousemove</td><td>鼠标移动触发</td></tr><tr><td>onmouseup</td><td>鼠标弹起触发</td></tr><tr><td>onmousedown</td><td>鼠标按下触发</td></tr></tbody></table><p>1.禁止鼠标右键菜单</p><p>contextmenu 主要控制应该何时显示上下文菜单，主要用于程序员取消默认的上下文菜单</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>document.addEventListener(&#39;contextmenu&#39;, function (e) {</span></span>
<span class="line"><span>    e.preventDefault();</span></span>
<span class="line"><span>})</span></span></code></pre></div><p>2.禁止鼠标选中（selectstart 开始选中）</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>document.addEventListener(&#39;selectstart&#39;, function (e) {</span></span>
<span class="line"><span>    e.preventDefault();</span></span>
<span class="line"><span>})</span></span></code></pre></div><p>PS:vue 项目使用过的实例</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@mouseenter=&quot;cartShowState(true)&quot;//鼠标悬浮</span></span>
<span class="line"><span>@mouseleave=&quot;cartShowState(false)&quot;//鼠标离开</span></span></code></pre></div><h4 id="_7-2-鼠标事件对象" tabindex="-1">7.2 鼠标事件对象 <a class="header-anchor" href="#_7-2-鼠标事件对象" aria-label="Permalink to &quot;7.2 鼠标事件对象&quot;">​</a></h4><p>event 对象代表事件的状态，跟事件相关的一系列信息的集合。现阶段我们主要是用鼠标事件对象 MouseEvent 和键盘事件对象 KeyboardEvent。</p><table tabindex="0"><thead><tr><th>鼠标事件对象</th><th>说明</th></tr></thead><tbody><tr><td>e.clientX</td><td>返回鼠标相对于浏览器窗口可视区的 × 坐标</td></tr><tr><td>e.clientY</td><td>返回鼠标相对于浏览器窗口可视区的 Y 坐标</td></tr><tr><td>e.pageX</td><td>返回鼠标相对于文档页面的 X 坐标 IE9+支持</td></tr><tr><td>e.pageY</td><td>返回鼠标相对于文档页面的 Y 坐标 IE9+支持</td></tr><tr><td>e.screenX</td><td>返回鼠标相对于电脑屏幕的 × 坐标</td></tr><tr><td>e.screenY</td><td>返回鼠标相对于电脑屏幕的 Y 坐标</td></tr></tbody></table><h3 id="_8-常用的键盘事件" tabindex="-1">8. 常用的键盘事件 <a class="header-anchor" href="#_8-常用的键盘事件" aria-label="Permalink to &quot;8. 常用的键盘事件&quot;">​</a></h3><h4 id="_8-1-常用键盘事件" tabindex="-1">8.1 常用键盘事件 <a class="header-anchor" href="#_8-1-常用键盘事件" aria-label="Permalink to &quot;8.1 常用键盘事件&quot;">​</a></h4><p>事件除了使用鼠标触发，还可以使用键盘触发。</p><table tabindex="0"><thead><tr><th>键盘事件</th><th>触发条件</th></tr></thead><tbody><tr><td>onkeyup</td><td>某个键盘按键被松开时触发</td></tr><tr><td>onkeydown</td><td>某个键盘按键被按下时触发</td></tr><tr><td>onkeypress</td><td>某个键盘按键被按下时触发但是它不识别功能键比如 ctrl shift 箭头等</td></tr></tbody></table><p>注意：</p><ol><li>如果使用 addEventListener 不需要加 on</li><li>onkeypress 和前面 2 个的区别是，它不识别功能键，比如左右箭头，shift 等。</li><li>三个事件的执行顺序是： keydown -- keypress --- keyup</li></ol><h4 id="_8-2-键盘事件对象" tabindex="-1">8.2 键盘事件对象 <a class="header-anchor" href="#_8-2-键盘事件对象" aria-label="Permalink to &quot;8.2 键盘事件对象&quot;">​</a></h4><table tabindex="0"><thead><tr><th>键盘事件对象属性</th><th>说明</th></tr></thead><tbody><tr><td>keyCode</td><td>返回该键的 ASCII 值</td></tr></tbody></table><p><strong>注意</strong>： onkeydown 和 onkeyup 不区分字母大小写，onkeypress 区分字母大小写。</p><p>在我们实际开发中，我们更多的使用 keydown 和 keyup， 它能识别所有的键（包括功能键）</p><p>Keypress 不识别功能键，但是 keyCode 属性能区分大小写，返回不同的 ASCII 值</p><h4 id="_8-3-ascii-表" tabindex="-1">8.3 ASCII 表 <a class="header-anchor" href="#_8-3-ascii-表" aria-label="Permalink to &quot;8.3 ASCII 表&quot;">​</a></h4><p><img src="`+l+`" alt="image-20210218001038773" loading="lazy"></p><p>PS:vue 项目实例-阻止回车提交表单</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">//阻止回车提交表单 onkeypress=&quot;return event.keyCode != 13;&quot;//阻止提交</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">onkeydown=&quot;if(event.keyCode==13){return false;}&quot;//阻止提交</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">onkeydown=&quot;if(event.keyCode==13){fun()}&quot;//调用函数 v-on:keyup.enter=&quot;search()&quot;</span></span></code></pre></div>`,306),d=[h];function o(r,c,k,g,u,b){return i(),e("div",null,d)}const m=s(p,[["render",o]]);export{v as __pageData,m as default};
