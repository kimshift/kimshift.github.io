import{_ as e,q as a,p as r,aE as t}from"./chunks/framework.-H45_L2h.js";const d=JSON.parse('{"title":"4.jQuery其他方法","description":"","frontmatter":{"title":"4.jQuery其他方法","date":"2023-06-01T17:14:54.000Z","categories":["前端开发"],"tags":["javascript","jQuery"],"prev":"3.jQuery事件","next":false},"headers":[],"relativePath":"技术文章/前端开发/javascript/jQuery/4.jQuery其他方法.md","filePath":"技术文章/前端开发/javascript/jQuery/4.jQuery其他方法.md","lastUpdated":1723096133000}'),o={name:"技术文章/前端开发/javascript/jQuery/4.jQuery其他方法.md"},l=t('<h1 id="_4-jquery-其他方法" tabindex="-1">4.jQuery 其他方法 <a class="header-anchor" href="#_4-jquery-其他方法" aria-label="Permalink to &quot;4.jQuery 其他方法&quot;">​</a></h1><h2 id="_1-jquery-对象拷贝" tabindex="-1">1. jQuery 对象拷贝 <a class="header-anchor" href="#_1-jquery-对象拷贝" aria-label="Permalink to &quot;1. jQuery 对象拷贝&quot;">​</a></h2><p>如果想要把某个对象拷贝（合并） 给另外一个对象使用，此时可以使用 $.extend() 方法</p><p>语法：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$.extend([deep], target, object1, [objectN])</span></span></code></pre></div><ol><li><p>deep: 如果设为 true 为深拷贝， 默认为 false 浅拷贝</p></li><li><p>target: 要拷贝的目标对象</p></li><li><p>object1:待拷贝到第一个对象的对象。</p></li><li><p>objectN:待拷贝到第 N 个对象的对象。</p></li><li><p>浅拷贝是把被拷贝的对象<strong>复杂数据类型中的地址</strong>拷贝给目标对象，修改目标对象<strong>会影响</strong>被拷贝对象。</p></li><li><p>深拷贝，前面加 true， 完全克隆(拷贝的对象,而不是地址)，修改目标对象<strong>不会影响</strong>被拷贝对象。</p></li></ol><h2 id="_2-jquery-多库共存" tabindex="-1">2. jQuery 多库共存 <a class="header-anchor" href="#_2-jquery-多库共存" aria-label="Permalink to &quot;2. jQuery 多库共存&quot;">​</a></h2><p>问题概述：</p><p>jQuery 使用$作为标示符，随着jQuery的流行,其他 js 库也会用这$作为标识符， 这样一起使用会引起冲突。</p><p>客观需求：</p><p>需要一个解决方案，让 jQuery 和其他的 js 库不存在冲突，可以同时存在，这就叫做多库共存。</p><p>jQuery 解决方案：</p><ol><li><p>把里面的 $ 符号 统一改为 jQuery。 比如 jQuery(&#39;&#39;div&#39;&#39;)</p></li><li><p>jQuery 变量规定新的名称：$.noConflict() var xx = $.noConflict();</p></li></ol><h2 id="_3-jquery-插件" tabindex="-1">3. jQuery 插件 <a class="header-anchor" href="#_3-jquery-插件" aria-label="Permalink to &quot;3. jQuery 插件&quot;">​</a></h2><p>jQuery 功能比较有限，想要更复杂的特效效果，可以借助于 jQuery 插件完成。</p><p>注意: 这些插件也是依赖于 jQuery 来完成的，所以必须要先引入 jQuery 文件，因此也称为 jQuery 插件。</p><h3 id="jquery-插件常用的网站" tabindex="-1">jQuery 插件常用的网站： <a class="header-anchor" href="#jquery-插件常用的网站" aria-label="Permalink to &quot;jQuery 插件常用的网站：&quot;">​</a></h3><ol><li><p>jQuery 插件库 <a href="http://www.jq22.com/" target="_blank" rel="noreferrer">http://www.jq22.com/</a></p></li><li><p>jQuery 之家 <a href="http://www.htmleaf.com/" target="_blank" rel="noreferrer">http://www.htmleaf.com/</a></p></li></ol><h3 id="jquery-插件使用步骤" tabindex="-1">jQuery 插件使用步骤： <a class="header-anchor" href="#jquery-插件使用步骤" aria-label="Permalink to &quot;jQuery 插件使用步骤：&quot;">​</a></h3><ol><li>引入相关文件。（jQuery 文件 和 插件文件）</li><li>复制相关 html、css、js (调用插件)。</li></ol><h3 id="jquery-插件演示" tabindex="-1">jQuery 插件演示： <a class="header-anchor" href="#jquery-插件演示" aria-label="Permalink to &quot;jQuery 插件演示：&quot;">​</a></h3><ol><li>瀑布流</li><li>图片懒加载（图片使用延迟加载在可提高网页下载速度。它也能帮助减轻服务器负载） 当我们页面滑动到可视区域，再显示图片。 我们使用 jquery 插件库 EasyLazyload。 注意，此时的 js 引入文件和 js 调用必须写到 DOM 元素（图片）最后面</li><li>全屏滚动（fullpage.js） gitHub： <a href="https://github.com/alvarotrigo/fullPage.js" target="_blank" rel="noreferrer">https://github.com/alvarotrigo/fullPage.js</a> 中文翻译网站： <a href="http://www.dowebok.com/demo/2014/77/" target="_blank" rel="noreferrer">http://www.dowebok.com/demo/2014/77/</a></li></ol><h3 id="bootstrap-js-插件" tabindex="-1">bootstrap JS 插件： <a class="header-anchor" href="#bootstrap-js-插件" aria-label="Permalink to &quot;bootstrap JS 插件：&quot;">​</a></h3><p>bootstrap 框架也是依赖于 jQuery 开发的，因此里面的 js 插件使用 ，也必须引入 jQuery 文件。</p>',24),i=[l];function s(u,p,j,n,h,c){return r(),a("div",null,i)}const _=e(o,[["render",s]]);export{d as __pageData,_ as default};
