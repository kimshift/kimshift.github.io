import{_ as s,q as a,p as i,aE as t}from"./chunks/framework.-H45_L2h.js";const g=JSON.parse('{"title":"本地生成 SSH 公钥","description":"","frontmatter":{"title":"本地生成 SSH 公钥","date":"2023-05-13T13:20:23.000Z","categories":["终端知识"],"tags":["ssh","git"]},"headers":[],"relativePath":"技术文章/终端知识/GIt/本地生成SSH.md","filePath":"技术文章/终端知识/GIt/本地生成SSH.md","lastUpdated":1723083875000}'),e={name:"技术文章/终端知识/GIt/本地生成SSH.md"},h=t(`<h1 id="本地生成-ssh-公钥" tabindex="-1">本地生成 SSH 公钥 <a class="header-anchor" href="#本地生成-ssh-公钥" aria-label="Permalink to &quot;本地生成 SSH 公钥&quot;">​</a></h1><h2 id="ssh-公钥配置" tabindex="-1">SSH 公钥配置 <a class="header-anchor" href="#ssh-公钥配置" aria-label="Permalink to &quot;SSH 公钥配置&quot;">​</a></h2><h3 id="打开本地终端" tabindex="-1">打开本地终端 <a class="header-anchor" href="#打开本地终端" aria-label="Permalink to &quot;打开本地终端&quot;">​</a></h3><ul><li>笔记本/台式：CMD 窗口或者 git 的 bash 窗口等等</li><li>云服务器/linux 系统的终端</li></ul><h3 id="在命令行输入命令生成-ssh-秘钥" tabindex="-1">在命令行输入命令生成 ssh 秘钥 <a class="header-anchor" href="#在命令行输入命令生成-ssh-秘钥" aria-label="Permalink to &quot;在命令行输入命令生成 ssh 秘钥&quot;">​</a></h3><blockquote><p>参数 -t rsa 表示使用 rsa 算法进行加密，执行后，会在/home/当前用户/.ssh 目录下找到 id_rsa(私钥)和 id_rsa.pub(公钥) 并按回车 3 下（为什么按三下，是因为有提示你是否需要设置密码，如果设置了每次使用 Git 都会用到密码，一般都是直接不写为空，直接回车就好了）。 会在一个文件夹里面生成一个私钥 id_rsa 和一个公钥 id_rsa.pub。（可执行 start ~ 命令，生成的公私钥在 .ssh 的文件夹里面）</p></blockquote><ul><li>邮箱改成你自己的</li><li>下一步<strong>连续回车</strong>即可</li></ul><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh-keygen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rsa</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;710429093@qq.com&quot;</span></span></code></pre></div><h3 id="生成秘钥后输入命令查看秘钥" tabindex="-1">生成秘钥后输入命令查看秘钥 <a class="header-anchor" href="#生成秘钥后输入命令查看秘钥" aria-label="Permalink to &quot;生成秘钥后输入命令查看秘钥&quot;">​</a></h3><ul><li>将生成的秘钥全部内容复制到需要的地方操作即可</li></ul><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.ssh/id_rsa.pub</span></span></code></pre></div><h3 id="一台设备生成多个-ssh" tabindex="-1">一台设备生成多个 ssh <a class="header-anchor" href="#一台设备生成多个-ssh" aria-label="Permalink to &quot;一台设备生成多个 ssh&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#ssh-keygen -t rsa -C &quot;710429093@qq.com&quot; -f ~/.ssh/[新的ssh文件名]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh-keygen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rsa</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;710429093@qq.com&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.ssh/id_rsa_gitee</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#查看</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.ssh/id_rsa_gitee.pub</span></span></code></pre></div>`,13),l=[h];function n(p,r,d,o,k,c){return i(),a("div",null,l)}const _=s(e,[["render",n]]);export{g as __pageData,_ as default};
