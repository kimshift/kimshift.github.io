import{_ as a,q as s,p as e,aE as n}from"./chunks/framework.-H45_L2h.js";const v=JSON.parse('{"title":"3.jQuery事件","description":"","frontmatter":{"title":"3.jQuery事件","date":"2023-06-01T17:13:13.000Z","categories":["前端开发"],"tags":["javascript","jQuery"],"prev":"2.jQuery常用API","next":"4.jQuery其他方法"},"headers":[],"relativePath":"技术文章/前端开发/javascript/jQuery/3.jQuery事件.md","filePath":"技术文章/前端开发/javascript/jQuery/3.jQuery事件.md","lastUpdated":1723096133000}'),t={name:"技术文章/前端开发/javascript/jQuery/3.jQuery事件.md"},p=n(`<h1 id="_3-jquery事件" tabindex="-1">3.jQuery事件 <a class="header-anchor" href="#_3-jquery事件" aria-label="Permalink to &quot;3.jQuery事件&quot;">​</a></h1><h2 id="_1-jquery-事件注册" tabindex="-1">1. jQuery 事件注册 <a class="header-anchor" href="#_1-jquery-事件注册" aria-label="Permalink to &quot;1. jQuery 事件注册&quot;">​</a></h2><h3 id="单个事件注册" tabindex="-1">单个事件注册 <a class="header-anchor" href="#单个事件注册" aria-label="Permalink to &quot;单个事件注册&quot;">​</a></h3><p>语法：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>element.事件(function(){})</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$(&quot;div&quot;).click(function(){  事件处理程序 })</span></span></code></pre></div><p>其他事件和原生基本一致。 比如 mouseover、mouseout、blur、focus、change、keydown、keyup、resize、scroll 等</p><h2 id="_2-jquery-事件处理" tabindex="-1">2. jQuery 事件处理 <a class="header-anchor" href="#_2-jquery-事件处理" aria-label="Permalink to &quot;2. jQuery 事件处理&quot;">​</a></h2><h3 id="_2-1-事件处理-on-绑定事件" tabindex="-1">2.1 事件处理 on() 绑定事件 <a class="header-anchor" href="#_2-1-事件处理-on-绑定事件" aria-label="Permalink to &quot;2.1 事件处理 on() 绑定事件&quot;">​</a></h3><p>on() 方法在匹配元素上绑定一个或多个事件的事件处理函数</p><p>语法：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>element.on(events,[selector],fn)</span></span></code></pre></div><ol><li><p>events:一个或多个用空格分隔的事件类型，如&quot;click&quot;或&quot;keydown&quot; 。</p></li><li><p>selector: 元素的子元素选择器 。</p></li><li><p>fn:回调函数 即绑定在元素身上的侦听函数。</p></li></ol><p><strong>on() 方法优势 1：</strong></p><p>可以绑定多个事件，多个处理事件处理程序。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> $(&quot;div&quot;).on({</span></span>
<span class="line"><span>  mouseover: function(){},</span></span>
<span class="line"><span>  mouseout: function(){},</span></span>
<span class="line"><span>  click: function(){}</span></span>
<span class="line"><span>});</span></span></code></pre></div><p>如果事件处理程序相同</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> $(&quot;div&quot;).on(&quot;mouseover mouseout&quot;, function() {</span></span>
<span class="line"><span>   $(this).toggleClass(&quot;current&quot;);</span></span>
<span class="line"><span>  });</span></span></code></pre></div><p><strong>on() 方法优势 2：</strong></p><p>可以事件委派操作 。事件委派的定义就是，把原来加给子元素身上的事件绑定在父元素身上，就是把事件委派给父元素。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$(&#39;ul&#39;).on(&#39;click&#39;, &#39;li&#39;, function() {</span></span>
<span class="line"><span>    alert(&#39;hello world!&#39;);</span></span>
<span class="line"><span>});</span></span></code></pre></div><p>在此之前有 bind(), live() delegate()等方法来处理事件绑定或者事件委派，最新版本的请用 on 替代他们。</p><p><strong>on() 方法优势 3：</strong></p><p>动态创建的元素，click() 没有办法绑定事件， on() 可以给动态生成的元素绑定事件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> $(&quot;div&quot;).on(&quot;click&quot;,&quot;p&quot;, function(){</span></span>
<span class="line"><span>     alert(&quot;俺可以给动态生成的元素绑定事件&quot;)</span></span>
<span class="line"><span> });</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> $(&quot;div&quot;).append($(&quot;&lt;p&gt;我是动态创建的p&lt;/p&gt;&quot;));</span></span></code></pre></div><h3 id="_2-2-事件处理-off-解绑事件" tabindex="-1">2.2 事件处理 off() 解绑事件 <a class="header-anchor" href="#_2-2-事件处理-off-解绑事件" aria-label="Permalink to &quot;2.2 事件处理 off() 解绑事件&quot;">​</a></h3><p>off() 方法可以移除通过 on() 方法添加的事件处理程序。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$(&quot;p&quot;).off() // 解绑p元素所有事件处理程序</span></span>
<span class="line"><span></span></span>
<span class="line"><span>$(&quot;p&quot;).off( &quot;click&quot;)  // 解绑p元素上面的点击事件 后面的 foo 是侦听函数名</span></span>
<span class="line"><span></span></span>
<span class="line"><span>$(&quot;ul&quot;).off(&quot;click&quot;, &quot;li&quot;);   // 解绑事件委托</span></span></code></pre></div><p>如果有的事件只想触发一次， 可以使用 one() 来绑定事件。</p><h3 id="_2-3-自动触发事件-trigger" tabindex="-1">2.3 自动触发事件 trigger() <a class="header-anchor" href="#_2-3-自动触发事件-trigger" aria-label="Permalink to &quot;2.3 自动触发事件 trigger()&quot;">​</a></h3><p>有些事件希望自动触发, 比如轮播图自动播放功能跟点击右侧按钮一致。可以利用定时器自动触发右侧按钮点击事件，不必鼠标点击触发。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>element.click()  // 第一种简写形式</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>element.trigger(&quot;type&quot;) // 第二种自动触发模式</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$(&quot;p&quot;).on(&quot;click&quot;, function () {</span></span>
<span class="line"><span>  alert(&quot;hi~&quot;);</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>$(&quot;p&quot;).trigger(&quot;click&quot;); // 此时自动触发点击事件，不需要鼠标点击</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>element.triggerHandler(type)  // 第三种自动触发模式</span></span></code></pre></div><p>triggerHandler 模式不会触发元素的默认行为，这是和前面两种的区别。</p><h3 id="_3-jquery-事件对象" tabindex="-1">3. jQuery 事件对象 <a class="header-anchor" href="#_3-jquery-事件对象" aria-label="Permalink to &quot;3. jQuery 事件对象&quot;">​</a></h3><p>事件被触发，就会有事件对象的产生。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>element.on(events,[selector],function(event) {})</span></span></code></pre></div><ul><li>阻止默认行为：event.preventDefault() 或者 return false</li><li>阻止冒泡： event.stopPropagation()</li></ul>`,41),i=[p];function o(l,c,u,d,r,h){return e(),s("div",null,i)}const b=a(t,[["render",o]]);export{v as __pageData,b as default};
