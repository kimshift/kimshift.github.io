import{_ as s,q as i,p as a,aE as n}from"./chunks/framework.-H45_L2h.js";const t="/assets/f3uI4xgbCRNUDad.COOUAYrG.png",l="/assets/YmqN2nGOCAHl6vb.DuFgApVQ.png",h="/assets/image-20210303152827179.CeHLbwNY.png",p="/assets/20201112181830417.DCLRQwpY.png",k="/assets/20201112212505527.Eoj9FiPU.png",b=JSON.parse('{"title":"ajax语法","description":"","frontmatter":{"title":"ajax语法","date":"2023-06-02T09:07:24.000Z","categories":["前端开发"],"tags":["ajax"]},"headers":[],"relativePath":"技术文章/前端开发/javascript/ajax语法.md","filePath":"技术文章/前端开发/javascript/ajax语法.md","lastUpdated":1723096133000}'),e={name:"技术文章/前端开发/javascript/ajax语法.md"},E=n('<h1 id="ajax-语法" tabindex="-1">ajax 语法 <a class="header-anchor" href="#ajax-语法" aria-label="Permalink to &quot;ajax 语法&quot;">​</a></h1><h2 id="_1-ajax-基础" tabindex="-1">1. Ajax 基础 <a class="header-anchor" href="#_1-ajax-基础" aria-label="Permalink to &quot;1. Ajax 基础&quot;">​</a></h2><h3 id="_1-1-传统网站中存在的问题" tabindex="-1">1.1 传统网站中存在的问题 <a class="header-anchor" href="#_1-1-传统网站中存在的问题" aria-label="Permalink to &quot;1.1 传统网站中存在的问题&quot;">​</a></h3><ul><li>网速慢的情况下，页面加载时间长，用户只能等待</li><li>表单提交后，如果一项内容不合格，需要重新填写所有表单内容</li><li>页面跳转，重新加载页面，造成资源浪费，增加用户等待时间</li></ul><h3 id="_1-2-ajax-概述" tabindex="-1">1.2 Ajax 概述 <a class="header-anchor" href="#_1-2-ajax-概述" aria-label="Permalink to &quot;1.2 Ajax 概述&quot;">​</a></h3><p>它是浏览器提供的一套方法，可以实现页面无刷新更新数据，提高用户浏览网站应用的体验。</p><h3 id="_1-3-ajax-的应用场景" tabindex="-1">1.3 Ajax 的应用场景 <a class="header-anchor" href="#_1-3-ajax-的应用场景" aria-label="Permalink to &quot;1.3 Ajax 的应用场景&quot;">​</a></h3><ol><li><p>页面上拉加载更多数据</p></li><li><p>列表数据无刷新分页</p></li><li><p>表单项离开焦点数据验证</p></li><li><p>搜索框提示文字下拉列表</p></li></ol><h3 id="_1-4-ajax-的运行环境" tabindex="-1">1.4 Ajax 的运行环境 <a class="header-anchor" href="#_1-4-ajax-的运行环境" aria-label="Permalink to &quot;1.4 Ajax 的运行环境&quot;">​</a></h3><p>Ajax 技术<strong>需要运行在网站环境中才能生效</strong>，当前素材会使用 Node 创建的服务器作为网站服务器。</p><p>素材代码文件:<code>https://gitee.com/kimshift/blackHorse-PinkTeacher-PPT</code></p><h2 id="_2-ajax-运行原理及实现" tabindex="-1">2. Ajax 运行原理及实现 <a class="header-anchor" href="#_2-ajax-运行原理及实现" aria-label="Permalink to &quot;2. Ajax 运行原理及实现&quot;">​</a></h2><h3 id="_2-1-ajax-运行原理" tabindex="-1">2.1 Ajax 运行原理 <a class="header-anchor" href="#_2-1-ajax-运行原理" aria-label="Permalink to &quot;2.1 Ajax 运行原理&quot;">​</a></h3><p>Ajax 相当于浏览器发送请求与接收响应的代理人，以实现在不影响用户浏览页面的情况下，局部更新页面数据，从而提高用户体验。</p><p><img src="'+t+`" alt="f3uI4xgbCRNUDad" loading="lazy"></p><h3 id="_2-2-ajax-的实现步骤" tabindex="-1">2.2 Ajax 的实现步骤 <a class="header-anchor" href="#_2-2-ajax-的实现步骤" aria-label="Permalink to &quot;2.2 Ajax 的实现步骤&quot;">​</a></h3><ol><li>创建 Ajax 对象</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xhr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XMLHttpRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><ol start="2"><li>告诉 Ajax 请求地址以及请求方式</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;get&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://www.example.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ol start="3"><li>发送请求</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><ol start="4"><li>获取服务器端给与客户端的响应数据</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(xhr.responseText)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>**PS:**案例见 Ajax 笔记素材 01Ajax 入门.html</p><h3 id="_2-3-服务器端响应的数据格式" tabindex="-1">2.3 服务器端响应的数据格式 <a class="header-anchor" href="#_2-3-服务器端响应的数据格式" aria-label="Permalink to &quot;2.3 服务器端响应的数据格式&quot;">​</a></h3><p>在真实的项目中，服务器端<strong>大多数情况下会以 JSON 对象作为响应数据的格式</strong>。当客户端拿到响应数据时，要将 JSON 数据和 HTML 字符串进行拼接，然后将拼接的结果展示在页面中。</p><p>可以发现服务器端响应给浏览器端的数据是以 <strong>JSON 对象的格式</strong>发送的，但浏览器控制台最终获得的是<strong>字符串格式</strong>的 JSON 对象</p><p>在 http 响应的过程中，无论是请求参数还是响应内容，如果是对象类型。<strong>最终都会被转换为对象字符串进行传输</strong>。因次在客户端我们需要将 JSON 字符串转换为 JSON 对象类型。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将json字符串转换为json对象</span></span></code></pre></div><p>响应的数据就变成 json 对象了。</p><p>**PS:**案例见 02.处理服务器端返回的 JSON 数据.html</p><h3 id="_2-4-请求参数传递" tabindex="-1">2.4 请求参数传递 <a class="header-anchor" href="#_2-4-请求参数传递" aria-label="Permalink to &quot;2.4 请求参数传递&quot;">​</a></h3><ul><li>传统网站表单提交</li></ul><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;get&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> action</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http: //www.example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;username&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!- http://www.example.com?username=zhangsan&amp;password=123456--&gt;</span></span></code></pre></div><ul><li>GET 请求方式</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;get&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://www.example.com?name=zhangsan&amp;age=20&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>**PS:**案例见 03.传递 GET 请求参数.html</p><ul><li>POST 请求方式</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setRequestHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;application/x-www-form-urlencoded&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name=zhangsan&amp;age=20&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>setRequestHeader：设置报文信息</p><h3 id="_2-5-请求报文" tabindex="-1">2.5 请求报文 <a class="header-anchor" href="#_2-5-请求报文" aria-label="Permalink to &quot;2.5 请求报文&quot;">​</a></h3><p>请求报文：在 http 请求和响应的过程中传递的数据块就是报文。 请求报文包括要传送的数据和一些附加信息，这些数据和信息要遵守规定好的格式。</p><p><img src="`+l+`" alt="YmqN2nGOCAHl6vb" loading="lazy"></p><p>请求报文包括<strong>报文头</strong>以及<strong>报文体</strong>，比如 Content-Type 就是报文头，请求参数以及一些存储的内容就是请求体，在请求的过程中，报文会被整体发送给服务器端。</p><p>**PS:**案例见 04.传递 post 请求参数.html</p><h3 id="_2-6-请求参数的格式" tabindex="-1">2.6 请求参数的格式 <a class="header-anchor" href="#_2-6-请求参数的格式" aria-label="Permalink to &quot;2.6 请求参数的格式&quot;">​</a></h3><ul><li>客户端向服务端传递请求参数的另外一种方式</li></ul><p>请求参数的格式</p><ol><li>application/x-www-form-urlencoded</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>name=zhangsan&amp;age=20&amp;sex=男</span></span></code></pre></div><ol start="2"><li>application/json</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{name:&#39;zhangsan&#39;,age:&#39;20&#39;,sex:&#39;男&#39;}</span></span></code></pre></div><p>在请求头中指定 Content-Type 属性的值是 application/json，告诉服务器端当前请求参数的格式是 json。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//将json对象转换为json字符串</span></span></code></pre></div><p><strong>注意</strong>: get 请求是不能提交 json 对象数据格式的，传统网站的表单提交也是不支持 json 对象数据格式的。592</p><p>**PS:**案例见 05.向服务器端传递 JSON 格式的请求参数.html</p><h3 id="_2-7-获取服务器端的响应" tabindex="-1">2.7 获取服务器端的响应 <a class="header-anchor" href="#_2-7-获取服务器端的响应" aria-label="Permalink to &quot;2.7 获取服务器端的响应&quot;">​</a></h3><ul><li>Ajax 状态码</li></ul><p>在创建 ajax 对象，配置 ajax 对象，发送请求，以及接收完服务器端响应数据，这个过程中的每一个步骤都会对应一个数值，这个数值就是 ajax 状态码。</p><p>0∶ 请求未初始化(还没有调用 open())</p><p>1∶ 请求已经建立，但是还没有发送(还没有调用 send())</p><p>2∶ 请求已经发送</p><p>3∶ 请求正在处理中，通常响应中已经有部分数据可以用了</p><p>4∶ 响应已经完成，可以获取并使用服务器的响应了</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>xhr.readystate //获取Ajax状态码</span></span></code></pre></div><ul><li>onreadystatechange 事件</li></ul><p>当 Ajax 状态码发生变化时将自动触发该事件</p><p><strong>onreadystatechange 事件</strong></p><p>当 Ajax 状态码发生变化时将自动触发该事件。在事件处理函数中可以获取 Ajax 状态码并对其进行判断，当状态码为 4 时就可以通过 xhr.responseText 获取服务器端的响应数据了。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//当Ajax状态码发生变化时</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onreadystatechange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //判断当Ajax状态码为4时</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (xhr.readystate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //获取服务器端的响应数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(xhr.responseText)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>两种获取服务器端响应方式的区别</li></ul><table tabindex="0"><thead><tr><th>区别描述</th><th>onload 事件</th><th>onreadystatechange 事件</th></tr></thead><tbody><tr><td>是否兼容 IE 低版本</td><td>不兼容</td><td>兼容</td></tr><tr><td>是否需要判断 Ajax 状态码</td><td>不需要</td><td>需要</td></tr><tr><td>被调用次数</td><td>—次</td><td>多次</td></tr></tbody></table><p>**PS:**案例见 06.获取服务器端响应数据的另外一种方式.html</p><h3 id="_2-8-ajax-错误处理" tabindex="-1">2.8 Ajax 错误处理 <a class="header-anchor" href="#_2-8-ajax-错误处理" aria-label="Permalink to &quot;2.8 Ajax 错误处理&quot;">​</a></h3><ol><li>网络畅通，服务器端能接收到请求，服务器端返回的结果不是预期结果。</li></ol><p>可以判断服务器端返回的状态码，分别进行处理。xhr.status 获取 http 状态码</p><ol start="2"><li>网络畅通，服务器端没有接收到请求，返回 404 状态码。</li></ol><p>检查请求地址是否错误。</p><ol start="3"><li>网络畅通，服务器端能接收到请求，服务器端返回 500 状态码。</li></ol><p>服务器端错误，找后端程序员进行沟通。</p><ol start="4"><li>网络中断，请求无法发送到服务器端。 会触发 xhr 对象下面的 onerror 事件，在 onerror 事件处理函数中对错误进行处理。</li></ol><ul><li>第一种错误</li></ul><p>将 HTTP 状态码设置会 400（请求参数错误），向浏览器端发送 &#39;not ok’</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(xhr.status)</span></span></code></pre></div><p>刷新后可以看到 http 状态码：400，这样的话就可以对 http 状态码是否为 400 进行条件判断，这样浏览器会弹出提示信息。</p><p>**PS:**案例见 07.Ajax 错误处理.html</p><ul><li><p>第二种错误（请求地址错误，服务器端接收不到浏览器端发送的请求，404） 将请求地址改为 <code>http://localhost:3000/error123</code>，而 后端没有这个路由的，此时浏览器端会显示错误信息：</p></li><li><p>第三种错误（网络畅通，服务器端能接收到请求，服务器端返回 HTTP 状态码 500）</p><p>500 状态码代表服务器端错误，服务器端程序执行错误，需要调试代码</p></li><li><p>第四种错误（网络错误，请求无法发送到服务器端） 这种情况会触发 xhr 对象下面的 onerror 事件，在 onerror 事件处理函数中对错误进行处理。 我们可以在 浏览器 network 中将网络状态设置为 offline，此时点击发送 Ajax 请求按钮的时候，可以看到：</p></li><li><p>关于 Ajax 状态码以 HTTP 状态码的理解：</p><p><strong>Ajax 状态码</strong>：表示 Ajax 请求的过程状态 ajax 对象返回的 <strong>Http 状态码</strong>：表示请求的处理结果 是服务器端返回的</p></li></ul><h3 id="_2-9-低版本-ie-浏览器的缓存问题" tabindex="-1">2.9 低版本 IE 浏览器的缓存问题 <a class="header-anchor" href="#_2-9-低版本-ie-浏览器的缓存问题" aria-label="Permalink to &quot;2.9 低版本 IE 浏览器的缓存问题&quot;">​</a></h3><p>**问题 ∶**在低版本的 E 浏览器中，Ajax 请求有严重的缓存问题，即在请求地址不发生变化的情况下，只有第一次请求会真正发送到服务器端，后续的请求都会从浏览器的缓存中获取结果。即使服务器端的数据更新了，客户端依然拿到的是缓存中的旧数据。</p><p>**解决方案 ∶**在请求地址的后面加请求参数，保证每一次请求中的请求参数的值不相同。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;get&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://www.example.com?t=&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>低版本的浏览器是不支持 onload 事件的，可以使用 onreadystatechange 事件来监听，当浏览器成功接收了服务器端的数据（此时的 Ajax 状态码为 4），同时 http 状态码为 200，可以在浏览器中显示出服务器端响应的数据。</p><p>重新发送请求，发现浏览器响应的内容是不变的。这是因为多次发送请求地址一样的请求，低版本的浏览器存在缓冲，会记录第一次响应的内容。</p><p>为了解决低版本浏览器的缓存问题，可以在请求地址后面加上请求参数，保证每一次请求中的请求参数的值不同。</p><p>Math.random()：每次产生一个随机变化的 0-1 之间的小数。这样可以保证请求参数每次都不一样。</p><p>再次打开 html 文件，发送 Ajax 请求可以看到低版本的 IE 浏览器也能避免缓存带来的问题了。</p><p>**PS:**案例见 08.Ajax 缓存.html</p><h2 id="_3-ajax-异步编程" tabindex="-1">3. Ajax 异步编程 <a class="header-anchor" href="#_3-ajax-异步编程" aria-label="Permalink to &quot;3. Ajax 异步编程&quot;">​</a></h2><h3 id="_3-1-同步异步概述" tabindex="-1">3.1 同步异步概述 <a class="header-anchor" href="#_3-1-同步异步概述" aria-label="Permalink to &quot;3.1 同步异步概述&quot;">​</a></h3><p><strong>同步</strong></p><ul><li>一个人同一时间只能做一件事情，只有一件事情做完，才能做另外—件事情。</li></ul><p><strong>异步</strong></p><ul><li>一个人一件事情做了一半，转而去做其他事情，当其他事情做完以后，再回过头来继续做之前未完成的事情。</li><li>落实到代码上，就是异步代码虽然需要花费时间去执行，但程序不会等待异步代码执行完成后再继续执行后续代码，而是直接执行后续代码，当后续代码执行完成后再回头看异步代码是否返回结果，如果已有返回结果，再调用事先准备好的回调函数处理异步代码执行的结果。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;before&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;last&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;after&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>PS</strong>:案例见 09.Ajax 异步请求.html</p><h3 id="_3-2-封装-ajax" tabindex="-1">3.2 封装 Ajax <a class="header-anchor" href="#_3-2-封装-ajax" aria-label="Permalink to &quot;3.2 封装 Ajax&quot;">​</a></h3><p>问题：发送一次请求代码过多，发送多次请求代码冗余且重复。</p><p>解决方法：将代码封装到函数中，发送请求调用函数即可。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ajax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;get&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://www.example.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  success</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><ul><li><p>type：请求方法</p></li><li><p>url：请求地址</p></li><li><p>success：请求成功后处理请求结果的函数</p></li><li><p>data：success 中的形参 data 就是处理后的结果</p><blockquote><p><strong>请求参数要考虑的问题</strong>：</p><ol><li>请求参数位置的问题</li></ol><p>将请求参数传递到 ajax 函数内部，在函数内部根据请求方式的不同将请求参数放到不同的位置</p><p>get：放在请求地址的后面</p><p>post： 放在 send()方法中</p><ol start="2"><li>请求参数格式的问题:参数名称=参数值&amp;参数名称=参数值</li></ol><p><code>application/x-www-form-urlencoded</code></p><p><code>name=zhangsan&amp;age=20</code></p><p><code>application/json</code></p><p><code>{name: &quot;zhangsan&quot;, age: 20}</code></p><ul><li><p>传递对象数据类型对于函数的调用者更加友好</p></li><li><p>在函数内部对象数据类型转换为字符串数据类型纪更为方便</p></li></ul></blockquote></li></ul><p><strong>封装一个简单的 ajax 函数</strong>：</p><ul><li>进一步封装，如何在浏览器向服务器发送请求的时候传递请求参数</li></ul><p>我们可以根据不同的请求方式将请求参数放到不同的地方。</p><p>如果请求方式为 GET，可以直接拼接到 请求地址 url 的后面 如果请求方式为 POST，可以将请求参数通过 xhr.send()发送给服务器端。</p><p>将 get 修改为 post：</p><p>进一步进行封装 post 请求报文请求头的数据格式，在 data 对象中加入 header 属性，用户可以设置 post 请求报文 请求头的 请求参数格式的类型。可以设置为</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>application/x-www-form-urlencoded</span></span></code></pre></div><p>或者为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>application/json</span></span></code></pre></div><p>由于 header 中 Content-Type 的属性值为 application/josn 因此向客户端发送的数据格式为 json 类型：</p><p>进一步完善请求成功后这一部分的代码：</p><p>当触发了 onload 事件的时候只能说这次的 ajax 请求完成了，不能代表请求一定是成功的，还是需要加上 http 状态码来做判断。当 http 状态码为 200 时，我们再调用 success 函数。否则，调用其他函数，也即实现对请求成功与请求失败的分别处理。</p><p>利用 Ajax 向服务器端发送请求，它一般都会返回 json 类型的数据。我们要对这个返回的数据类型做判断，如果这个数据类型里面包含 application/json ，就说明服务器端返回的是 json 类型的数据，我们可以将 json 字符串用 JSON.parse( )方法转换为 JSON 对象。然后将转换的结果重新赋值给 responseText 这个变量。</p><ul><li>简化 Ajax 封装函数的传参复杂性问题 上面我们所封装的函数实现了 ajax 的很多功能，但是这也增加了我们调用 ajax 函数时的复杂度，因此我们可以将一些参数进行参数默认化的处理。</li></ul><p><strong>最后改造封装函数：</strong></p><p>定义了 defaults 对象来保存 ajax 函数默认的参数值，比如默认的请求方式为 get，默认的请求参数类型为普通的字符串，其他的都会空。用户在调用 ajax 函数的时候传入的对象参数会通过 Object.assign（）方法与 defaults 对象进行属性合并</p><p>PS:案例见 10.ajax 函数封装.html</p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 定义一个函数来发送Ajax请求</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ajax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 配置的是默认值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> defaults </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;get&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      data: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      header: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;application/x-www-form-urlencoded&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      success</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {},</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用 options 对象中的属性覆盖 defaults 对象中的属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(defaults, options)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 创建ajax对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xhr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XMLHttpRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // params 是拼接请求参数的变量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 循环用户传递过来的参数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> attr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> defaults.data) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 将参数装换为字符串格式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      params </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">attr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}=\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">defaults</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">attr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&amp;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 将参数最后面的’&amp;‘截取掉，将截取后的结果重新赋值给 params 变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    params </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">substr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, params.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(params)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 判断请求方式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (defaults.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;get&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      defaults.url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">defaults</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">url</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}?\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">params</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // console.log(defaults.url)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 配置ajax对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(defaults.type, defaults.url)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 如果请求方式为 post</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (defaults.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;post&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contentType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> defaults.header[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 设置请求参数格式的类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setRequestHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, contentType)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 判断用户希望的请求参数格式的类型</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 如果类型为json</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (contentType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;application/json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 向服务器端传递json数据格式的参数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(defaults.data))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 先服务器端传递普通类型的请求参数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(params)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 发送请求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 监听 xhr对象下面的onload事件,当xhr对象接收完响应数据后触发</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // xhr.getResponseHeader : 获取响应头中的数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contentType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getResponseHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 服务器端返回的数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> responseText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xhr.responseText</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 如果响应类型中包含 application/json</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (contentType.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;application/json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // JSON字符串转换成JSON对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        responseText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(responseText)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 当 http 状态码为 200 的时候</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (xhr.status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 请求成功，调用请求成功情况的函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        defaults.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">success</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(responseText, xhr)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 请求失败，调用请求失败情况的函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        defaults.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(responseText, xhr)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 调用了ajax函数，传递了一个实参，这个实参是一个对象</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ajax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 请求方式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;get&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 请求地址</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://localhost:3000/responseData&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;zhangsan&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    success</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">xhr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 将请求成功后的结果与一段字符串进行拼接（对响应结果做进一步的处理，封装成函数更方便进行处理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;这里是success函数:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="_4-模板引擎" tabindex="-1">4. 模板引擎 <a class="header-anchor" href="#_4-模板引擎" aria-label="Permalink to &quot;4. 模板引擎&quot;">​</a></h2><h3 id="_1-模板引擎概述" tabindex="-1">1. 模板引擎概述 <a class="header-anchor" href="#_1-模板引擎概述" aria-label="Permalink to &quot;1. 模板引擎概述&quot;">​</a></h3><ol><li>作用：使用模板引擎提供的模板语法，可以将数据与 HTML 拼接起来。</li><li><a href="https://aui.github.io/art-template/zh-cn/index.html" target="_blank" rel="noreferrer">官方地址</a>:<a href="https://aui.github.io/art-template/zh-cn/" target="_blank" rel="noreferrer">https://aui.github.io/art-template/zh-cn/</a></li></ol><h3 id="_2-使用步骤" tabindex="-1">2. 使用步骤 <a class="header-anchor" href="#_2-使用步骤" aria-label="Permalink to &quot;2. 使用步骤&quot;">​</a></h3><ol><li>下载 art-template 模板引擎库文件并在 HTML 页面中引入库文件</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./js/template-web.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ul><li>准备 art-template 模板</li></ul><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tpl&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text/html&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;box&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ul><li>告诉模板引擎将哪一个模板和哪一个数据进行拼接</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> html </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tpl&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { username: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;zhangsan&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;20&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre></div><ul><li><p>将拼接好的 html 字符串添加到页面中</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;container&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).innerHTML </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> html</span></span></code></pre></div></li><li><p>通过模板语法告诉模板引擎，数据和 html 字符串要如何拼接</p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tpl&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text/html&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;box&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{username}}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li></ul><p><strong>PS</strong>:案例见 11.客户端模板引擎.html</p><h2 id="_5-3-个小案例" tabindex="-1">5. 3 个小案例 <a class="header-anchor" href="#_5-3-个小案例" aria-label="Permalink to &quot;5. 3 个小案例&quot;">​</a></h2><h3 id="ps1-验证邮箱地址的唯一性-实现步骤" tabindex="-1"><strong>PS1</strong>：验证邮箱地址的唯一性，实现步骤： <a class="header-anchor" href="#ps1-验证邮箱地址的唯一性-实现步骤" aria-label="Permalink to &quot;**PS1**：验证邮箱地址的唯一性，实现步骤：&quot;">​</a></h3><ol><li><p>获取文本框并为其添加离开焦点事件</p></li><li><p>离开焦点时，检测用户输入的邮箱地址是否符合规则（使用正则表达式验证即可）</p></li><li><p>如果用户输入的邮箱地址不符合规则，阻止程序向下执行，同时给出提示信息</p></li><li><p>如果用户输入的邮箱地址符合规则，则向服务器端发送请求，检测邮箱地址是否被别人注册</p></li><li><p>根据服务器端返回值决定客户端显示何种提示信息</p><p><strong>案例见 ps/01.检测邮箱地址唯一性.html</strong></p></li></ol><h3 id="ps2-搜索框内容自动提示-实现步骤" tabindex="-1"><strong>PS2</strong>: 搜索框内容自动提示，实现步骤： <a class="header-anchor" href="#ps2-搜索框内容自动提示-实现步骤" aria-label="Permalink to &quot;**PS2**: 搜索框内容自动提示，实现步骤：&quot;">​</a></h3><ol><li><p>获取搜索框并为其添加用户输入事件</p></li><li><p>获取用户输入的关键字</p></li><li><p>向服务器发送请求并携带关键字作为请求参数</p></li><li><p>将响应数据显示在搜索框底部</p><p><strong>案例见 ps/02.搜索框内容自动提示.html</strong></p></li></ol><p>PS3：省市区三级联动，实现步骤：</p><ol><li><p>通过接口获取省份信息</p></li><li><p>使用 javascript 获取到省市区下拉框元素</p></li><li><p>将服务器端返回的省份信息显示在下拉框中</p></li><li><p>为下拉框元素添加表单值改变事件（onchange）</p></li><li><p>当用户选择省份时，根据省份 id 获取城市信息</p></li><li><p>当用户选择城市时，根据城市 id 获取县城信息</p><p><strong>案例见 ps/03.省市区联动.html</strong></p></li></ol><h2 id="_6-formdata-对象" tabindex="-1">6. formData 对象 <a class="header-anchor" href="#_6-formdata-对象" aria-label="Permalink to &quot;6. formData 对象&quot;">​</a></h2><h3 id="_1-formdata-对象的作用" tabindex="-1">1. formData 对象的作用 <a class="header-anchor" href="#_1-formdata-对象的作用" aria-label="Permalink to &quot;1. formData 对象的作用&quot;">​</a></h3><ol><li>模拟 HTML 表单，相当于将 HTML 表单映射成表单对象，自动将表单对象中的数据拼接成请求参数的格式。</li><li>异步上传二进制文件</li></ol><h3 id="_2-formdata-对象的使用" tabindex="-1">2.formData 对象的使用 <a class="header-anchor" href="#_2-formdata-对象的使用" aria-label="Permalink to &quot;2.formData 对象的使用&quot;">​</a></h3><ol><li>准备 HTML 表单</li></ol><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;form&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;username&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;button&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;提交&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;btn&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ol start="2"><li>将 html 表单转化为 formData 对象</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> form </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;form&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> formData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FormData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(form)</span></span></code></pre></div><ol start="3"><li>提交表单对象</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(formData)</span></span></code></pre></div><ul><li>注意：</li></ul><ol><li>Formdata 对象不能用于 get 请求，因为对象需要被传递到 send 方法中，而 get 请求方式的请求参数只能放在请求地址的后面。</li><li>服务器端 bodyParser 模块不能解析 formData 对象表单数据，我们需要使用 formidable 模块进行解析。</li></ol><h3 id="_3-formdata-对象实例方法" tabindex="-1">3. formData 对象实例方法 <a class="header-anchor" href="#_3-formdata-对象实例方法" aria-label="Permalink to &quot;3. formData 对象实例方法&quot;">​</a></h3><ol><li>获取表单对象中的属性值</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">formData.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;key&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ol start="2"><li>设置表单对象中的属性值</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">formData.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;key&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;value&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ol start="3"><li>删除表单对象中属性的值</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">formData.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;key&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ol start="4"><li>向表单中追加属性值</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">formData.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;key&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;value&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>注意</strong>: set 方法与 append 方法的区别是，在属性名已存在的情况下，set 会覆盖已有键名的值，append 会保留两个值。</p><p><strong>PS</strong>:formData 对象的简单使用见:12.formData 表单的使用方法.html</p><h3 id="_4-formdata-二进制文件上传" tabindex="-1">4. FormData 二进制文件上传 <a class="header-anchor" href="#_4-formdata-二进制文件上传" aria-label="Permalink to &quot;4. FormData 二进制文件上传&quot;">​</a></h3><p>客户端的核心代码</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;file&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;file&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;file&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 当用户选择文件的时候</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onchange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 创建空表单对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> formData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FormData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 将用户选择的二进制文件追加到表单对象中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	formData.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;attrName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.files[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 配置ajax对象，请求方式必须为post</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;post&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;www.example.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>PS:案例见 13.FormData 对象实现二进制文件上传.html</strong></p><h3 id="_5-formdata-文件上传进度展示" tabindex="-1">5.FormData 文件上传进度展示 <a class="header-anchor" href="#_5-formdata-文件上传进度展示" aria-label="Permalink to &quot;5.FormData 文件上传进度展示&quot;">​</a></h3><p>核心代码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 当用户选择文件的时候</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onchange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 文件上传过程中持续触发 onprogress 事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  xhr.upload.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onprogress</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 当前上传文件大小/文件总大小，再将结果转换为百分比</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 将结果赋值给进度的宽度属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    bar.style.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ev.onload </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ev.total) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;%&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 ajax 对象 xhr 中有 upload 属性，upload 属性中有关于文件上传的一些事件，在文件上传的过程中可以持续触发 onprogress 事件，在这个事件的事件对象中我们可以看到 ev.loaded 以及 ev.total 这两个事件对象的属性，分别代表当前文件上传的大小以及上传文件的总大小，我们可以据此计算出文件上传的进度并以百分比的形式显示在页面中。</p><p><strong>PS:案例见 13.FormData 对象实现二进制文件上传.html</strong></p><h3 id="_6-foradata-文件上传图片及时预览" tabindex="-1">6.ForaData 文件上传图片及时预览 <a class="header-anchor" href="#_6-foradata-文件上传图片及时预览" aria-label="Permalink to &quot;6.ForaData 文件上传图片及时预览&quot;">​</a></h3><p>在我们将图片上传到服务器端义后，服务器端通常都会将圉片地址做为响应数据传递到客户端，客户端可以从响应数据中获取图片地址。然后将图片再显示在页面中。</p><h2 id="_7-同源政策" tabindex="-1">7. 同源政策 <a class="header-anchor" href="#_7-同源政策" aria-label="Permalink to &quot;7. 同源政策&quot;">​</a></h2><h3 id="_1-ajax-请求限制" tabindex="-1">1. Ajax 请求限制 <a class="header-anchor" href="#_1-ajax-请求限制" aria-label="Permalink to &quot;1. Ajax 请求限制&quot;">​</a></h3><p>Ajax 只能向自己的服务器发送请求。比如现在有一个 A 网站、有一个 B 网站，A 网站中的 HTML 文件只能向 A 网站服务器中发送 Ajax 请求，B 网站中的 HTML 文件只能向 B 网站中发送 Ajax 请求，但是 A 网站是不能向 B 网站发送 Ajax 请求的，同理，B 网站也不能向 A 网站发送 Ajax 请求。</p><h3 id="_2-什么是同源" tabindex="-1">2. 什么是同源 <a class="header-anchor" href="#_2-什么是同源" aria-label="Permalink to &quot;2. 什么是同源&quot;">​</a></h3><p>如果两个页面拥有相同的协议、域名和端口，那么这两个页面就属于同一个源，其中只要有一个不相同，就是不同源。</p><p><code>http://www.example.com/dir/page.html</code>（以此为例子相对比）</p><p><code>http://www.example.com/dir2/other.html</code>:同源</p><p><code>http://example.com/dir/other.html</code>:不同源(域名不同)</p><p><code>http://v2.www.example.com/dir/other.html</code>:不同源(域名不同)</p><p><code>http://www.example.com:81/dir/other.html</code>:不同源(端口不同)</p><p><code>https://www.example.com/dir/page.html</code>:不同源(协议不同)</p><h3 id="_3-同源政策的目的" tabindex="-1">3. 同源政策的目的 <a class="header-anchor" href="#_3-同源政策的目的" aria-label="Permalink to &quot;3. 同源政策的目的&quot;">​</a></h3><p>同源政策是为了保证用户信息的安全，防止恶意的网站窃取数据。最初的同源政策是指 A 网站在客户端设置的 Cookie，B 网站是不能访问的。 随着互联网的发展，同源政策也越来越严格，在不同源的情况下，其中有一项规定就是无法向非同源地址发送 Ajax 请求，如果请求，浏览器就会报错。</p><h3 id="_4-使用-jsonp-解决同源限制问题" tabindex="-1">4.使用 JSONP 解决同源限制问题 <a class="header-anchor" href="#_4-使用-jsonp-解决同源限制问题" aria-label="Permalink to &quot;4.使用 JSONP 解决同源限制问题&quot;">​</a></h3><p>jsonp 是 json with padding 的缩写，它不属于 AJax 请求，但它可以模拟 ajax 请求。</p><ol><li>将不同源的服务器端请求地址写在 script 标签的 src 属性中</li></ol><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;www.example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https:cdn.bootcss.com/jquery/3.3.1/jquery.min.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>因为 script 标签的 src 属性是不受同源限制的。</p><ol start="2"><li>服务器端响应的数据必须是一个函数的调用，真正要发送给客户端的数据需要作为函数调用的参数。</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;fn ({name: &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zhangsan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;, age:&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;})&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span></code></pre></div><p>函数以字符串的形式响应给客户端，函数是在客户端被调用的。</p><ol start="3"><li>在客户端全局作用下定义函数 fn</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> （</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">） { }</span></span></code></pre></div><p>注意：函数的定义要放在 script 标签前面，同时定义在全局作用域</p><ol start="4"><li>在 fn 函数内部对服务器返回的数据进行处理</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>PS:案例见 15.使用 jsonp 向非同源服务器端请求数据(1).html</strong></p><ul><li>总结：客户端在加载完响应内容之后，函数就会在客户端被调用，此时客户端在提前准备好函数的定义，通过这个函数来接收服务器端返回的数据。</li><li>jsonp 的理解：将 json 数据作为填充内容（padding：填充），在服务器端将 json 数据作为函数的参数，将 json 数据填充到函数中。</li></ul><h3 id="_5-jsonp-代码优化" tabindex="-1">5.JSONP 代码优化 <a class="header-anchor" href="#_5-jsonp-代码优化" aria-label="Permalink to &quot;5.JSONP 代码优化&quot;">​</a></h3><ol><li>客户端需要将函数名称传递到服务器端</li><li>将 script 请求的发送变成动态请求（比如点击按钮再发送请求）</li></ol><p>实现思路：我们只需要在想要发送请求的时候，使用 javascript 代码动态创建 script 标签，然后将 script 标签追加到页面中。这样请求也是可以发送的，请求是在 script 标签被追加到页面时发送的</p><p>16.使用 jsonp 向非同源服务器端请求数据(2).html</p><h3 id="_6-cors-跨域资源共享" tabindex="-1">6. CORS 跨域资源共享 <a class="header-anchor" href="#_6-cors-跨域资源共享" aria-label="Permalink to &quot;6. CORS 跨域资源共享&quot;">​</a></h3><p>CORS：全称是 Cross-origin resource sharing，即跨域资源共享，它允许浏览器向跨域服务器发送 Ajax 请求，客服了 Ajax 只能同源使用的限制。</p><p><img src="`+h+`" alt="image-20210303152827179" loading="lazy"></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>origin: http://localhost:3000</span></span>
<span class="line"><span>Access-Control-Allow-origin:&#39;http://localhost:3000&#39;//设置允许访问的客户端白名单</span></span>
<span class="line"><span>Access-control-Allow-Origin: &#39;*&#39;//允许所有客户端</span></span></code></pre></div><p>服务器端允许你跨域访问它你就可以跨域访问它，服务器端不允许你跨域访问它你就不能访问它，这种解决方案主要就是在服务器端做一些配置，客户端保持原有的 Ajax 代码不变即可。</p><p>整个跨域的请求过程： 当客户端向服务器端发送请求时，如果浏览器检测到这个请求时跨域的，就会自动在请求头中加入 origin 字段，字段的值就是当前发送请求的域信息，也就是你当前网站的页面地址，比如 A 网站向 B 网站发送请求，origin 中存储的就是 A 网站中的域名信息，这个域名信息包含协议、域名和端口号。服务器端会根据这个字段的值来决定是否同意这次请求，但不论服务器端是否同意这次请求，服务器端都会给客户端一个 正常的 http 响应。浏览器端如何判断服务器端同意这次请求呢？如果服务器端同意这次请求，会在响应头中加入 Access-Control-Allow-Origin 字段。如果服务器端不同意这次请求，就不会在响应头加入这个字段，所以浏览器端会根据响应头中是否有这个字段来判断服务器端是否同意这次请求。当然了客户端的这个判断是浏览器自动完成的，不需要开发人员来参与。</p><p>Access-Control-Allow-Origin 字段保存的是客户端的信息，是被允许访问当前服务器端的客户端信息，你可以理解为他就是一个白名单，如果你的网站信息被存储在服务器端的这个白名单当中，你就可以访问它的服务器端，这个字段的值通常是当前访问服务器端的客户端的原信息，或者是 ‘’，’&#39;就代表允许所有的客户端访问这个服务器端。这就是跨来域访问的整个请求过程。</p><p>具体的代码要如何实现呢？客户端的代码还是我们原来的 Aiax 代码，不需要做出任何的改变，客户端需要做的事情浏览器会自动帮我们做好。对于服务器端而言，我们要设置两项内容，一项是允许哪些客户端访问服务器端，另一项是设置客户端可以通过那些请求方法来访问服务器端，是使是用 get 方法还是 post 方法，还是两种方法都可以，这个需要根据具体的需求来决定。这两项信息要设置在上面地方呢？实际上设置在响应头中。</p><h3 id="_7-访问非同源数据-服务器端解决方案" tabindex="-1">7. 访问非同源数据，服务器端解决方案 <a class="header-anchor" href="#_7-访问非同源数据-服务器端解决方案" aria-label="Permalink to &quot;7. 访问非同源数据，服务器端解决方案&quot;">​</a></h3><p>同源政策是浏览器给予 Ajax 技术的限制，服务器端是不存在同源政策限制。</p><p><img src="`+p+'" alt="20201112181830417" loading="lazy"></p><p>服务器端开发语言可以直接获取非同源服务器端的数据，所以作为客户端来讲，当你想要访问非同源服务器网站中的数据时，你可以先让自己的网站服务端去获取非同源服务器网站中的数据，等待自己服务器端获取完数据以后自己网站的服务器端再将数据响应给自己网站中的客户端，这样就绕开了浏览器的同源政策限制。</p><p>例子：（1 号网站跨域访问 2 号网站服务器中的数据）</p><p>用 1 号网站的客户端访问 1 号网站的服务器端，由 1 号网站的服务器端去访问 2 号网站服务器端提供的数据，1 号服务器端把获取过来的数据再响应给 1 号网站的客户端。</p><h3 id="_8-cookie" tabindex="-1">8. cookie <a class="header-anchor" href="#_8-cookie" aria-label="Permalink to &quot;8. cookie&quot;">​</a></h3><p><img src="'+k+`" alt="20201112212505527" loading="lazy"></p><p>如何才能实现登录功能呢？如何才能让服务器端识别客户端的身份呢？这个时候 cookie 就闪亮登场了，cookie 就是用来实现服务器端与客户端身份识别的一种技术。如何进行身份识别呢？当客户端第一次访问服端的时候，服务器端检测到当前这个客户端我并不认识，这个时候服务器端在对客户端做出响应的同时还会给客户端发一个“小卡片”，这个“小卡片”你可以把它理解为服务器端发给客户端的身份证，有了这个身份证客户端就能够证明它是谁了，这个身份证我们就可以理解为 cookie。此时在客户端的浏览器中就有了这个身份证了，当客户端再一次访问服务器端，这个身份证也就是 cookie 会随着请求被自动发送到服务器端，服务器端拿到这个身份证服务器端就知道这个客户端是谁了，这样就建立了与服务器端持久的联系。</p><h3 id="_9-withcredentials-属性" tabindex="-1">9.withCredentials 属性 <a class="header-anchor" href="#_9-withcredentials-属性" aria-label="Permalink to &quot;9.withCredentials 属性&quot;">​</a></h3><p>在使用 Ajax 技术发送跨域请求时，默认情况下不会在请求中携带 cookie 信息。</p><p>withCredentials：指定在涉及跨域请求时，是否携带 cookie 信息，默认值为 false。</p><p>Access-Control-Allow-Credentials：true，允许客户端发送请求时携带 cookie。</p><p>我们可以通过实现跨域登录功能来验证：</p><p>我们可以在 1 号网站当前准备一个登录表单，登录表单中会包含用户名和密码输入框，还包含两个按钮：登录、检测登录状态。登录的请求地址被设置在了 2 号网站当中。</p><h2 id="_8-ajax" tabindex="-1">8. $.ajax() <a class="header-anchor" href="#_8-ajax" aria-label="Permalink to &quot;8. $.ajax()&quot;">​</a></h2><h3 id="_1-ajax-方法概述" tabindex="-1">1. $.ajax()方法概述 <a class="header-anchor" href="#_1-ajax-方法概述" aria-label="Permalink to &quot;1. $.ajax()方法概述&quot;">​</a></h3><h4 id="作用-发送-ajax-请求" tabindex="-1">作用:发送 Ajax 请求 <a class="header-anchor" href="#作用-发送-ajax-请求" aria-label="Permalink to &quot;作用:发送 Ajax 请求&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ajax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;get&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//请求类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://www.exzample.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//请求路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  data: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;zhangsan&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    age: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;20&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//请求参数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  contentType: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;application/x-www-form-urlencoded&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//请求头格式类型</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  beforesend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//发送请求前回调函数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  success</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//发送请求成功后回调函数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">xhr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//发送请求失败后回调函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><ul><li>当 <code>contentType</code> 为 <code>application/x-www-form-urlencoded</code> 时，data 的数据格式可以为 <code>name=zhangsan&amp;age=20</code>,也可以为<code>{name: &#39;zhangsan&#39;, age: &#39;20&#39;}</code>,最终都会被解析成这种格式：<code>name=zhangsan&amp;age=20，</code>发送给服务器</li><li>当 <code>contentType:&#39;application/json&#39;</code>,data 的数据格式需要将 json 对象转化成 Json 字符串才能发送给服务器：<code>JSON.stringify(params)</code></li><li>当 data 为 FormData 对象是，需要添加</li></ul><h4 id="serialize-方法" tabindex="-1">serialize 方法 <a class="header-anchor" href="#serialize-方法" aria-label="Permalink to &quot;serialize 方法&quot;">​</a></h4><p>作用:将表单中的数据自动拼接成字符串类型的参数</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> $</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#form&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">serialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//name=zhangsan&amp;age=30</span></span></code></pre></div><h4 id="作用-发送-jsonp-请求。" tabindex="-1">作用:发送 jsonp 请求。 <a class="header-anchor" href="#作用-发送-jsonp-请求。" aria-label="Permalink to &quot;作用:发送 jsonp 请求。&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ajax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://www.exzample.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //指定当前发送jsonp请求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  dataType: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;jsonp&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //修改callback参数名称</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  jsonp: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;cb&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //指定函数名称</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  jsoncallback: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fnName&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  success</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//发送请求成功后回调函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h3 id="_2-get-、-post-方法概述" tabindex="-1">2. $.get()、$.post()方法概述 <a class="header-anchor" href="#_2-get-、-post-方法概述" aria-label="Permalink to &quot;2. $.get()、$.post()方法概述&quot;">​</a></h3><p>作用: $.get方法用于发送get请求，$.post 方法用于发送 post 请求。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://www.example.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;zhangsan&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://www.example.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;lisi&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {})</span></span></code></pre></div><h3 id="_3-ajax-全局事件" tabindex="-1">3.Ajax 全局事件 <a class="header-anchor" href="#_3-ajax-全局事件" aria-label="Permalink to &quot;3.Ajax 全局事件&quot;">​</a></h3><p>只要页面中有 Ajax 请求被发送，对应的全局事件就会被触发</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ajaxstart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//当请求开始发送时触发</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ajaxcomplete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//当请求完成时触发</span></span></code></pre></div><h3 id="_4-nprogress-插件" tabindex="-1">4.NProgress 插件 <a class="header-anchor" href="#_4-nprogress-插件" aria-label="Permalink to &quot;4.NProgress 插件&quot;">​</a></h3><p>官宣:纳米级进度条，使用逼真的涓流动画来告诉用户正在发生的事情!</p><p>ricostacruz.com/nprogress/</p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://cdn.bootcdn.net/ajax/libs/nprogress/0.2.0/nprogress.css&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stylesheet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://cdn.bootcdn.net/ajax/libs/nprogress/0.2.0/nprogress.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NProgress.start </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//进度条开始运动</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NPrOgress.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">done</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//进度条结束运动</span></span></code></pre></div><h2 id="_9-xml-基础" tabindex="-1">9. XML 基础 <a class="header-anchor" href="#_9-xml-基础" aria-label="Permalink to &quot;9. XML 基础&quot;">​</a></h2><h3 id="_1-xml-是什么" tabindex="-1">1.XML 是什么 <a class="header-anchor" href="#_1-xml-是什么" aria-label="Permalink to &quot;1.XML 是什么&quot;">​</a></h3><p>XML 的全称是 extensible markup language，代表可扩展标记语言，它的作用是传输和存储数据。</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;消息标题&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;消息内容&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="_2-xml-dom" tabindex="-1">2.XML DOM <a class="header-anchor" href="#_2-xml-dom" aria-label="Permalink to &quot;2.XML DOM&quot;">​</a></h3><p>XMLDOM 即 XML 文档对象模型，是 w3c 组织定义的一套操作 XML 文档对象的 API。浏览器会将 XML 文档解析成文档对象模型。</p>`,265),r=[E];function d(g,o,c,y,F,u){return a(),i("div",null,r)}const C=s(e,[["render",d]]);export{b as __pageData,C as default};
