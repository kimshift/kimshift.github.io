import{_ as a,q as i,p as l,aE as s}from"./chunks/framework.-H45_L2h.js";const e="/assets/image-20210131000620323.kgOpvLKr.png",g=JSON.parse('{"title":"3.移动端布局","description":"","frontmatter":{"title":"3.移动端布局","date":"2023-06-02T09:58:25.000Z","categories":["前端开发"],"tags":["html"],"prev":"2.HTML5","next":"4.流式布局"},"headers":[],"relativePath":"技术文章/前端开发/html/3.移动端布局.md","filePath":"技术文章/前端开发/html/3.移动端布局.md","lastUpdated":1723096133000}'),t={name:"技术文章/前端开发/html/3.移动端布局.md"},n=s(`<h1 id="_3-移动端布局" tabindex="-1">3.移动端布局 <a class="header-anchor" href="#_3-移动端布局" aria-label="Permalink to &quot;3.移动端布局&quot;">​</a></h1><h2 id="_1-移动端基础" tabindex="-1">1. 移动端基础 <a class="header-anchor" href="#_1-移动端基础" aria-label="Permalink to &quot;1. 移动端基础&quot;">​</a></h2><h3 id="_1-1-浏览器现状" tabindex="-1">1.1 浏览器现状 <a class="header-anchor" href="#_1-1-浏览器现状" aria-label="Permalink to &quot;1.1 浏览器现状&quot;">​</a></h3><p><strong>PC 端常见浏览器</strong></p><p>360 浏览器、谷歌浏览器、火狐浏览器、QQ 浏览器、百度浏览器、搜狗浏览器、IE 浏览器。</p><p><strong>移动端常见浏览器</strong></p><p>UC 浏览器，QQ 浏览器，欧朋浏览器，百度手机浏览器，360 安全浏览器，谷歌浏览器，搜狗手机浏览器，猎豹浏览器，以及其他杂牌浏览器。</p><p>国内的 UC 和 QQ，百度等手机浏览器都是根据 Webkit 修改过来的内核，国内尚无自主研发的内核，就像国内的手机操作系统都是基于 Android 修改并发的样。 总结︰兼容移动端主流浏览器，处理 Webkit 内核浏览器即可。</p><h3 id="_1-2-手机屏幕现状" tabindex="-1">1.2 手机屏幕现状 <a class="header-anchor" href="#_1-2-手机屏幕现状" aria-label="Permalink to &quot;1.2 手机屏幕现状&quot;">​</a></h3><ul><li>移动端设备屏幕尺寸非常多，碎片化严重。</li><li>Android 设备有多种分辨率 ∶480x800,480x854,540x960,720x1280，1080x1920 等，还有传说中的 2K，4k 屏.</li><li>近年来 iPhone 的碎片化也加剧了，其设备的主要分辨率有 ∶640x960,640x1136,750x1334,1242x2208 等。</li><li>作为开发者无需关注这些分辨率，因为我们常用的尺寸单位是 px。</li></ul><h3 id="_1-3-手机尺寸" tabindex="-1">1.3 手机尺寸 <a class="header-anchor" href="#_1-3-手机尺寸" aria-label="Permalink to &quot;1.3 手机尺寸&quot;">​</a></h3><p>略</p><h3 id="_1-4-移动端调试方法" tabindex="-1">1.4 移动端调试方法 <a class="header-anchor" href="#_1-4-移动端调试方法" aria-label="Permalink to &quot;1.4 移动端调试方法&quot;">​</a></h3><ul><li>Chrome DevTools(谷歌浏览器）的模拟手机调试</li><li>搭建本地 web 服务器，手机和服务器一个局域网内，通过手机访问服务器</li><li>使用外网服务器，直接 IP 或域名访问</li></ul><h3 id="_1-5-总结" tabindex="-1">1.5 总结 <a class="header-anchor" href="#_1-5-总结" aria-label="Permalink to &quot;1.5 总结&quot;">​</a></h3><ul><li>移动端浏览器我们主要对 webkit 内核进行兼容</li><li>我们现在开发的移动端主要针对手机端开发</li><li>现在移动端碎片化比较严重，分辨率和屏幕尺寸大小不一</li><li>学会用谷歌浏览器模拟手机界面以及调试</li></ul><h2 id="_2-视口" tabindex="-1">2. 视口 <a class="header-anchor" href="#_2-视口" aria-label="Permalink to &quot;2. 视口&quot;">​</a></h2><p>**视口( viewport）**就是浏览器显示页面内容的屏幕区域。视口可以分为布局视口、视觉视口和理想视口</p><h3 id="_2-1-布局视口-layout-viewport" tabindex="-1">2.1 布局视口 layout viewport <a class="header-anchor" href="#_2-1-布局视口-layout-viewport" aria-label="Permalink to &quot;2.1 布局视口 layout viewport&quot;">​</a></h3><ul><li>一般移动设备的浏览器都默认设置了一个布局视口，用于解决早期的 PC 端页面在手机上显示的问题。</li><li>iOS,Android 基本都将这个视口分辨率设置为 980px，所以 PC 上的网页大多都能在手机上呈现，只不过元素看上去很小，一般默认可以通过手动缩放网页。</li></ul><h3 id="_2-2-视觉视口-visual-viewport" tabindex="-1">2.2 视觉视口 visual viewport <a class="header-anchor" href="#_2-2-视觉视口-visual-viewport" aria-label="Permalink to &quot;2.2 视觉视口 visual viewport&quot;">​</a></h3><ul><li>字面意思，它是用户正在看到的网站的区域。注意 ∶ 是网站的区域。</li><li>我们可以通过缩放去操作视觉视口，但不会影响布局视口，布局视口仍保持原来的宽度。</li></ul><h3 id="_2-3-理想视口-ideal-viewport" tabindex="-1">2.3 理想视口 ideal viewport <a class="header-anchor" href="#_2-3-理想视口-ideal-viewport" aria-label="Permalink to &quot;2.3 理想视口 ideal viewport&quot;">​</a></h3><ul><li>为了使网站在移动端有最理想的浏览和阅读宽度而设定</li><li>理想视口，对设备来讲，是最理想的视口尺寸</li><li>需要手动添写 meta 视口标签通知浏览器操作</li><li>meta 视口标签的主要目的︰布局视口的宽度应该与理想视口的宽度一致，简单理解就是设备有多宽，我们布局的视口就多宽</li></ul><h3 id="_2-4-总结" tabindex="-1">2.4 总结 <a class="header-anchor" href="#_2-4-总结" aria-label="Permalink to &quot;2.4 总结&quot;">​</a></h3><ul><li>视口就是浏览器显示页面内容的屏幕区域</li><li>视口分为布局视口、视觉视口和理想视口</li><li>我们移动端布局想要的是理想视口就是手机屏幕有多宽，我们的布局视口就有多宽</li><li>想要理想视口，我们需要给我们的移动端页面添加 meta 视口标签</li></ul><h3 id="_2-5-meta-视口标签" tabindex="-1">2.5 meta 视口标签 <a class="header-anchor" href="#_2-5-meta-视口标签" aria-label="Permalink to &quot;2.5 meta 视口标签&quot;">​</a></h3><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;viewport&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;width=device-width，user-scalable=no,initial-scale=1. 0,maximum-scale=1.0,minimum-scale=1.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span></code></pre></div><table tabindex="0"><thead><tr><th>属性</th><th>解释说明</th></tr></thead><tbody><tr><td>width</td><td>宽度设置的是 viewport 宽度，可以设置 device-width 特殊值</td></tr><tr><td>initial-scale</td><td>初始缩放比，大于 0 的数字</td></tr><tr><td>maximum-scale</td><td>最大缩放比，大于 0 的数字</td></tr><tr><td>minimum-scale</td><td>最小缩放比，大于 0 的数字</td></tr><tr><td>user-scalable</td><td>用户是否可以缩放，yes 或 no ( 1 或 0)</td></tr></tbody></table><h3 id="_2-6-标准的-viewport-设置" tabindex="-1">2.6 标准的 viewport 设置 <a class="header-anchor" href="#_2-6-标准的-viewport-设置" aria-label="Permalink to &quot;2.6 标准的 viewport 设置&quot;">​</a></h3><ul><li>视口宽度和设备保持一致</li><li>视口的默认缩放比例 1.0 不允许用户自行缩放最大允许的缩放比例 1.0 最小允许的缩放比例 1.0</li></ul><h2 id="_3-二倍图" tabindex="-1">3. 二倍图 <a class="header-anchor" href="#_3-二倍图" aria-label="Permalink to &quot;3. 二倍图&quot;">​</a></h2><h3 id="_3-1-物理像素-物理像素比" tabindex="-1">3.1 物理像素&amp;物理像素比 <a class="header-anchor" href="#_3-1-物理像素-物理像素比" aria-label="Permalink to &quot;3.1 物理像素&amp;物理像素比&quot;">​</a></h3><ul><li><p>物理像素点指的是屏幕显示的最小颗粒，是物理真实存在的。这是厂商在出厂时就设置好了,比如苹果 6\\7\\8 是 750*1334</p></li><li><p>我们开发时候的 1px 不是一定等于 1 个物理像素的</p></li><li><p>PC 端页面，1 个 px 等于 1 个物理像素的，但是移动端就不尽相同</p></li><li><p>一个 px 的能显示的物理像素点的个数，称为物理像素比或屏幕像素比</p></li><li><p>PC 端和早前的手机屏幕/普通手机屏幕: 1CSS 像素=1 物理像素的</p></li><li><p>Retina(视网膜屏幕)是一种显示技术，可以将把更多的物理像素点压缩至一块屏幕里，从而达到更高的分辨率，并提高屏幕显示的细腻程度。</p></li></ul><h3 id="_3-2-多倍图" tabindex="-1">3.2 多倍图 <a class="header-anchor" href="#_3-2-多倍图" aria-label="Permalink to &quot;3.2 多倍图&quot;">​</a></h3><ul><li>对于一张 50px*50px 的图片,在手机 Retina 屏中打开，按照刚才的物理像素比会放大倍数，这样会造成图片模糊</li><li>在标准的 viewport 设置中，使用倍图来提高图片质量，解决在高清设备中的模糊问题</li><li>通常使用二倍图，因为 iPhone 6\\7\\8 的影响,但是现在还存在 3 倍图 4 倍图的情况，这个看实际开发公司需求</li><li>背景图片注意缩放问题</li></ul><h3 id="_3-3-背景缩放-background-size" tabindex="-1">3.3 背景缩放 background-size <a class="header-anchor" href="#_3-3-背景缩放-background-size" aria-label="Permalink to &quot;3.3 背景缩放 background-size&quot;">​</a></h3><p>background-size 属性规定背景图像的尺寸</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>background-size:背景图片宽度背景图片高度;</span></span></code></pre></div><ul><li>单位︰长度|百分比| coverlcontain;</li><li>cover 把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。</li><li>contain 把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域</li></ul><h3 id="_3-4-二倍精灵图做法" tabindex="-1">3.4 二倍精灵图做法 <a class="header-anchor" href="#_3-4-二倍精灵图做法" aria-label="Permalink to &quot;3.4 二倍精灵图做法&quot;">​</a></h3><ul><li>在 firework 里面把精灵图等比例缩放为原来的一半</li><li>之后根据大小测量坐标</li><li>注意代码里面 background-size 也要写:精灵图原来宽度的一半</li></ul><h2 id="_4-移动端开发选择" tabindex="-1">4. 移动端开发选择 <a class="header-anchor" href="#_4-移动端开发选择" aria-label="Permalink to &quot;4. 移动端开发选择&quot;">​</a></h2><h3 id="_4-1-移动端主流方案" tabindex="-1">4.1 移动端主流方案 <a class="header-anchor" href="#_4-1-移动端主流方案" aria-label="Permalink to &quot;4.1 移动端主流方案&quot;">​</a></h3><p>1.单独制作移动端页面(主流)</p><ul><li><p>京东商城手机版</p></li><li><p>淘宝触屏版</p></li><li><p>苏宁易购手机版 …</p><p>2.响应式页面兼容移动端（其次)</p></li><li><p>三星手机官网</p></li></ul><h3 id="_4-2-单独移动端页面-主流" tabindex="-1">4.2 单独移动端页面(主流) <a class="header-anchor" href="#_4-2-单独移动端页面-主流" aria-label="Permalink to &quot;4.2 单独移动端页面(主流)&quot;">​</a></h3><p>通常情况下，网址域名前面加 m(mobile)可以打开移动端。通过判断设备，如果是移动设备打开，则跳到移动端页面。 如:m.taobao.com；m.jd.com；m.suning.com</p><h3 id="_4-3-响应式兼容-pc-移动端" tabindex="-1">4.3 响应式兼容 PC 移动端 <a class="header-anchor" href="#_4-3-响应式兼容-pc-移动端" aria-label="Permalink to &quot;4.3 响应式兼容 PC 移动端&quot;">​</a></h3><p>三星电子官网: www.samsung.com/cn/，通过判断屏幕宽度来改变样式，以适应不同终端。 缺点 ∶ 制作麻烦，需要花很大精力去调兼容性问题</p><h3 id="_4-4-总结" tabindex="-1">4.4 总结 <a class="header-anchor" href="#_4-4-总结" aria-label="Permalink to &quot;4.4 总结&quot;">​</a></h3><p>现在市场常见的移动端开发有<strong>单独制作移动端页面</strong>和<strong>响应式页面</strong>两种方案</p><p>现在市场主流的选择还是单独制作移动端页面</p><h2 id="_5-移动端技术解决方案" tabindex="-1">5.移动端技术解决方案 <a class="header-anchor" href="#_5-移动端技术解决方案" aria-label="Permalink to &quot;5.移动端技术解决方案&quot;">​</a></h2><h3 id="_5-1-移动端浏览器" tabindex="-1">5.1 移动端浏览器 <a class="header-anchor" href="#_5-1-移动端浏览器" aria-label="Permalink to &quot;5.1 移动端浏览器&quot;">​</a></h3><ul><li>移动端浏览器基本以 webkit 内核为主，因此我们就考虑 webkit 兼容性问题。</li><li>我们可以放心使用 H5 标签和 CSS3 样式。</li><li>同时我们浏览器的私有前缀我们只需要考虑添加 webkit 即可</li></ul><p><img src="`+e+`" alt="image-20210131000620323" loading="lazy"></p><h3 id="_5-2-css-初始化-normalize-css" tabindex="-1">5.2 CSS 初始化 normalize.css <a class="header-anchor" href="#_5-2-css-初始化-normalize-css" aria-label="Permalink to &quot;5.2 CSS 初始化 normalize.css&quot;">​</a></h3><p>移动端 CSS 初始化推荐使用 normalize.css/</p><ul><li>Normalize.css:保护了有价值的默认值</li><li>Normalize.css:修复了浏览器的 bug</li><li>Normalize.css∶ 是模块化的</li><li>Normalize.css:拥有详细的文档</li></ul><p>官网地址:<a href="http://necolas.github.io/normalize.css/" target="_blank" rel="noreferrer">http://necolas.github.io/normalize.css/</a></p><h3 id="_5-3-css3-盒子模型-box-sizing" tabindex="-1">5.3 CSS3 盒子模型 box-sizing <a class="header-anchor" href="#_5-3-css3-盒子模型-box-sizing" aria-label="Permalink to &quot;5.3 CSS3 盒子模型 box-sizing&quot;">​</a></h3><ul><li>传统模式宽度计算 ∶ 盒子的宽度=CSS 中设置的 width + border + padding</li><li>CSS3 盒子模型:盒子的宽度=CSS 中设置的宽度 width 里面包含了 border 和 padding 也就是说，我们的 CSS3 中的盒子模型，padding 和 border 不会撑大盒子了</li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*CSS3盒子模型*/</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">box-sizing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">border-box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*传统盒子模型*/</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">box-sizing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">content-box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><strong>传统 or cSs3 盒子模型?</strong></p><ul><li>移动端可以全部 CSS3 盒子模型</li><li>PC 端如果完全需要兼容，我们就用传统模式，如果不考虑兼容性，我们就选择 CSS3 盒子模型</li></ul><h3 id="_5-4-特殊样式" tabindex="-1">5.4 特殊样式 <a class="header-anchor" href="#_5-4-特殊样式" aria-label="Permalink to &quot;5.4 特殊样式&quot;">​</a></h3><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*CSS3盒子模型* /</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">box-sizing: border-box;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-webkit-box-sizing: border-box;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*点击高亮我们需要清除清除设置为transparent完成透明*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-webkit-tap-highlight-color: transparent;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*在移动端浏览器默认的外观在ios上加上这个属性才能给按钮和输入框自定义样式*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-webkit-appearance: none;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*禁用长按页面时的弹出菜单*/</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -webkit-touch-callout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">none</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_6-移动端常见布局" tabindex="-1">6.移动端常见布局 <a class="header-anchor" href="#_6-移动端常见布局" aria-label="Permalink to &quot;6.移动端常见布局&quot;">​</a></h2><p><strong>移动端技术选型</strong></p><p>移动端布局和以前我们学习的 PC 端有所区别:</p><ol><li>单独制作移动端页面(主流)</li></ol><ul><li><p>流式布局(百分比布局)</p></li><li><p>flex 弹性布局(强烈推荐)</p></li><li><p>less+rem+媒体查询布局</p></li><li><p>混合布局</p></li></ul><ol start="2"><li>响应式页面兼容移动端（其次)</li></ol><ul><li>媒体查询</li><li>bootstarp</li></ul>`,75),r=[n];function h(o,p,d,c,k,u){return l(),i("div",null,r)}const m=a(t,[["render",h]]);export{g as __pageData,m as default};
